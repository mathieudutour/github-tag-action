{"version":3,"file":"index.js","sources":["../src/tokenizer/types.js","../src/util/scopeflags.js","../src/util/whitespace.js","../src/util/location.js","../src/parser/base.js","../src/parser/comments.js","../src/parser/error-message.js","../src/parser/error.js","../src/plugins/estree.js","../src/tokenizer/context.js","../../babel-helper-validator-identifier/src/identifier.js","../../babel-helper-validator-identifier/src/keyword.js","../src/util/identifier.js","../src/plugins/flow.js","../src/plugins/jsx/xhtml.js","../src/plugins/jsx/index.js","../src/util/scope.js","../src/plugins/typescript/scope.js","../src/util/production-parameter.js","../src/plugins/typescript/index.js","../src/plugins/placeholders.js","../src/plugins/v8intrinsic.js","../src/plugin-utils.js","../src/options.js","../src/tokenizer/state.js","../src/tokenizer/index.js","../src/parser/util.js","../src/parser/node.js","../src/parser/lval.js","../src/util/expression-scope.js","../src/parser/expression.js","../src/parser/statement.js","../src/util/class-scope.js","../src/parser/index.js","../src/index.js"],"sourcesContent":["// @flow\n\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between regular\n// expressions and divisions. It is set on all token types that can\n// be followed by an expression (thus, a slash after them would be a\n// regular expression).\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string,\n  beforeExpr?: boolean,\n  startsExpr?: boolean,\n  rightAssociative?: boolean,\n  isLoop?: boolean,\n  isAssign?: boolean,\n  prefix?: boolean,\n  postfix?: boolean,\n  binop?: ?number,\n};\n\nexport class TokenType {\n  label: string;\n  keyword: ?string;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: ?number;\n  updateContext: ?(prevType: TokenType) => void;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    this.updateContext = null;\n  }\n}\n\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = new TokenType(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return new TokenType(name, { beforeExpr, binop });\n}\n\nexport const types: { [name: string]: TokenType } = {\n  num: new TokenType(\"num\", { startsExpr }),\n  bigint: new TokenType(\"bigint\", { startsExpr }),\n  decimal: new TokenType(\"decimal\", { startsExpr }),\n  regexp: new TokenType(\"regexp\", { startsExpr }),\n  string: new TokenType(\"string\", { startsExpr }),\n  name: new TokenType(\"name\", { startsExpr }),\n  eof: new TokenType(\"eof\"),\n\n  // Punctuation token types.\n  bracketL: new TokenType(\"[\", { beforeExpr, startsExpr }),\n  bracketHashL: new TokenType(\"#[\", { beforeExpr, startsExpr }),\n  bracketBarL: new TokenType(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: new TokenType(\"]\"),\n  bracketBarR: new TokenType(\"|]\"),\n  braceL: new TokenType(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: new TokenType(\"{|\", { beforeExpr, startsExpr }),\n  braceHashL: new TokenType(\"#{\", { beforeExpr, startsExpr }),\n  braceR: new TokenType(\"}\"),\n  braceBarR: new TokenType(\"|}\"),\n  parenL: new TokenType(\"(\", { beforeExpr, startsExpr }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", { beforeExpr }),\n  semi: new TokenType(\";\", { beforeExpr }),\n  colon: new TokenType(\":\", { beforeExpr }),\n  doubleColon: new TokenType(\"::\", { beforeExpr }),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", { beforeExpr }),\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", { beforeExpr }),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", { beforeExpr }),\n  backQuote: new TokenType(\"`\", { startsExpr }),\n  dollarBraceL: new TokenType(\"${\", { beforeExpr, startsExpr }),\n  at: new TokenType(\"@\"),\n  hash: new TokenType(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: new TokenType(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  eq: new TokenType(\"=\", { beforeExpr, isAssign }),\n  assign: new TokenType(\"_=\", { beforeExpr, isAssign }),\n  incDec: new TokenType(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: new TokenType(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: new TokenType(\"~\", { beforeExpr, prefix, startsExpr }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: new TokenType(\"%\", { beforeExpr, binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: new TokenType(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: new TokenType(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _for: createKeyword(\"for\", { isLoop }),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _while: createKeyword(\"while\", { isLoop }),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n};\n","// @flow\n\n// Each scope gets a bitset that may contain these flags\n// prettier-ignore\nexport const SCOPE_OTHER        = 0b00000000,\n             SCOPE_PROGRAM      = 0b00000001,\n             SCOPE_FUNCTION     = 0b00000010,\n             SCOPE_ARROW        = 0b00000100,\n             SCOPE_SIMPLE_CATCH = 0b00001000,\n             SCOPE_SUPER        = 0b00010000,\n             SCOPE_DIRECT_SUPER = 0b00100000,\n             SCOPE_CLASS        = 0b01000000,\n             SCOPE_TS_MODULE    = 0b10000000,\n             SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\n\nexport type ScopeFlags =\n  | typeof SCOPE_OTHER\n  | typeof SCOPE_PROGRAM\n  | typeof SCOPE_FUNCTION\n  | typeof SCOPE_VAR\n  | typeof SCOPE_ARROW\n  | typeof SCOPE_SIMPLE_CATCH\n  | typeof SCOPE_SUPER\n  | typeof SCOPE_DIRECT_SUPER\n  | typeof SCOPE_CLASS;\n\n// These flags are meant to be _only_ used inside the Scope class (or subclasses).\n// prettier-ignore\nexport const BIND_KIND_VALUE           = 0b00000_0000_01,\n             BIND_KIND_TYPE            = 0b00000_0000_10,\n             // Used in checkLVal and declareName to determine the type of a binding\n             BIND_SCOPE_VAR            = 0b00000_0001_00, // Var-style binding\n             BIND_SCOPE_LEXICAL        = 0b00000_0010_00, // Let- or const-style binding\n             BIND_SCOPE_FUNCTION       = 0b00000_0100_00, // Function declaration\n             BIND_SCOPE_OUTSIDE        = 0b00000_1000_00, // Special case for function names as\n                                                   // bound inside the function\n             // Misc flags\n             BIND_FLAGS_NONE           = 0b00001_0000_00,\n             BIND_FLAGS_CLASS          = 0b00010_0000_00,\n             BIND_FLAGS_TS_ENUM        = 0b00100_0000_00,\n             BIND_FLAGS_TS_CONST_ENUM  = 0b01000_0000_00,\n             BIND_FLAGS_TS_EXPORT_ONLY = 0b10000_0000_00;\n\n// These flags are meant to be _only_ used by Scope consumers\n// prettier-ignore\n/*                              =    is value?    |    is type?    |      scope          |    misc flags    */\nexport const BIND_CLASS         = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_CLASS  ,\n             BIND_LEXICAL       = BIND_KIND_VALUE | 0              | BIND_SCOPE_LEXICAL  | 0                 ,\n             BIND_VAR           = BIND_KIND_VALUE | 0              | BIND_SCOPE_VAR      | 0                 ,\n             BIND_FUNCTION      = BIND_KIND_VALUE | 0              | BIND_SCOPE_FUNCTION | 0                 ,\n             BIND_TS_INTERFACE  = 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_CLASS  ,\n             BIND_TS_TYPE       = 0               | BIND_KIND_TYPE | 0                   | 0                 ,\n             BIND_TS_ENUM       = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_TS_ENUM,\n             BIND_TS_AMBIENT    = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n             // These bindings don't introduce anything in the scope. They are used for assignments and\n             // function expressions IDs.\n             BIND_NONE          = 0               | 0              | 0                   | BIND_FLAGS_NONE   ,\n             BIND_OUTSIDE       = BIND_KIND_VALUE | 0              | 0                   | BIND_FLAGS_NONE   ,\n\n             BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n             BIND_TS_NAMESPACE  = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY;\n\nexport type BindingTypes =\n  | typeof BIND_NONE\n  | typeof BIND_OUTSIDE\n  | typeof BIND_VAR\n  | typeof BIND_LEXICAL\n  | typeof BIND_CLASS\n  | typeof BIND_FUNCTION\n  | typeof BIND_TS_INTERFACE\n  | typeof BIND_TS_TYPE\n  | typeof BIND_TS_ENUM\n  | typeof BIND_TS_AMBIENT\n  | typeof BIND_TS_NAMESPACE;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_FLAG_STATIC = 0b1_00,\n             CLASS_ELEMENT_KIND_GETTER = 0b0_10,\n             CLASS_ELEMENT_KIND_SETTER = 0b0_01,\n             CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_STATIC_GETTER   = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_STATIC_SETTER   = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n             CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n             CLASS_ELEMENT_OTHER           = 0;\n\nexport type ClassElementTypes =\n  | typeof CLASS_ELEMENT_STATIC_GETTER\n  | typeof CLASS_ELEMENT_STATIC_SETTER\n  | typeof CLASS_ELEMENT_INSTANCE_GETTER\n  | typeof CLASS_ELEMENT_INSTANCE_SETTER\n  | typeof CLASS_ELEMENT_OTHER;\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n","// @flow\n\nimport { lineBreakG } from \"./whitespace\";\n\nexport type Pos = {\n  start: number,\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n\n  constructor(line: number, col: number) {\n    this.line = line;\n    this.column = col;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: ?string;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // $FlowIgnore (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n// The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\n\nexport function getLineInfo(input: string, offset: number): Position {\n  let line = 1;\n  let lineStart = 0;\n  let match;\n  lineBreakG.lastIndex = 0;\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type State from \"../tokenizer/state\";\nimport type { PluginsMap } from \"./index\";\nimport type ScopeHandler from \"../util/scope\";\nimport type ExpressionScopeHandler from \"../util/expression-scope\";\nimport type ClassScopeHandler from \"../util/class-scope\";\nimport type ProductionParameterHandler from \"../util/production-parameter\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  declare options: Options;\n  declare inModule: boolean;\n  declare scope: ScopeHandler<*>;\n  declare classScope: ClassScopeHandler;\n  declare prodParam: ProductionParameterHandler;\n  declare expressionScope: ExpressionScopeHandler;\n  declare plugins: PluginsMap;\n  declare filename: ?string;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  declare state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  declare input: string;\n  declare length: number;\n\n  hasPlugin(name: string): boolean {\n    return this.plugins.has(name);\n  }\n\n  getPluginOption(plugin: string, name: string) {\n    // $FlowIssue\n    if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];\n  }\n}\n","// @flow\n\n/**\n * Based on the comment attachment algorithm used in espree and estraverse.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright\n *   notice, this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport BaseParser from \"./base\";\nimport type { Comment, Node } from \"../types\";\n\nfunction last<T>(stack: $ReadOnlyArray<T>): T {\n  return stack[stack.length - 1];\n}\n\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.trailingComments.push(comment);\n    this.state.leadingComments.push(comment);\n  }\n\n  adjustCommentsAfterTrailingComma(\n    node: Node,\n    elements: (Node | null)[],\n    // When the current node is followed by a token which hasn't a respective AST node, we\n    // need to take all the trailing comments to prevent them from being attached to an\n    // unrelated node. e.g. in\n    //     var { x } /* cmt */ = { y }\n    // we don't want /* cmt */ to be attached to { y }.\n    // On the other hand, in\n    //     fn(x) [new line] /* cmt */ [new line] y\n    // /* cmt */ is both a trailing comment of fn(x) and a leading comment of y\n    takeAllComments?: boolean,\n  ) {\n    if (this.state.leadingComments.length === 0) {\n      return;\n    }\n\n    let lastElement = null;\n    let i = elements.length;\n    while (lastElement === null && i > 0) {\n      lastElement = elements[--i];\n    }\n    if (lastElement === null) {\n      return;\n    }\n\n    for (let j = 0; j < this.state.leadingComments.length; j++) {\n      if (\n        this.state.leadingComments[j].end < this.state.commentPreviousNode.end\n      ) {\n        this.state.leadingComments.splice(j, 1);\n        j--;\n      }\n    }\n\n    const newTrailingComments = [];\n    for (let i = 0; i < this.state.leadingComments.length; i++) {\n      const leadingComment = this.state.leadingComments[i];\n      if (leadingComment.end < node.end) {\n        newTrailingComments.push(leadingComment);\n\n        // Perf: we don't need to splice if we are going to reset the array anyway\n        if (!takeAllComments) {\n          this.state.leadingComments.splice(i, 1);\n          i--;\n        }\n      } else {\n        if (node.trailingComments === undefined) {\n          node.trailingComments = [];\n        }\n        node.trailingComments.push(leadingComment);\n      }\n    }\n    if (takeAllComments) this.state.leadingComments = [];\n\n    if (newTrailingComments.length > 0) {\n      lastElement.trailingComments = newTrailingComments;\n    } else if (lastElement.trailingComments !== undefined) {\n      lastElement.trailingComments = [];\n    }\n  }\n\n  processComment(node: Node): void {\n    if (node.type === \"Program\" && node.body.length > 0) return;\n\n    const stack = this.state.commentStack;\n\n    let firstChild, lastChild, trailingComments, i, j;\n\n    if (this.state.trailingComments.length > 0) {\n      // If the first comment in trailingComments comes after the\n      // current node, then we're good - all comments in the array will\n      // come after the node and so it's safe to add them as official\n      // trailingComments.\n      if (this.state.trailingComments[0].start >= node.end) {\n        trailingComments = this.state.trailingComments;\n        this.state.trailingComments = [];\n      } else {\n        // Otherwise, if the first comment doesn't come after the\n        // current node, that means we have a mix of leading and trailing\n        // comments in the array and that leadingComments contains the\n        // same items as trailingComments. Reset trailingComments to\n        // zero items and we'll handle this by evaluating leadingComments\n        // later.\n        this.state.trailingComments.length = 0;\n      }\n    } else if (stack.length > 0) {\n      const lastInStack = last(stack);\n      if (\n        lastInStack.trailingComments &&\n        lastInStack.trailingComments[0].start >= node.end\n      ) {\n        trailingComments = lastInStack.trailingComments;\n        delete lastInStack.trailingComments;\n      }\n    }\n\n    // Eating the stack.\n    if (stack.length > 0 && last(stack).start >= node.start) {\n      firstChild = stack.pop();\n    }\n\n    while (stack.length > 0 && last(stack).start >= node.start) {\n      lastChild = stack.pop();\n    }\n\n    if (!lastChild && firstChild) lastChild = firstChild;\n\n    // Adjust comments that follow a trailing comma on the last element in a\n    // comma separated list of nodes to be the trailing comments on the last\n    // element\n    if (firstChild) {\n      switch (node.type) {\n        case \"ObjectExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties);\n          break;\n        case \"ObjectPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties, true);\n          break;\n        case \"CallExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.arguments);\n          break;\n        case \"ArrayExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements);\n          break;\n        case \"ArrayPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements, true);\n          break;\n      }\n    } else if (\n      this.state.commentPreviousNode &&\n      ((this.state.commentPreviousNode.type === \"ImportSpecifier\" &&\n        node.type !== \"ImportSpecifier\") ||\n        (this.state.commentPreviousNode.type === \"ExportSpecifier\" &&\n          node.type !== \"ExportSpecifier\"))\n    ) {\n      this.adjustCommentsAfterTrailingComma(node, [\n        this.state.commentPreviousNode,\n      ]);\n    }\n\n    if (lastChild) {\n      if (lastChild.leadingComments) {\n        if (\n          lastChild !== node &&\n          lastChild.leadingComments.length > 0 &&\n          last(lastChild.leadingComments).end <= node.start\n        ) {\n          node.leadingComments = lastChild.leadingComments;\n          delete lastChild.leadingComments;\n        } else {\n          // A leading comment for an anonymous class had been stolen by its first ClassMethod,\n          // so this takes back the leading comment.\n          // See also: https://github.com/eslint/espree/issues/158\n          for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {\n            if (lastChild.leadingComments[i].end <= node.start) {\n              node.leadingComments = lastChild.leadingComments.splice(0, i + 1);\n              break;\n            }\n          }\n        }\n      }\n    } else if (this.state.leadingComments.length > 0) {\n      if (last(this.state.leadingComments).end <= node.start) {\n        if (this.state.commentPreviousNode) {\n          for (j = 0; j < this.state.leadingComments.length; j++) {\n            if (\n              this.state.leadingComments[j].end <\n              this.state.commentPreviousNode.end\n            ) {\n              this.state.leadingComments.splice(j, 1);\n              j--;\n            }\n          }\n        }\n        if (this.state.leadingComments.length > 0) {\n          node.leadingComments = this.state.leadingComments;\n          this.state.leadingComments = [];\n        }\n      } else {\n        // https://github.com/eslint/espree/issues/2\n        //\n        // In special cases, such as return (without a value) and\n        // debugger, all comments will end up as leadingComments and\n        // will otherwise be eliminated. This step runs when the\n        // commentStack is empty and there are comments left\n        // in leadingComments.\n        //\n        // This loop figures out the stopping point between the actual\n        // leading and trailing comments by finding the location of the\n        // first comment that comes after the given node.\n        for (i = 0; i < this.state.leadingComments.length; i++) {\n          if (this.state.leadingComments[i].end > node.start) {\n            break;\n          }\n        }\n\n        // Split the array based on the location of the first comment\n        // that comes after the node. Keep in mind that this could\n        // result in an empty array, and if so, the array must be\n        // deleted.\n        const leadingComments = this.state.leadingComments.slice(0, i);\n\n        if (leadingComments.length) {\n          node.leadingComments = leadingComments;\n        }\n\n        // Similarly, trailing comments are attached later. The variable\n        // must be reset to null if there are no trailing comments.\n        trailingComments = this.state.leadingComments.slice(i);\n        if (trailingComments.length === 0) {\n          trailingComments = null;\n        }\n      }\n    }\n\n    this.state.commentPreviousNode = node;\n\n    if (trailingComments) {\n      if (\n        trailingComments.length &&\n        trailingComments[0].start >= node.start &&\n        last(trailingComments).end <= node.end\n      ) {\n        node.innerComments = trailingComments;\n      } else {\n        // TrailingComments maybe contain innerComments\n        const firstTrailingCommentIndex = trailingComments.findIndex(\n          comment => comment.end >= node.end,\n        );\n\n        if (firstTrailingCommentIndex > 0) {\n          node.innerComments = trailingComments.slice(\n            0,\n            firstTrailingCommentIndex,\n          );\n          node.trailingComments = trailingComments.slice(\n            firstTrailingCommentIndex,\n          );\n        } else {\n          node.trailingComments = trailingComments;\n        }\n      }\n    }\n\n    stack.push(node);\n  }\n}\n","// @flow\n/* eslint sort-keys: \"error\" */\n\n/**\n * @module parser/error-message\n */\n\n// The Errors key follows https://cs.chromium.org/chromium/src/v8/src/common/message-template.h unless it does not exist\nexport const ErrorMessages = Object.freeze({\n  AccessorIsGenerator: \"A %0ter cannot be a generator\",\n  ArgumentsInClass:\n    \"'arguments' is only allowed in functions and class methods\",\n  AsyncFunctionInSingleStatementContext:\n    \"Async functions can only be declared at the top level or inside a block\",\n  AwaitBindingIdentifier:\n    \"Can not use 'await' as identifier inside an async function\",\n  AwaitExpressionFormalParameter:\n    \"await is not allowed in async function parameters\",\n  AwaitNotInAsyncContext:\n    \"'await' is only allowed within async functions and at the top levels of modules\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions\",\n  BadGetterArity: \"getter must not have any formal parameters\",\n  BadSetterArity: \"setter must have exactly one formal parameter\",\n  BadSetterRestParameter:\n    \"setter function argument must not be a rest parameter\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'\",\n  ConstructorClassPrivateField:\n    \"Classes may not have a private field named '#constructor'\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor\",\n  ConstructorIsAsync: \"Constructor can't be an async function\",\n  ConstructorIsGenerator: \"Constructor can't be a generator\",\n  DeclarationMissingInitializer: \"%0 require an initialization value\",\n  DecoratorBeforeExport:\n    \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax\",\n  DecoratorConstructor:\n    \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass:\n    \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block\",\n  DeletePrivateField: \"Deleting a private field is not allowed\",\n  DestructureNamedImport:\n    \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport:\n    \"`%0` has already been exported. Exported identifiers must be unique.\",\n  DuplicateProto: \"Redefinition of __proto__ property\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag\",\n  DuplicateStaticBlock: \"Duplicate static block in the same class\",\n  ElementAfterRest: \"Rest element must be last element\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape\",\n  ExportBindingIsString:\n    \"A string literal cannot be used as an exported binding without `from`.\\n- Did you mean `export { %0 as '%1' } from 'some-module'`?\",\n  ExportDefaultFromAsIdentifier:\n    \"'from' is not allowed as an identifier after 'export default'\",\n  ForInOfLoopInitializer:\n    \"%0 loop variable declaration may not have an initializer\",\n  GeneratorInSingleStatementContext:\n    \"Generators can only be declared at the top level or inside a block\",\n  IllegalBreakContinue: \"Unsyntactic %0\",\n  IllegalLanguageModeDirective:\n    \"Illegal 'use strict' directive in function with non-simple parameter list\",\n  IllegalReturn: \"'return' outside of function\",\n  ImportBindingIsString:\n    'A string literal cannot be used as an imported binding.\\n- Did you mean `import { \"%0\" as foo }`?',\n  ImportCallArgumentTrailingComma:\n    \"Trailing comma is disallowed inside import(...) arguments\",\n  ImportCallArity: \"import() requires exactly %0\",\n  ImportCallNotNewExpression: \"Cannot use new with import(...)\",\n  ImportCallSpreadArgument: \"... is not allowed in import()\",\n  ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n  ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral\",\n  InvalidCodePoint: \"Code point out of bounds\",\n  InvalidDecimal: \"Invalid decimal\",\n  InvalidDigit: \"Expected number in radix %0\",\n  InvalidEscapeSequence: \"Bad character escape sequence\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template\",\n  InvalidEscapedReservedWord: \"Escape sequence in keyword %0\",\n  InvalidIdentifier: \"Invalid identifier %0\",\n  InvalidLhs: \"Invalid left-hand side in %0\",\n  InvalidLhsBinding: \"Binding invalid left-hand side in %0\",\n  InvalidNumber: \"Invalid number\",\n  InvalidOrMissingExponent:\n    \"Floating-point numbers require a valid exponent after the 'e'\",\n  InvalidOrUnexpectedToken: \"Unexpected character '%0'\",\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern\",\n  InvalidPrivateFieldResolution: \"Private name #%0 is not defined\",\n  InvalidPropertyBindingPattern: \"Binding member expression\",\n  InvalidRecordProperty:\n    \"Only properties and spread elements are allowed in record definitions\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument\",\n  LabelRedeclaration: \"Label '%0' is already declared\",\n  LetInLexicalBinding:\n    \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'\",\n  MalformedRegExpFlags: \"Invalid regular expression flag\",\n  MissingClassName: \"A class name is required\",\n  MissingEqInAssignment:\n    \"Only '=' operator can be used for specifying default value.\",\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX\",\n  MixingCoalesceWithLogical:\n    \"Nullish coalescing operator(??) requires parens when mixing with logical operators\",\n  ModuleAttributeDifferentFromType:\n    \"The only accepted module attribute is `type`\",\n  ModuleAttributeInvalidValue:\n    \"Only string literals are allowed as module attribute values\",\n  ModuleAttributesWithDuplicateKeys:\n    'Duplicate key \"%0\" is not allowed in module attributes',\n  ModuleExportNameHasLoneSurrogate:\n    \"An export name cannot include a lone surrogate, found '\\\\u%0'\",\n  ModuleExportUndefined: \"Export '%0' is not defined\",\n  MultipleDefaultsInSwitch: \"Multiple default clauses\",\n  NewlineAfterThrow: \"Illegal newline after throw\",\n  NoCatchOrFinally: \"Missing catch or finally clause\",\n  NumberIdentifier: \"Identifier directly after number\",\n  NumericSeparatorInEscapeSequence:\n    \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences\",\n  ObsoleteAwaitStar:\n    \"await* has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew:\n    \"constructors in/after an Optional Chain are not allowed\",\n  OptionalChainingNoTemplate:\n    \"Tagged Template Literals are not allowed in optionalChain\",\n  ParamDupe: \"Argument name clash\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter\",\n  PatternHasMethod: \"Object pattern can't contain methods\",\n  PipelineBodyNoArrow:\n    'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized',\n  PipelineBodySequenceExpression:\n    \"Pipeline body may not be a comma-separated sequence expression\",\n  PipelineHeadSequenceExpression:\n    \"Pipeline head should not be a comma-separated sequence expression\",\n  PipelineTopicUnused:\n    \"Pipeline is in topic style but does not use topic reference\",\n  PrimaryTopicNotAllowed:\n    \"Topic reference was used in a lexical context without topic binding\",\n  PrimaryTopicRequiresSmartPipeline:\n    \"Primary Topic Reference found but pipelineOperator not passed 'smart' for 'proposal' option.\",\n  PrivateInExpectedIn:\n    \"Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`)\",\n  PrivateNameRedeclaration: \"Duplicate private name #%0\",\n  RecordExpressionBarIncorrectEndSyntaxType:\n    \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  RecordExpressionBarIncorrectStartSyntaxType:\n    \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  RecordExpressionHashIncorrectStartSyntaxType:\n    \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element\",\n  SloppyFunction:\n    \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement\",\n  StaticPrototype: \"Classes may not have static property named prototype\",\n  StrictDelete: \"Deleting local variable in strict mode\",\n  StrictEvalArguments: \"Assigning to '%0' in strict mode\",\n  StrictEvalArgumentsBinding: \"Binding '%0' in strict mode\",\n  StrictFunction:\n    \"In strict mode code, functions can only be declared at top level or inside a block\",\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'\",\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode\",\n  StrictWith: \"'with' in strict mode\",\n  SuperNotAllowed:\n    \"super() is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super\",\n  TrailingDecorator: \"Decorators must be attached to a class element\",\n  TupleExpressionBarIncorrectEndSyntaxType:\n    \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  TupleExpressionBarIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  TupleExpressionHashIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder\",\n  UnexpectedAwaitAfterPipelineBody:\n    'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token\",\n  UnexpectedImportExport:\n    \"'import' and 'export' may only appear at the top level\",\n  UnexpectedKeyword: \"Unexpected keyword '%0'\",\n  UnexpectedLeadingDecorator:\n    \"Leading decorators must be attached to a class declaration\",\n  UnexpectedLexicalDeclaration:\n    \"Lexical declaration cannot appear in a single-statement context\",\n  UnexpectedNewTarget: \"new.target can only be used in functions\",\n  UnexpectedNumericSeparator:\n    \"A numeric separator is only allowed between two digits\",\n  UnexpectedPrivateField:\n    \"Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\\n or a property of member expression (i.e. this.#p).\",\n  UnexpectedReservedWord: \"Unexpected reserved word '%0'\",\n  UnexpectedSuper: \"super is only allowed in object methods and classes\",\n  UnexpectedToken: \"Unexpected token '%0'\",\n  UnexpectedTokenUnaryExponentiation:\n    \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport:\n    \"A decorated export must export a class declaration\",\n  UnsupportedDefaultExport:\n    \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport: \"import can only be used in import() or import.meta\",\n  UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1\",\n  UnsupportedParameterDecorator:\n    \"Decorators cannot be used to decorate parameters\",\n  UnsupportedPropertyDecorator:\n    \"Decorators cannot be used to decorate object literal properties\",\n  UnsupportedSuper:\n    \"super can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop])\",\n  UnterminatedComment: \"Unterminated comment\",\n  UnterminatedRegExp: \"Unterminated regular expression\",\n  UnterminatedString: \"Unterminated string constant\",\n  UnterminatedTemplate: \"Unterminated template\",\n  VarRedeclaration: \"Identifier '%0' has already been declared\",\n  YieldBindingIdentifier:\n    \"Can not use 'yield' as identifier inside a generator\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters\",\n  ZeroDigitNumericSeparator:\n    \"Numeric separator can not be used after leading 0\",\n});\n","// @flow\n/* eslint sort-keys: \"error\" */\nimport { getLineInfo, type Position } from \"../util/location\";\nimport CommentsParser from \"./comments\";\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\ntype ErrorContext = {\n  pos: number,\n  loc: Position,\n  missingPlugin?: Array<string>,\n  code?: string,\n};\n\nexport { ErrorMessages as Errors } from \"./error-message.js\";\n\nexport default class ParserError extends CommentsParser {\n  // Forward-declaration: defined in tokenizer/index.js\n  /*::\n  +isLookahead: boolean;\n  */\n\n  getLocationForPosition(pos: number): Position {\n    let loc;\n    if (pos === this.state.start) loc = this.state.startLoc;\n    else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;\n    else if (pos === this.state.end) loc = this.state.endLoc;\n    else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;\n    else loc = getLineInfo(this.input, pos);\n\n    return loc;\n  }\n\n  raise(pos: number, errorTemplate: string, ...params: any): Error | empty {\n    return this.raiseWithData(pos, undefined, errorTemplate, ...params);\n  }\n\n  raiseWithData(\n    pos: number,\n    data?: {\n      missingPlugin?: Array<string>,\n      code?: string,\n    },\n    errorTemplate: string,\n    ...params: any\n  ): Error | empty {\n    const loc = this.getLocationForPosition(pos);\n    const message =\n      errorTemplate.replace(/%(\\d+)/g, (_, i: number) => params[i]) +\n      ` (${loc.line}:${loc.column})`;\n    return this._raise(Object.assign(({ loc, pos }: Object), data), message);\n  }\n\n  _raise(errorContext: ErrorContext, message: string): Error | empty {\n    // $FlowIgnore\n    const err: SyntaxError & ErrorContext = new SyntaxError(message);\n    Object.assign(err, errorContext);\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n}\n","// @flow\n\nimport { types as tt, TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport * as N from \"../types\";\nimport type { Position } from \"../util/location\";\nimport { type BindingTypes, BIND_NONE } from \"../util/scopeflags\";\nimport { Errors } from \"../parser/error\";\n\nfunction isSimpleProperty(node: N.Node): boolean {\n  return (\n    node != null &&\n    node.type === \"Property\" &&\n    node.kind === \"init\" &&\n    node.method === false\n  );\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    estreeParseRegExpLiteral({ pattern, flags }: N.RegExpLiteral): N.Node {\n      let regex = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (e) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    estreeParseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      // $FlowIgnore\n      const bigInt = typeof BigInt !== \"undefined\" ? BigInt(value) : null;\n      const node = this.estreeParseLiteral(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseDecimalLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/experimental/decimal.md\n      // todo: use BigDecimal when node supports it.\n      const decimal = null;\n      const node = this.estreeParseLiteral(decimal);\n      node.decimal = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral(value: any): N.Node {\n      return this.parseLiteral(value, \"Literal\");\n    }\n\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const directiveLiteral = directive.value;\n\n      const stmt = this.startNodeAt(directive.start, directive.loc.start);\n      const expression = this.startNodeAt(\n        directiveLiteral.start,\n        directiveLiteral.loc.start,\n      );\n\n      expression.value = directiveLiteral.value;\n      expression.raw = directiveLiteral.extra.raw;\n\n      stmt.expression = this.finishNodeAt(\n        expression,\n        \"Literal\",\n        directiveLiteral.end,\n        directiveLiteral.loc.end,\n      );\n      stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n\n      return this.finishNodeAt(\n        stmt,\n        \"ExpressionStatement\",\n        directive.end,\n        directive.loc.end,\n      );\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(\n      node: N.BodilessFunctionOrMethodBase,\n      isAsync: ?boolean,\n    ): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (isSimpleProperty(node)) {\n        this.checkDeclaration(((node: any): N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n      return ((method: any): N.EstreeProperty | N.EstreeMethodDefinition).value\n        .params;\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      bindingType: BindingTypes = BIND_NONE,\n      checkClashes: ?{ [key: string]: boolean },\n      contextDescription: string,\n      disallowLetBinding?: boolean,\n    ): void {\n      switch (expr.type) {\n        case \"ObjectPattern\":\n          expr.properties.forEach(prop => {\n            this.checkLVal(\n              prop.type === \"Property\" ? prop.value : prop,\n              bindingType,\n              checkClashes,\n              \"object destructuring pattern\",\n              disallowLetBinding,\n            );\n          });\n          break;\n        default:\n          super.checkLVal(\n            expr,\n            bindingType,\n            checkClashes,\n            contextDescription,\n            disallowLetBinding,\n          );\n      }\n    }\n\n    checkProto(\n      prop: N.ObjectMember | N.SpreadElement,\n      isRecord: boolean,\n      protoRef: { used: boolean },\n      refExpressionErrors: ?ExpressionErrors,\n    ): void {\n      // $FlowIgnore: check prop.method and fallback to super method\n      if (prop.method) {\n        return;\n      }\n      super.checkProto(prop, isRecord, protoRef, refExpressionErrors);\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    stmtToDirective(stmt: N.Statement): N.Directive {\n      const directive = super.stmtToDirective(stmt);\n      const value = stmt.expression.value;\n\n      // Reset value to the actual value as in estree mode we want\n      // the stmt to have the real value and not the raw value\n      directive.value.value = value;\n\n      return directive;\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      allowDirectives: ?boolean,\n      topLevel: boolean,\n      end: TokenType,\n    ): void {\n      super.parseBlockBody(node, allowDirectives, topLevel, end);\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      node.body = directiveStatements.concat(node.body);\n      // $FlowIgnore - directives isn't optional in the type definition\n      delete node.directives;\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      );\n      if (method.typeParameters) {\n        // $FlowIgnore\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(method);\n    }\n\n    parseExprAtom(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n      switch (this.state.type) {\n        case tt.num:\n        case tt.string:\n          return this.estreeParseLiteral(this.state.value);\n\n        case tt.regexp:\n          return this.estreeParseRegExpLiteral(this.state.value);\n\n        case tt.bigint:\n          return this.estreeParseBigIntLiteral(this.state.value);\n\n        case tt.decimal:\n          return this.estreeParseDecimalLiteral(this.state.value);\n\n        case tt._null:\n          return this.estreeParseLiteral(null);\n\n        case tt._true:\n          return this.estreeParseLiteral(true);\n\n        case tt._false:\n          return this.estreeParseLiteral(false);\n\n        default:\n          return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    parseLiteral<T: N.Literal>(\n      value: any,\n      type: /*T[\"kind\"]*/ string,\n      startPos?: number,\n      startLoc?: Position,\n    ): T {\n      const node = super.parseLiteral(value, type, startPos, startLoc);\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    parseMethod<T: N.MethodLike>(\n      node: T,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: string,\n      inClassScope: boolean = false,\n    ): T {\n      let funcNode = this.startNode();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // $FlowIgnore\n      node.value = funcNode;\n\n      type = type === \"ClassMethod\" ? \"MethodDefinition\" : type;\n      return this.finishNode(node, type);\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n    ): ?N.ObjectMethod {\n      const node: N.EstreeProperty = (super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ): any);\n\n      if (node) {\n        node.type = \"Property\";\n        if (((node: any): N.ClassMethod).kind === \"method\") node.kind = \"init\";\n        node.shorthand = false;\n      }\n\n      return (node: any);\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startPos: ?number,\n      startLoc: ?Position,\n      isPattern: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): ?N.ObjectProperty {\n      const node: N.EstreeProperty = (super.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ): any);\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return (node: any);\n    }\n\n    toAssignable(node: N.Node): N.Node {\n      if (isSimpleProperty(node)) {\n        this.toAssignable(node.value);\n\n        return node;\n      }\n\n      return super.toAssignable(node);\n    }\n\n    toAssignableObjectExpressionProp(prop: N.Node, isLast: boolean) {\n      if (prop.kind === \"get\" || prop.kind === \"set\") {\n        throw this.raise(prop.key.start, Errors.PatternHasAccessor);\n      } else if (prop.method) {\n        throw this.raise(prop.key.start, Errors.PatternHasMethod);\n      } else {\n        super.toAssignableObjectExpressionProp(prop, isLast);\n      }\n    }\n\n    finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n      node: T,\n      optional: boolean,\n    ): N.Expression {\n      super.finishCallExpression(node, optional);\n\n      if (node.callee.type === \"Import\") {\n        ((node: N.Node): N.EstreeImportExpression).type = \"ImportExpression\";\n        ((node: N.Node): N.EstreeImportExpression).source = node.arguments[0];\n        // $FlowIgnore - arguments isn't optional in the type definition\n        delete node.arguments;\n        // $FlowIgnore - callee isn't optional in the type definition\n        delete node.callee;\n      }\n\n      return node;\n    }\n\n    toReferencedArguments(\n      node:\n        | N.CallExpression\n        | N.OptionalCallExpression\n        | N.EstreeImportExpression,\n      /* isParenthesizedExpr?: boolean, */\n    ) {\n      // ImportExpressions do not have an arguments array.\n      if (node.type === \"ImportExpression\") {\n        return;\n      }\n\n      super.toReferencedArguments(node);\n    }\n\n    parseExport(node: N.Node) {\n      super.parseExport(node);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            node.type = \"ExportAllDeclaration\";\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n          break;\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ) {\n      const node = super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        state,\n      );\n\n      if (state.optionalChainMember) {\n        // https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n        if (\n          node.type === \"OptionalMemberExpression\" ||\n          node.type === \"OptionalCallExpression\"\n        ) {\n          node.type = node.type.substring(8); // strip Optional prefix\n        }\n        if (state.stop) {\n          const chain = this.startNodeAtNode(node);\n          chain.expression = node;\n          return this.finishNode(chain, \"ChainExpression\");\n        }\n      } else if (\n        node.type === \"MemberExpression\" ||\n        node.type === \"CallExpression\"\n      ) {\n        node.optional = false;\n      }\n\n      return node;\n    }\n  };\n","// @flow\n\n// The algorithm used to determine whether a regexp can appear at a\n// given point in the program is loosely based on sweet.js' approach.\n// See https://github.com/mozilla/sweet.js/wiki/design\n\nimport { types as tt } from \"./types\";\n\nexport class TokContext {\n  constructor(\n    token: string,\n    isExpr?: boolean,\n    preserveSpace?: boolean,\n    override?: ?Function, // Takes a Tokenizer as a this-parameter, and returns void.\n  ) {\n    this.token = token;\n    this.isExpr = !!isExpr;\n    this.preserveSpace = !!preserveSpace;\n    this.override = override;\n  }\n\n  token: string;\n  isExpr: boolean;\n  preserveSpace: boolean;\n  override: ?Function;\n}\n\nexport const types: {\n  [key: string]: TokContext,\n} = {\n  braceStatement: new TokContext(\"{\", false),\n  braceExpression: new TokContext(\"{\", true),\n  recordExpression: new TokContext(\"#{\", true),\n  templateQuasi: new TokContext(\"${\", false),\n  parenStatement: new TokContext(\"(\", false),\n  parenExpression: new TokContext(\"(\", true),\n  template: new TokContext(\"`\", true, true, p => p.readTmplToken()),\n  functionExpression: new TokContext(\"function\", true),\n  functionStatement: new TokContext(\"function\", false),\n};\n\n// Token-specific context update code\n// Note that we should avoid accessing `this.prodParam` in context update,\n// because it is executed immediately when last token is consumed, which may be\n// before `this.prodParam` is updated. e.g.\n// ```\n// function *g() { () => yield / 2 }\n// ```\n// When `=>` is eaten, the context update of `yield` is executed, however,\n// `this.prodParam` still has `[Yield]` production because it is not yet updated\n\ntt.parenR.updateContext = tt.braceR.updateContext = function () {\n  if (this.state.context.length === 1) {\n    this.state.exprAllowed = true;\n    return;\n  }\n\n  let out = this.state.context.pop();\n  if (out === types.braceStatement && this.curContext().token === \"function\") {\n    out = this.state.context.pop();\n  }\n\n  this.state.exprAllowed = !out.isExpr;\n};\n\ntt.name.updateContext = function (prevType) {\n  let allowed = false;\n  if (prevType !== tt.dot) {\n    if (\n      this.state.value === \"of\" &&\n      !this.state.exprAllowed &&\n      prevType !== tt._function &&\n      prevType !== tt._class\n    ) {\n      allowed = true;\n    }\n  }\n  this.state.exprAllowed = allowed;\n\n  if (this.state.isIterator) {\n    this.state.isIterator = false;\n  }\n};\n\ntt.braceL.updateContext = function (prevType) {\n  this.state.context.push(\n    this.braceIsBlock(prevType) ? types.braceStatement : types.braceExpression,\n  );\n  this.state.exprAllowed = true;\n};\n\ntt.dollarBraceL.updateContext = function () {\n  this.state.context.push(types.templateQuasi);\n  this.state.exprAllowed = true;\n};\n\ntt.parenL.updateContext = function (prevType) {\n  const statementParens =\n    prevType === tt._if ||\n    prevType === tt._for ||\n    prevType === tt._with ||\n    prevType === tt._while;\n  this.state.context.push(\n    statementParens ? types.parenStatement : types.parenExpression,\n  );\n  this.state.exprAllowed = true;\n};\n\ntt.incDec.updateContext = function () {\n  // tokExprAllowed stays unchanged\n};\n\ntt._function.updateContext = tt._class.updateContext = function (prevType) {\n  if (\n    prevType.beforeExpr &&\n    prevType !== tt.semi &&\n    prevType !== tt._else &&\n    !(prevType === tt._return && this.hasPrecedingLineBreak()) &&\n    !(\n      (prevType === tt.colon || prevType === tt.braceL) &&\n      this.curContext() === types.b_stat\n    )\n  ) {\n    this.state.context.push(types.functionExpression);\n  } else {\n    this.state.context.push(types.functionStatement);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntt.backQuote.updateContext = function () {\n  if (this.curContext() === types.template) {\n    this.state.context.pop();\n  } else {\n    this.state.context.push(types.template);\n  }\n  this.state.exprAllowed = false;\n};\n\n// we don't need to update context for tt.braceBarL because we do not pop context for tt.braceBarR\ntt.braceHashL.updateContext = function () {\n  this.state.context.push(types.recordExpression);\n  this.state.exprAllowed = true; /* tt.braceHashL.beforeExpr */\n};\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08c7\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\u9ffc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7bf\\ua7c2-\\ua7ca\\ua7f5-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf\\u1ac0\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,107,20,28,22,13,52,76,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,230,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,35,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8952,286,50,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,2357,44,11,6,17,0,370,43,1301,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42717,35,4148,12,221,3,5761,15,7472,3104,541,1507,4938];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,176,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,135,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,419,13,1495,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: $ReadOnlyArray<number>): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (const char of Array.from(name)) {\n    const cp = char.codePointAt(0);\n    if (isFirst) {\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n      isFirst = false;\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n","// @flow\n\nconst reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n","/* eslint max-len: 0 */\n\n// @flow\n\nimport * as charCodes from \"charcodes\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(current: number, next: number): boolean {\n  return current === charCodes.atSign && next === charCodes.atSign;\n}\n","// @flow\n\n/*:: declare var invariant; */\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport type Parser from \"../parser\";\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport * as N from \"../types\";\nimport type { Options } from \"../options\";\nimport type { Pos, Position } from \"../util/location\";\nimport type State from \"../tokenizer/state\";\nimport { types as tc } from \"../tokenizer/context\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart, isKeyword } from \"../util/identifier\";\nimport {\n  type BindingTypes,\n  BIND_NONE,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  SCOPE_ARROW,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n} from \"../util/scopeflags\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport { Errors } from \"../parser/error\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = Object.freeze({\n  AmbiguousConditionalArrow:\n    \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind:\n    \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module\",\n  AssignReservedType: \"Cannot overwrite reserved type %0\",\n  DeclareClassElement:\n    \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer:\n    \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports: \"Duplicate `declare module.exports` statement\",\n  EnumBooleanMemberNotInitialized:\n    \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n  EnumDuplicateMemberName:\n    \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n  EnumInconsistentMemberValues:\n    \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n  EnumInvalidExplicitType:\n    \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidExplicitTypeUnknownSupplied:\n    \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidMemberInitializerPrimaryType:\n    \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n  EnumInvalidMemberInitializerSymbolType:\n    \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n  EnumInvalidMemberInitializerUnknownType:\n    \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n  EnumInvalidMemberName:\n    \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n  EnumNumberMemberNotInitialized:\n    \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n  EnumStringMemberInconsistentlyInitailized:\n    \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n  ImportTypeShorthandOnlyInPureImport:\n    \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements\",\n  InexactInsideExact:\n    \"Explicit inexact syntax cannot appear inside an explicit exact object type\",\n  InexactInsideNonObject:\n    \"Explicit inexact syntax cannot appear in class or interface definitions\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance\",\n  InvalidNonTypeImportInDeclareModule:\n    \"Imports within a `declare module` body must always be `import type` or `import typeof`\",\n  MissingTypeParamDefault:\n    \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule:\n    \"`declare module` cannot be used inside another `declare module`\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment\",\n  OptionalBindingPattern:\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  SpreadVariance: \"Spread properties cannot have variance\",\n  TypeBeforeInitializer:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\",\n  TypeCastInPattern:\n    \"The type cast expression is expected to be wrapped with parenthesis\",\n  UnexpectedExplicitInexactInObject:\n    \"Explicit inexact syntax must appear at the end of an inexact object\",\n  UnexpectedReservedType: \"Unexpected reserved type %0\",\n  UnexpectedReservedUnderscore:\n    \"`_` is only allowed as a type argument to call or new\",\n  UnexpectedSpaceBetweenModuloChecks:\n    \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType:\n    \"Spread operator cannot appear in class or interface definitions\",\n  UnexpectedSubtractionOperand:\n    'Unexpected token, expected \"number\" or \"bigint\"',\n  UnexpectedTokenAfterTypeParameter:\n    \"Expected an arrow function after this type parameter declaration\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction:\n    \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`\",\n  UnsupportedDeclareExportKind:\n    \"`declare export %0` is not supported. Use `%1` instead\",\n  UnsupportedStatementInDeclareModule:\n    \"Only declares and type imports are allowed inside declare module\",\n  UnterminatedFlowComment: \"Unterminated flow-comment\",\n});\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(node: N.Node): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(state: State): boolean {\n  return (\n    (state.type === tt.name || !!state.type.keyword) && state.value !== \"from\"\n  );\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (T, number, T[]) => ?boolean,\n): [T[], T[]] {\n  const list1 = [];\n  const list2 = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\ntype EnumContext = {|\n  enumName: string,\n  explicitType: EnumExplicitType,\n  memberName: string,\n|};\ntype EnumMemberInit =\n  | {| type: \"number\", pos: number, value: N.Node |}\n  | {| type: \"string\", pos: number, value: N.Node |}\n  | {| type: \"boolean\", pos: number, value: N.Node |}\n  | {| type: \"invalid\", pos: number |}\n  | {| type: \"none\", pos: number |};\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\";\n\n    constructor(options: ?Options, input: string) {\n      super(options, input);\n      this.flowPragma = undefined;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums(): boolean {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      return super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      return super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowType {\n      const node = this.startNode();\n      const moduloLoc = this.state.startLoc;\n      const moduloPos = this.state.start;\n      this.expect(tt.modulo);\n      const checksLoc = this.state.startLoc;\n      this.expectContextual(\"checks\");\n      // Force '%' and 'checks' to be adjacent\n      if (\n        moduloLoc.line !== checksLoc.line ||\n        moduloLoc.column !== checksLoc.column - 1\n      ) {\n        this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = this.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [?N.FlowType, ?N.FlowPredicate] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(node: N.FlowDeclareClass): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: N.FlowDeclareFunction,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode();\n\n      if (this.isRelational(\"<\")) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      this.expect(tt.parenR);\n\n      [\n        // $FlowFixMe (destructuring not supported yet)\n        typeNode.returnType,\n        // $FlowFixMe (destructuring not supported yet)\n        node.predicate,\n      ] = this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: N.FlowDeclare,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(\"module\")) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(\"type\")) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(\"opaque\")) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(\"interface\")) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        throw this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: N.FlowDeclareVariable,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(node: N.FlowDeclareModule): N.FlowDeclareModule {\n      this.scope.enter(SCOPE_OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode());\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(\"type\") && !this.match(tt._typeof)) {\n            this.raise(\n              this.state.lastTokStart,\n              FlowErrors.InvalidNonTypeImportInDeclareModule,\n            );\n          }\n          this.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            \"declare\",\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(\n              bodyElement.start,\n              FlowErrors.AmbiguousDeclareModuleKind,\n            );\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(\n              bodyElement.start,\n              FlowErrors.DuplicateDeclareModuleExports,\n            );\n          }\n          if (kind === \"ES\") {\n            this.raise(\n              bodyElement.start,\n              FlowErrors.AmbiguousDeclareModuleKind,\n            );\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: N.FlowDeclareExportDeclaration,\n      insideModule: ?boolean,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(\"type\") || this.isContextual(\"interface\")) &&\n            !insideModule)\n        ) {\n          const label = this.state.value;\n          const suggestion = exportSuggestions[label];\n\n          throw this.raise(\n            this.state.start,\n            FlowErrors.UnsupportedDeclareExportKind,\n            label,\n            suggestion,\n          );\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(\"opaque\") // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(\"interface\") || // declare export interface ...\n          this.isContextual(\"type\") || // declare export type ...\n          this.isContextual(\"opaque\") // declare export opaque type ...\n        ) {\n          node = this.parseExport(node);\n          if (node.type === \"ExportNamedDeclaration\") {\n            // flow does not support the ExportNamedDeclaration\n            // $FlowIgnore\n            node.type = \"ExportDeclaration\";\n            // $FlowFixMe\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          // $FlowIgnore\n          node.type = \"Declare\" + node.type;\n\n          return node;\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: N.FlowDeclareModuleExports,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(\"exports\");\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: N.FlowDeclareTypeAlias,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      this.flowParseTypeAlias(node);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareTypeAlias\";\n      return node;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: N.FlowDeclareOpaqueType,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      this.flowParseOpaqueType(node, true);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareOpaqueType\";\n      return node;\n    }\n\n    flowParseDeclareInterface(\n      node: N.FlowDeclareInterface,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(\n      node: N.FlowDeclare,\n      isClass?: boolean = false,\n    ): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BIND_FUNCTION : BIND_LEXICAL,\n        node.id.start,\n      );\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n      node.implements = [];\n      node.mixins = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (this.isContextual(\"mixins\")) {\n        this.next();\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      if (this.isContextual(\"implements\")) {\n        this.next();\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: N.FlowInterface): N.FlowInterface {\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);\n      }\n    }\n\n    checkReservedType(word: string, startLoc: number, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        startLoc,\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        word,\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(this.state.value, this.state.start, declaration);\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: N.FlowTypeAlias): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: N.FlowOpaqueType,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(\"type\");\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault?: boolean = false): N.TypeParameter {\n      const nodeStart = this.state.start;\n\n      const node = this.startNode();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      node.variance = variance;\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.isRelational(\"<\") || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.isRelational(\">\")) {\n          this.expect(tt.comma);\n        }\n      } while (!this.isRelational(\">\"));\n      this.expectRelational(\">\");\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expectRelational(\"<\");\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n      while (!this.isRelational(\">\")) {\n        node.params.push(this.flowParseType());\n        if (!this.isRelational(\">\")) {\n          this.expect(tt.comma);\n        }\n      }\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expectRelational(\">\");\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expectRelational(\"<\");\n      while (!this.isRelational(\">\")) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.isRelational(\">\")) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expectRelational(\">\");\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode();\n      this.expectContextual(\"interface\");\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: N.FlowObjectTypeIndexer,\n      isStatic: boolean,\n      variance: ?N.FlowVariance,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: N.FlowObjectTypeInternalSlot,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.isRelational(\"<\") || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.start, node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: N.FlowFunctionTypeAnnotation,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam());\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam();\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: N.FlowObjectTypeCallProperty,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean,\n      allowExact: boolean,\n      allowSpread: boolean,\n      allowProto: boolean,\n      allowInexact: boolean,\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStart: ?number = null;\n        let inexactStart: ?number = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(\"proto\")) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStart = this.state.start;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(\"static\")) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(\"get\") || this.isContextual(\"set\")) {\n            const lookahead = this.lookahead();\n            if (\n              lookahead.type === tt.name ||\n              lookahead.type === tt.string ||\n              lookahead.type === tt.num\n            ) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStart,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStart = this.state.lastTokStart;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStart &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(\n            inexactStart,\n            FlowErrors.UnexpectedExplicitInexactInObject,\n          );\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in object types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n      isStatic: boolean,\n      protoStart: ?number,\n      variance: ?N.FlowVariance,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): (N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty) | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(\n              this.state.lastTokStart,\n              FlowErrors.InexactInsideNonObject,\n            );\n          } else if (!allowInexact) {\n            this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);\n          }\n          if (variance) {\n            this.raise(variance.start, FlowErrors.InexactVariance);\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);\n        }\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n        if (variance) {\n          this.raise(variance.start, FlowErrors.SpreadVariance);\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStart != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.isRelational(\"<\") || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.start, node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const start = property.start;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n      if (length !== paramCount) {\n        if (property.kind === \"get\") {\n          this.raise(start, Errors.BadGetterArity);\n        } else {\n          this.raise(start, Errors.BadSetterArity);\n        }\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(start, Errors.BadSetterRestParameter);\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startPos?: number,\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier {\n      startPos = startPos || this.state.start;\n      startLoc = startLoc || this.state.startLoc;\n      let node = id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt(startPos, startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startPos: number,\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt(startPos, startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode();\n      const lh = this.lookahead();\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        name = this.parseIdentifier();\n        if (this.eat(tt.question)) {\n          optional = true;\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt(type.start, type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(\n      params: N.FlowFunctionTypeParam[] = [],\n    ): { params: N.FlowFunctionTypeParam[], rest: ?N.FlowFunctionTypeParam } {\n      let rest: ?N.FlowFunctionTypeParam = null;\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam());\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam();\n      }\n      return { params, rest };\n    }\n\n    flowIdentToTypeAnnotation(\n      startPos: number,\n      startLoc: Position,\n      node: N.FlowTypeAnnotation,\n      id: N.Identifier,\n    ): N.FlowTypeAnnotation {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startPos, startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.name:\n          if (this.isContextual(\"interface\")) {\n            return this.flowParseInterfaceType();\n          }\n\n          return this.flowIdentToTypeAnnotation(\n            startPos,\n            startLoc,\n            node,\n            this.parseIdentifier(),\n          );\n\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.relational:\n          if (this.state.value === \"<\") {\n            node.typeParameters = this.flowParseTypeParameterDeclaration();\n            this.expect(tt.parenL);\n            tmp = this.flowParseFunctionTypeParams();\n            node.params = tmp.params;\n            node.rest = tmp.rest;\n            this.expect(tt.parenR);\n\n            this.expect(tt.arrow);\n\n            node.returnType = this.flowParseType();\n\n            return this.finishNode(node, \"FunctionTypeAnnotation\");\n          }\n          break;\n\n        case tt.parenL:\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (this.match(tt.name)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.string:\n          return this.parseLiteral(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteral(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node.start,\n                node.loc.start,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteral(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node.start,\n                node.loc.start,\n              );\n            }\n\n            throw this.raise(\n              this.state.start,\n              FlowErrors.UnexpectedSubtractionOperand,\n            );\n          }\n\n          throw this.unexpected();\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        default:\n          if (this.state.type.keyword === \"typeof\") {\n            return this.flowParseTypeofType();\n          } else if (this.state.type.keyword) {\n            const label = this.state.type.label;\n            this.next();\n            return super.createIdentifier(node, label);\n          }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start,\n        startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      while (this.match(tt.bracketL) && !this.canInsertSemicolon()) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.elementType = type;\n        this.expect(tt.bracketL);\n        this.expect(tt.bracketR);\n        type = this.finishNode(node, \"ArrayTypeAnnotation\");\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowTypeAnnotation {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt(param.start, param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      // Ensure that a brace after a function generic type annotation is a\n      // statement, except in arrow functions (noAnonFunctionType)\n      this.state.exprAllowed =\n        this.state.exprAllowed || this.state.noAnonFunctionType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowTypeAnnotation {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startPos, startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.Node): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(\n        node.expression,\n        node.typeAnnotation.end,\n        node.typeAnnotation.loc.end,\n      );\n\n      return node.expression;\n    }\n\n    flowParseVariance(): ?N.FlowVariance {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        return this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n      }\n\n      return super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode();\n\n        [\n          // $FlowFixMe (destructuring not supported yet)\n          typeNode.typeAnnotation,\n          // $FlowFixMe (destructuring not supported yet)\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (\n        this.state.strict &&\n        this.match(tt.name) &&\n        this.state.value === \"interface\"\n      ) {\n        const lookahead = this.lookahead();\n        if (lookahead.type === tt.name || isKeyword(lookahead.value)) {\n          const node = this.startNode();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      const stmt = super.parseStatement(context, topLevel);\n      // We will parse a flow pragma in any comment before the first statement.\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n      return stmt;\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            this.match(tt.name) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            return this.flowParseDeclare(node);\n          }\n        } else if (this.match(tt.name)) {\n          if (expr.name === \"interface\") {\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      return (\n        this.isContextual(\"type\") ||\n        this.isContextual(\"interface\") ||\n        this.isContextual(\"opaque\") ||\n        (this.shouldParseEnums() && this.isContextual(\"enum\")) ||\n        super.shouldParseExportDeclaration()\n      );\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (\n        this.match(tt.name) &&\n        (this.state.value === \"type\" ||\n          this.state.value === \"interface\" ||\n          this.state.value === \"opaque\" ||\n          (this.shouldParseEnums() && this.state.value === \"enum\"))\n      ) {\n        return false;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refNeedsArrowPos?: ?Pos,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      // only use the expensive \"tryParse\" method if there is a question mark\n      // and if we come from inside parens\n      if (refNeedsArrowPos) {\n        const result = this.tryParse(() =>\n          super.parseConditional(expr, startPos, startLoc),\n        );\n\n        if (!result.node) {\n          // $FlowIgnore\n          refNeedsArrowPos.start = result.error.pos || this.state.start;\n          return expr;\n        }\n\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startPos, startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt.concat(valid[0].start);\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(undefined, undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression,\n      failed: boolean,\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            this.finishArrowValidation(node);\n          } else {\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        ((node.params: any): N.Expression[]),\n        node.extra?.trailingComma,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(node: N.Node, parse: () => T): T {\n      let result: T;\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt(startPos, startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      const decl = super.parseExport(node);\n      if (\n        decl.type === \"ExportNamedDeclaration\" ||\n        decl.type === \"ExportAllDeclaration\"\n      ) {\n        decl.exportKind = decl.exportKind || \"value\";\n      }\n      return decl;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      if (this.isContextual(\"type\")) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers();\n          this.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(\"opaque\")) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(\"interface\")) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node: N.Node): boolean {\n      if (super.eatExportStar(...arguments)) return true;\n\n      if (this.isContextual(\"type\") && this.lookahead().type === tt.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n      const pos = this.state.start;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(pos);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(node: N.Class, isStatement: boolean, optionalId: ?boolean) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const pos = this.state.start;\n      if (this.isContextual(\"declare\")) {\n        if (this.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\"\n        ) {\n          this.raise(pos, FlowErrors.DeclareClassElement);\n        } else if (member.value) {\n          this.raise(\n            member.value.start,\n            FlowErrors.DeclareClassFieldInitializer,\n          );\n        }\n      }\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        return this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        return this.finishOp(tt.relational, 1);\n      } else if (this.state.inType && code === charCodes.questionMark) {\n        // allow double nullable types in Flow: ??string\n        return this.finishOp(tt.question, 1);\n      } else if (isIteratorStart(code, next)) {\n        this.state.isIterator = true;\n        return super.readWord();\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"Identifier\":\n        case \"ObjectPattern\":\n        case \"ArrayPattern\":\n        case \"AssignmentPattern\":\n          return true;\n\n        case \"ObjectExpression\": {\n          const last = node.properties.length - 1;\n          return node.properties.every((prop, i) => {\n            return (\n              prop.type !== \"ObjectMethod\" &&\n              (i === last || prop.type === \"SpreadElement\") &&\n              this.isAssignable(prop)\n            );\n          });\n        }\n\n        case \"ObjectProperty\":\n          return this.isAssignable(node.value);\n\n        case \"SpreadElement\":\n          return this.isAssignable(node.argument);\n\n        case \"ArrayExpression\":\n          return node.elements.every(element => this.isAssignable(element));\n\n        case \"AssignmentExpression\":\n          return node.operator === \"=\";\n\n        case \"ParenthesizedExpression\":\n        case \"TypeCastExpression\":\n          return this.isAssignable(node.expression);\n\n        case \"MemberExpression\":\n        case \"OptionalMemberExpression\":\n          return !isBinding;\n\n        default:\n          return false;\n      }\n    }\n\n    toAssignable(node: N.Node): N.Node {\n      if (node.type === \"TypeCastExpression\") {\n        return super.toAssignable(this.typeCastToParameter(node));\n      } else {\n        return super.toAssignable(node);\n      }\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaPos?: ?number,\n    ): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      return super.toAssignableList(exprList, trailingCommaPos);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isParenthesizedExpr?: boolean,\n    ): $ReadOnlyArray<?N.Expression> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      // This could be an array pattern:\n      //   ([a: string, b: string]) => {}\n      // In this case, we don't have to call toReferencedList. We will\n      // call it, if needed, when we are sure that it is a parenthesized\n      // expression by calling toReferencedListDeep.\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      bindingType: BindingTypes = BIND_NONE,\n      checkClashes: ?{ [key: string]: boolean },\n      contextDescription: string,\n    ): void {\n      if (expr.type !== \"TypeCastExpression\") {\n        return super.checkLVal(\n          expr,\n          bindingType,\n          checkClashes,\n          contextDescription,\n        );\n      }\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.isRelational(\"<\") || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.isRelational(\"<\")) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.isRelational(\"<\")) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.isRelational(\"<\")) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(\"implements\")) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.isRelational(\"<\")) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    parsePropertyName(\n      node: N.ObjectOrClassMember | N.ClassMember | N.TsNamedTypeElementBase,\n      isPrivateNameAllowed: boolean,\n    ): N.Identifier {\n      const variance = this.flowParseVariance();\n      const key = super.parsePropertyName(node, isPrivateNameAllowed);\n      // $FlowIgnore (\"variance\" not defined on TsNamedTypeElementBase)\n      node.variance = variance;\n      return key;\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue(\n      prop: N.ObjectMember,\n      startPos: ?number,\n      startLoc: ?Position,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): void {\n      if ((prop: $FlowFixMe).variance) {\n        this.unexpected((prop: $FlowFixMe).variance.start);\n      }\n      delete (prop: $FlowFixMe).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.isRelational(\"<\") && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      super.parseObjPropValue(\n        prop,\n        startPos,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        (prop.value || prop).typeParameters = typeParameters;\n      }\n    }\n\n    parseAssignableListItemTypes(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(param.start, FlowErrors.OptionalBindingPattern);\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startPos?: ?number,\n      startLoc?: ?Position,\n      left?: ?N.Pattern,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(node.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);\n      }\n\n      return node;\n    }\n\n    shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n      if (!hasTypeImportKind(node)) {\n        return super.shouldParseDefaultImport(node);\n      }\n\n      return isMaybeDefaultImport(this.state);\n    }\n\n    parseImportSpecifierLocal(\n      node: N.ImportDeclaration,\n      specifier: N.Node,\n      type: string,\n      contextDescription: string,\n    ): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      this.checkLVal(\n        specifier.local,\n        BIND_LEXICAL,\n        undefined,\n        contextDescription,\n      );\n      node.specifiers.push(this.finishNode(specifier, type));\n    }\n\n    // parse typeof and type imports\n    maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n      node.importKind = \"value\";\n\n      let kind = null;\n      if (this.match(tt._typeof)) {\n        kind = \"typeof\";\n      } else if (this.isContextual(\"type\")) {\n        kind = \"type\";\n      }\n      if (kind) {\n        const lh = this.lookahead();\n\n        // import type * is not allowed\n        if (kind === \"type\" && lh.type === tt.star) {\n          this.unexpected(lh.start);\n        }\n\n        if (\n          isMaybeDefaultImport(lh) ||\n          lh.type === tt.braceL ||\n          lh.type === tt.star\n        ) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      return super.maybeParseDefaultImportSpecifier(node);\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(node: N.ImportDeclaration): void {\n      const specifier = this.startNode();\n      const firstIdentLoc = this.state.start;\n      const firstIdent = this.parseModuleExportName();\n\n      let specifierTypeKind = null;\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n      if (this.isContextual(\"as\") && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !this.match(tt.name) &&\n          !this.state.type.keyword\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = as_ident.__clone();\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else if (\n        specifierTypeKind !== null &&\n        (this.match(tt.name) || this.state.type.keyword)\n      ) {\n        // `import {type foo`\n        specifier.imported = this.parseIdentifier(true);\n        specifier.importKind = specifierTypeKind;\n        if (this.eatContextual(\"as\")) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = specifier.imported.__clone();\n        }\n      } else {\n        if (firstIdent.type === \"StringLiteral\") {\n          throw this.raise(\n            specifier.start,\n            Errors.ImportBindingIsString,\n            firstIdent.value,\n          );\n        }\n        isBinding = true;\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = specifier.imported.__clone();\n      }\n\n      const nodeIsTypeImport = hasTypeImportKind(node);\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (nodeIsTypeImport && specifierIsTypeImport) {\n        this.raise(\n          firstIdentLoc,\n          FlowErrors.ImportTypeShorthandOnlyInPureImport,\n        );\n      }\n\n      if (nodeIsTypeImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.start,\n          true,\n          true,\n        );\n      }\n\n      this.checkLVal(\n        specifier.local,\n        BIND_LEXICAL,\n        undefined,\n        \"import specifier\",\n      );\n      node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      // $FlowFixMe\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      refExpressionErrors?: ?ExpressionErrors,\n      afterLeftParse?: Function,\n      refNeedsArrowPos?: ?Pos,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.isRelational(\"<\"))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () =>\n            super.parseMaybeAssign(\n              refExpressionErrors,\n              afterLeftParse,\n              refNeedsArrowPos,\n            ),\n          state,\n        );\n        /*:: invariant(!jsx.aborted) */\n\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        if (context[context.length - 1] === tc.j_oTag) {\n          context.length -= 2;\n        } else if (context[context.length - 1] === tc.j_expr) {\n          context.length -= 1;\n        }\n      }\n\n      if (jsx?.error || this.isRelational(\"<\")) {\n        state = state || this.state.clone();\n\n        let typeParameters;\n\n        const arrow = this.tryParse(abort => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () => {\n              const result = super.parseMaybeAssign(\n                refExpressionErrors,\n                afterLeftParse,\n                refNeedsArrowPos,\n              );\n\n              this.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            },\n          );\n\n          // <T>(() => {}: any);\n          if (\n            arrowExpression.type !== \"ArrowFunctionExpression\" &&\n            arrowExpression.extra?.parenthesized\n          ) {\n            abort();\n          }\n\n          // The above can return a TypeCastExpression when the arrow\n          // expression is not wrapped in parens. See also `this.parseParenItem`.\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        let arrowExpression: ?(\n          | N.ArrowFunctionExpression\n          | N.TypeCastExpression\n        ) = null;\n\n        if (\n          arrow.node &&\n          this.maybeUnwrapTypeCastExpression(arrow.node).type ===\n            \"ArrowFunctionExpression\"\n        ) {\n          if (!arrow.error && !arrow.aborted) {\n            // <T> async () => {}\n            if (arrow.node.async) {\n              /*:: invariant(typeParameters) */\n              this.raise(\n                typeParameters.start,\n                FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,\n              );\n            }\n\n            return arrow.node;\n          }\n\n          arrowExpression = arrow.node;\n        }\n\n        // If we are here, both JSX and Flow parsing attempts failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(\n          typeParameters.start,\n          FlowErrors.UnexpectedTokenAfterTypeParameter,\n        );\n      }\n\n      return super.parseMaybeAssign(\n        refExpressionErrors,\n        afterLeftParse,\n        refNeedsArrowPos,\n      );\n    }\n\n    // handle return types for arrow functions\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const result = this.tryParse(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode();\n\n          [\n            // $FlowFixMe (destructuring not supported yet)\n            typeNode.typeAnnotation,\n            // $FlowFixMe (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow();\n    }\n\n    setArrowFunctionParameters(\n      node: N.ArrowFunctionExpression,\n      params: N.Expression[],\n    ): void {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction: ?boolean,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1\n      ) {\n        return;\n      }\n\n      return super.checkParams(...arguments);\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1,\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls?: ?boolean,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.indexOf(startPos) !== -1\n      ) {\n        this.next();\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.isRelational(\"<\")\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort =>\n            this.parseAsyncArrowWithTypeParameters(startPos, startLoc) ||\n            abort(),\n          state,\n        );\n\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startPos, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startPos, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node: N.OptionalCallExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(tt.parenL);\n        // $FlowFixMe\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (\n        !noCalls &&\n        this.shouldParseTypes() &&\n        this.isRelational(\"<\")\n      ) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n          if (subscriptState.optionalChainMember) node.optional = false;\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      let targs = null;\n      if (this.shouldParseTypes() && this.isRelational(\"<\")) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n\n      super.parseNewArguments(node);\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      const node = this.startNodeAt(startPos, startLoc);\n      this.parseFunctionParams(node);\n      if (!this.parseArrow(node)) return;\n      return this.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): void {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          this.unexpected(null, FlowErrors.NestedFlowComment);\n        }\n        this.hasFlowCommentCompletion();\n        this.state.pos += this.skipFlowComment();\n        this.state.hasFlowComment = true;\n        return;\n      }\n\n      if (this.state.hasFlowComment) {\n        const end = this.input.indexOf(\"*-/\", (this.state.pos += 2));\n        if (end === -1) {\n          throw this.raise(this.state.pos - 2, Errors.UnterminatedComment);\n        }\n        this.state.pos = end + 3;\n        return;\n      }\n\n      super.skipBlockComment();\n    }\n\n    skipFlowComment(): number | boolean {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(this.state.pos, Errors.UnterminatedComment);\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(\n        pos,\n        FlowErrors.EnumBooleanMemberNotInitialized,\n        memberName,\n        enumName,\n      );\n    }\n\n    flowEnumErrorInvalidMemberName(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      const suggestion = memberName[0].toUpperCase() + memberName.slice(1);\n      this.raise(\n        pos,\n        FlowErrors.EnumInvalidMemberName,\n        memberName,\n        suggestion,\n        enumName,\n      );\n    }\n\n    flowEnumErrorDuplicateMemberName(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);\n    }\n\n    flowEnumErrorInconsistentMemberValues(\n      pos: number,\n      { enumName }: { enumName: string },\n    ): void {\n      this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);\n    }\n\n    flowEnumErrorInvalidExplicitType(\n      pos: number,\n      {\n        enumName,\n        suppliedType,\n      }: { enumName: string, suppliedType: null | string },\n    ) {\n      return this.raise(\n        pos,\n        suppliedType === null\n          ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied\n          : FlowErrors.EnumInvalidExplicitType,\n        enumName,\n        suppliedType,\n      );\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      pos: number,\n      { enumName, explicitType, memberName }: EnumContext,\n    ) {\n      let message = null;\n      switch (explicitType) {\n        case \"boolean\":\n        case \"number\":\n        case \"string\":\n          message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;\n          break;\n        case \"symbol\":\n          message = FlowErrors.EnumInvalidMemberInitializerSymbolType;\n          break;\n        default:\n          // null\n          message = FlowErrors.EnumInvalidMemberInitializerUnknownType;\n      }\n      return this.raise(pos, message, enumName, memberName, explicitType);\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(\n        pos,\n        FlowErrors.EnumNumberMemberNotInitialized,\n        enumName,\n        memberName,\n      );\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitailized(\n      pos: number,\n      { enumName }: { enumName: string },\n    ): void {\n      this.raise(\n        pos,\n        FlowErrors.EnumStringMemberInconsistentlyInitailized,\n        enumName,\n      );\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startPos = this.state.start;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseLiteral(this.state.value, \"NumericLiteral\");\n          if (endOfInit()) {\n            return { type: \"number\", pos: literal.start, value: literal };\n          }\n          return { type: \"invalid\", pos: startPos };\n        }\n        case tt.string: {\n          const literal = this.parseLiteral(this.state.value, \"StringLiteral\");\n          if (endOfInit()) {\n            return { type: \"string\", pos: literal.start, value: literal };\n          }\n          return { type: \"invalid\", pos: startPos };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral();\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              pos: literal.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", pos: startPos };\n        }\n        default:\n          return { type: \"invalid\", pos: startPos };\n      }\n    }\n\n    flowEnumMemberRaw(): { id: N.Node, init: EnumMemberInit } {\n      const pos = this.state.start;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\", pos };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      pos: number,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(pos, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string,\n      explicitType: EnumExplicitType,\n    }): {|\n      booleanMembers: Array<N.Node>,\n      numberMembers: Array<N.Node>,\n      stringMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n    |} {\n      const seenNames = new Set();\n      const members = {\n        booleanMembers: [],\n        numberMembers: [],\n        stringMembers: [],\n        defaultedMembers: [],\n      };\n      while (!this.match(tt.braceR)) {\n        const memberNode = this.startNode();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.flowEnumErrorInvalidMemberName(id.start, {\n            enumName,\n            memberName,\n          });\n        }\n        if (seenNames.has(memberName)) {\n          this.flowEnumErrorDuplicateMemberName(id.start, {\n            enumName,\n            memberName,\n          });\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.pos,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.pos,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return members;\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      { enumName }: { enumName: string },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(\n            member.start,\n            { enumName },\n          );\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(\n            member.start,\n            { enumName },\n          );\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string,\n    }): EnumExplicitType {\n      if (this.eatContextual(\"of\")) {\n        if (!this.match(tt.name)) {\n          throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n            enumName,\n            suppliedType: null,\n          });\n        }\n\n        const { value } = this.state;\n        this.next();\n\n        if (\n          value !== \"boolean\" &&\n          value !== \"number\" &&\n          value !== \"string\" &&\n          value !== \"symbol\"\n        ) {\n          this.flowEnumErrorInvalidExplicitType(this.state.start, {\n            enumName,\n            suppliedType: value,\n          });\n        }\n\n        return value;\n      }\n      return null;\n    }\n\n    flowEnumBody(node: N.Node, { enumName, nameLoc }): N.Node {\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const members = this.flowEnumMembers({ enumName, explicitType });\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.flowEnumErrorInconsistentMemberValues(nameLoc, { enumName });\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(node: N.Node): N.Node {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), {\n        enumName: id.name,\n        nameLoc: id.start,\n      });\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    updateContext(prevType: TokenType): void {\n      if (\n        this.match(tt.name) &&\n        this.state.value === \"of\" &&\n        prevType === tt.name &&\n        this.input.slice(this.state.lastTokStart, this.state.lastTokEnd) ===\n          \"interface\"\n      ) {\n        this.state.exprAllowed = false;\n      } else {\n        super.updateContext(prevType);\n      }\n    }\n\n    // check if the next token is a tt.relation(\"<\")\n    isLookaheadToken_lt(): boolean {\n      const next = this.nextTokenStart();\n      if (this.input.charCodeAt(next) === charCodes.lessThan) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return (\n          afterNext !== charCodes.lessThan && afterNext !== charCodes.equalsTo\n        );\n      }\n      return false;\n    }\n\n    maybeUnwrapTypeCastExpression(node: N.Node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n  };\n","// @flow\n\nconst entities: { [name: string]: string } = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n};\nexport default entities;\n","// @flow\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml\";\nimport type Parser from \"../../parser\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { TokenType, types as tt } from \"../../tokenizer/types\";\nimport { TokContext, types as tc } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier\";\nimport type { Position } from \"../../util/location\";\nimport { isNewLine } from \"../../util/whitespace\";\nimport { Errors } from \"../../parser/error\";\n\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\n\nconst JsxErrors = Object.freeze({\n  AttributeIsEmpty:\n    \"JSX attributes must only be assigned a non-empty expression\",\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>\",\n  MissingClosingTagElement: \"Expected corresponding JSX closing tag for <%0>\",\n  UnsupportedJsxValue:\n    \"JSX value should be either an expression or a quoted JSX text\",\n  UnterminatedJsxContent: \"Unterminated JSX contents\",\n  UnwrappedAdjacentJSXElements:\n    \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n});\n\n// Be aware that this file is always executed and not only when the plugin is enabled.\n// Therefore this contexts and tokens do always exist.\ntc.j_oTag = new TokContext(\"<tag\", false);\ntc.j_cTag = new TokContext(\"</tag\", false);\ntc.j_expr = new TokContext(\"<tag>...</tag>\", true, true);\n\ntt.jsxName = new TokenType(\"jsxName\");\ntt.jsxText = new TokenType(\"jsxText\", { beforeExpr: true });\ntt.jsxTagStart = new TokenType(\"jsxTagStart\", { startsExpr: true });\ntt.jsxTagEnd = new TokenType(\"jsxTagEnd\");\n\ntt.jsxTagStart.updateContext = function () {\n  this.state.context.push(tc.j_expr); // treat as beginning of JSX expression\n  this.state.context.push(tc.j_oTag); // start opening tag context\n  this.state.exprAllowed = false;\n};\n\ntt.jsxTagEnd.updateContext = function (prevType) {\n  const out = this.state.context.pop();\n  if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n    this.state.context.pop();\n    this.state.exprAllowed = this.curContext() === tc.j_expr;\n  } else {\n    this.state.exprAllowed = true;\n  }\n};\n\nfunction isFragment(object: ?N.JSXElement): boolean {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.exprAllowed) {\n                ++this.state.pos;\n                return this.finishToken(tt.jsxTagStart);\n              }\n              return super.getTokenFromCode(ch);\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            return this.finishToken(tt.jsxText, out);\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(this.state.start, Errors.UnterminatedString);\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      return this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      let str = \"\";\n      let count = 0;\n      let entity;\n      let ch = this.input[this.state.pos];\n\n      const startPos = ++this.state.pos;\n      while (this.state.pos < this.length && count++ < 10) {\n        ch = this.input[this.state.pos++];\n        if (ch === \";\") {\n          if (str[0] === \"#\") {\n            if (str[1] === \"x\") {\n              str = str.substr(2);\n              if (HEX_NUMBER.test(str)) {\n                entity = String.fromCodePoint(parseInt(str, 16));\n              }\n            } else {\n              str = str.substr(1);\n              if (DECIMAL_NUMBER.test(str)) {\n                entity = String.fromCodePoint(parseInt(str, 10));\n              }\n            }\n          } else {\n            entity = XHTMLEntities[str];\n          }\n          break;\n        }\n        str += ch;\n      }\n      if (!entity) {\n        this.state.pos = startPos;\n        return \"&\";\n      }\n      return entity;\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      return this.finishToken(\n        tt.jsxName,\n        this.input.slice(start, this.state.pos),\n      );\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (this.state.type.keyword) {\n        node.name = this.state.type.keyword;\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt(startPos, startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let node = this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt(startPos, startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue(): N.Expression {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.next();\n          node = this.jsxParseExpressionContainer(node);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(node.start, JsxErrors.AttributeIsEmpty);\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom();\n\n        default:\n          throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(\n        this.state.lastTokEnd,\n        this.state.lastTokEndLoc,\n      );\n      return this.finishNodeAt(\n        node,\n        \"JSXEmptyExpression\",\n        this.state.start,\n        this.state.startLoc,\n      );\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: N.JSXSpreadChild): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: N.JSXExpressionContainer,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        node.expression = this.parseExpression();\n      }\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute {\n      const node = this.startNode();\n      if (this.eat(tt.braceL)) {\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssignAllowIn();\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXOpeningElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(node);\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      const attributes: N.JSXAttribute[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXClosingElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startPos: number, startLoc: Position): N.JSXElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startPos = this.state.start;\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(\n                  startPos,\n                  startLoc,\n                );\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startPos, startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseExprAtom());\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode();\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node));\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              throw this.unexpected();\n          }\n        }\n\n        if (isFragment(openingElement) && !isFragment(closingElement)) {\n          this.raise(\n            // $FlowIgnore\n            closingElement.start,\n            JsxErrors.MissingClosingTagFragment,\n          );\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(\n            // $FlowIgnore\n            closingElement.start,\n            JsxErrors.MissingClosingTagElement,\n            getQualifiedJSXName(openingElement.name),\n          );\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            // $FlowIgnore\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(\n              // $FlowIgnore\n              closingElement.start,\n              JsxErrors.MissingClosingTagElement,\n              getQualifiedJSXName(openingElement.name),\n            );\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.isRelational(\"<\")) {\n        throw this.raise(\n          this.state.start,\n          JsxErrors.UnwrappedAdjacentJSXElements,\n        );\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startPos, startLoc);\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors: ?ExpressionErrors): N.Expression {\n      if (this.match(tt.jsxText)) {\n        return this.parseLiteral(this.state.value, \"JSXText\");\n      } else if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.isRelational(\"<\") &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.finishToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    getTokenFromCode(code: number): void {\n      if (this.state.inPropertyName) return super.getTokenFromCode(code);\n\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        return this.jsxReadToken();\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          return this.jsxReadWord();\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          return this.finishToken(tt.jsxTagEnd);\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          return this.jsxReadString(code);\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.exprAllowed &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        return this.finishToken(tt.jsxTagStart);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      if (this.match(tt.braceL)) {\n        const curContext = this.curContext();\n        if (curContext === tc.j_oTag) {\n          this.state.context.push(tc.braceExpression);\n        } else if (curContext === tc.j_expr) {\n          this.state.context.push(tc.templateQuasi);\n        } else {\n          super.updateContext(prevType);\n        }\n        this.state.exprAllowed = true;\n      } else if (this.match(tt.slash) && prevType === tt.jsxTagStart) {\n        this.state.context.length -= 2; // do not consider JSX expr -> JSX open tag -> ... anymore\n        this.state.context.push(tc.j_cTag); // reconsider as closing tag context\n        this.state.exprAllowed = false;\n      } else {\n        return super.updateContext(prevType);\n      }\n    }\n  };\n","// @flow\nimport {\n  SCOPE_ARROW,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n  SCOPE_VAR,\n  SCOPE_CLASS,\n  BIND_SCOPE_FUNCTION,\n  BIND_SCOPE_VAR,\n  BIND_SCOPE_LEXICAL,\n  BIND_KIND_VALUE,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"./scopeflags\";\nimport * as N from \"../types\";\nimport { Errors } from \"../parser/error\";\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  flags: ScopeFlags;\n  // A list of var-declared names in the current lexical scope\n  var: string[] = [];\n  // A list of lexically-declared names in the current lexical scope\n  lexical: string[] = [];\n  // A list of lexically-declared FunctionDeclaration names in the current lexical scope\n  functions: string[] = [];\n\n  constructor(flags: ScopeFlags) {\n    this.flags = flags;\n  }\n}\n\ntype raiseFunction = (number, string, ...any) => void;\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope: Scope = Scope> {\n  scopeStack: Array<IScope> = [];\n  declare raise: raiseFunction;\n  declare inModule: boolean;\n  undefinedExports: Map<string, number> = new Map();\n  undefinedPrivateNames: Map<string, number> = new Map();\n\n  constructor(raise: raiseFunction, inModule: boolean) {\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScope().flags & SCOPE_SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScope().flags & SCOPE_CLASS) > 0;\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlags): Scope {\n    return new Scope(flags);\n  }\n  // This method will be overwritten by subclasses\n  /*:: +createScope: (flags: ScopeFlags) => IScope; */\n\n  enter(flags: ScopeFlags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & SCOPE_FUNCTION ||\n      (!this.inModule && scope.flags & SCOPE_PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingTypes, pos: number) {\n    let scope = this.currentScope();\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.push(name);\n      } else {\n        scope.lexical.push(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        scope.var.push(name);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n    pos: number,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(pos, Errors.VarRedeclaration, name);\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return (\n        scope.lexical.indexOf(name) > -1 ||\n        scope.functions.indexOf(name) > -1 ||\n        scope.var.indexOf(name) > -1\n      );\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return (\n        scope.lexical.indexOf(name) > -1 ||\n        (!this.treatFunctionsAsVarInScope(scope) &&\n          scope.var.indexOf(name) > -1)\n      );\n    }\n\n    return (\n      (scope.lexical.indexOf(name) > -1 &&\n        !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical[0] === name)) ||\n      (!this.treatFunctionsAsVarInScope(scope) &&\n        scope.functions.indexOf(name) > -1)\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (\n      this.scopeStack[0].lexical.indexOf(id.name) === -1 &&\n      this.scopeStack[0].var.indexOf(id.name) === -1 &&\n      // In strict mode, scope.functions will always be empty.\n      // Modules are strict by default, but the `scriptMode` option\n      // can overwrite this behavior.\n      this.scopeStack[0].functions.indexOf(id.name) === -1\n    ) {\n      this.undefinedExports.set(id.name, id.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  // $FlowIgnore\n  currentVarScope(): IScope {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const scope = this.scopeStack[i];\n      if (scope.flags & SCOPE_VAR) {\n        return scope;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  // $FlowIgnore\n  currentThisScope(): IScope {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const scope = this.scopeStack[i];\n      if (\n        (scope.flags & SCOPE_VAR || scope.flags & SCOPE_CLASS) &&\n        !(scope.flags & SCOPE_ARROW)\n      ) {\n        return scope;\n      }\n    }\n  }\n}\n","// @flow\n\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_KIND_TYPE,\n  BIND_FLAGS_TS_ENUM,\n  BIND_FLAGS_TS_CONST_ENUM,\n  BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_KIND_VALUE,\n  BIND_FLAGS_CLASS,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\nclass TypeScriptScope extends Scope {\n  types: string[] = [];\n\n  // enums (which are also in .types)\n  enums: string[] = [];\n\n  // const enums (which are also in .enums and .types)\n  constEnums: string[] = [];\n\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  classes: string[] = [];\n\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  exportOnlyBindings: string[] = [];\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  createScope(flags: ScopeFlags): TypeScriptScope {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, pos: number) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.push(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        this.maybeExportDefined(scope, name);\n      }\n      scope.types.push(name);\n    }\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.push(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.push(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.push(name);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (scope.enums.indexOf(name) > -1) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.indexOf(name) > -1;\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.indexOf(name) > -1) {\n      if (scope.lexical.indexOf(name) > -1) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BIND_KIND_TYPE && scope.types.indexOf(name) > -1) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (\n      this.scopeStack[0].types.indexOf(id.name) === -1 &&\n      this.scopeStack[0].exportOnlyBindings.indexOf(id.name) === -1\n    ) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","// @flow\nexport const PARAM = 0b0000, // Initial Parameter flags\n  PARAM_YIELD = 0b0001, // track [Yield] production parameter\n  PARAM_AWAIT = 0b0010, // track [Await] production parameter\n  PARAM_RETURN = 0b0100, // track [Return] production parameter\n  PARAM_IN = 0b1000; // track [In] production parameter\n\n// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport type ParamKind =\n  | typeof PARAM\n  | typeof PARAM_AWAIT\n  | typeof PARAM_IN\n  | typeof PARAM_RETURN\n  | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<ParamKind> = [];\n  enter(flags: ParamKind) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): ParamKind {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n","// @flow\n\n/*:: declare var invariant; */\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport type { TokenType } from \"../../tokenizer/types\";\nimport type State from \"../../tokenizer/state\";\nimport { types as tt } from \"../../tokenizer/types\";\nimport { types as ct } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport type { Pos, Position } from \"../../util/location\";\nimport type Parser from \"../../parser\";\nimport {\n  type BindingTypes,\n  BIND_NONE,\n  SCOPE_TS_MODULE,\n  SCOPE_OTHER,\n  BIND_TS_ENUM,\n  BIND_TS_CONST_ENUM,\n  BIND_TS_TYPE,\n  BIND_TS_INTERFACE,\n  BIND_TS_AMBIENT,\n  BIND_TS_NAMESPACE,\n  BIND_CLASS,\n  BIND_LEXICAL,\n} from \"../../util/scopeflags\";\nimport TypeScriptScopeHandler from \"./scope\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { PARAM } from \"../../util/production-parameter\";\nimport { Errors } from \"../../parser/error\";\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"public\"\n  | \"private\"\n  | \"protected\";\n\nfunction nonNull<T>(x: ?T): T {\n  if (x == null) {\n    // $FlowIgnore\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\nconst TSErrors = Object.freeze({\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier\",\n  ConstructorHasTypeParameters:\n    \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareClassFieldHasInitializer:\n    \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation:\n    \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateModifier: \"Duplicate modifier: '%0'\",\n  EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  IndexSignatureHasAbstract:\n    \"Index signatures cannot have the 'abstract' modifier\",\n  IndexSignatureHasAccessibility:\n    \"Index signatures cannot have an accessibility modifier ('%0')\",\n  IndexSignatureHasStatic: \"Index signatures cannot have the 'static' modifier\",\n  IndexSignatureHasDeclare:\n    \"Index signatures cannot have the 'declare' modifier\",\n  InvalidTupleMemberLabel:\n    \"Tuple members must be labeled with a simple identifier.\",\n  MixedLabeledAndUnlabeledElements:\n    \"Tuple members must all have names or all not have names.\",\n  OptionalTypeBeforeRequired:\n    \"A required element cannot follow an optional element.\",\n  PatternIsOptional:\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract:\n    \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility:\n    \"Private elements cannot have an accessibility modifier ('%0')\",\n  TypeAnnotationAfterAssign:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\",\n  UnexpectedParameterModifier:\n    \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly:\n    \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument:\n    \"Argument in a type import must be a string literal\",\n  UnsupportedParameterPropertyKind:\n    \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind:\n    \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0\",\n});\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\n// It also doesn't handle \"intrinsic\", since usually it's not a keyword.\nfunction keywordTypeFromName(\n  value: string,\n): N.TsKeywordTypeType | typeof undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    getScopeHandler(): Class<TypeScriptScopeHandler> {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return this.match(tt.name);\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n      this.next();\n      return (\n        !this.hasPrecedingLineBreak() &&\n        !this.match(tt.parenL) &&\n        !this.match(tt.parenR) &&\n        !this.match(tt.colon) &&\n        !this.match(tt.eq) &&\n        !this.match(tt.question) &&\n        !this.match(tt.bang)\n      );\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T: TsModifier>(allowedModifiers: T[]): ?T {\n      if (!this.match(tt.name)) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (\n        allowedModifiers.indexOf(modifier) !== -1 &&\n        this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))\n      ) {\n        return modifier;\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers(node, [\"public\"]);\n     *    this.tsParseModifiers(node, [\"abstract\", \"readonly\"]);\n     */\n    tsParseModifiers<T: TsModifier>(\n      modified: { [key: TsModifier]: ?true },\n      allowedModifiers: T[],\n    ): void {\n      for (;;) {\n        const startPos = this.state.start;\n        const modifier: ?T = this.tsParseModifier(allowedModifiers);\n\n        if (!modifier) break;\n\n        if (Object.hasOwnProperty.call(modified, modifier)) {\n          this.raise(startPos, TSErrors.DuplicateModifier, modifier);\n        }\n        modified[modifier] = true;\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.isRelational(\">\");\n      }\n\n      throw new Error(\"Unreachable\");\n    }\n\n    tsParseList<T: N.Node>(kind: ParsingContext, parseElement: () => T): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => ?T,\n      expectSuccess: boolean,\n    ): ?(T[]) {\n      const result = [];\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expectRelational(\"<\");\n        }\n      }\n\n      const result = this.tsParseDelimitedList(kind, parseElement);\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expectRelational(\">\");\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node: N.TsImportType = this.startNode();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);\n      }\n\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.argument = this.parseExprAtom();\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        node.qualifier = this.tsParseEntityName(/* allowReservedWords */ true);\n      }\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(allowReservedWords: boolean): N.TsEntityName {\n      let entity: N.TsEntityName = this.parseIdentifier();\n      while (this.eat(tt.dot)) {\n        const node: N.TsQualifiedName = this.startNodeAtNode(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node: N.TsTypeReference = this.startNode();\n      node.typeName = this.tsParseEntityName(/* allowReservedWords */ false);\n      if (!this.hasPrecedingLineBreak() && this.isRelational(\"<\")) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node: N.TsTypePredicate = this.startNodeAtNode(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node: N.TsThisType = this.startNode();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node: N.TsTypeQuery = this.startNode();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        node.exprName = this.tsParseEntityName(/* allowReservedWords */ true);\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.parseIdentifierName(node.start);\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(): ?N.TsTypeParameterDeclaration {\n      if (this.isRelational(\"<\")) {\n        return this.tsParseTypeParameters();\n      }\n    }\n\n    tsParseTypeParameters() {\n      const node: N.TsTypeParameterDeclaration = this.startNode();\n\n      if (this.isRelational(\"<\") || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        this.tsParseTypeParameter.bind(this),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n      );\n      if (node.params.length === 0) {\n        this.raise(node.start, TSErrors.EmptyTypeParameters);\n      }\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    tsTryNextParseConstantContext(): ?N.TsTypeReference {\n      if (this.lookahead().type === tt._const) {\n        this.next();\n        return this.tsParseTypeReference();\n      }\n      return null;\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: N.TsSignatureDeclaration,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n      signature.typeParameters = this.tsTryParseTypeParameters();\n      this.expect(tt.parenL);\n      signature.parameters = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(\n          returnToken,\n        );\n      } else if (this.match(returnToken)) {\n        signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(\n          returnToken,\n        );\n      }\n    }\n\n    tsParseBindingListForSignature(): $ReadOnlyArray<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern,\n    > {\n      return this.parseBindingList(tt.parenR, charCodes.rightParenthesis).map(\n        pattern => {\n          if (\n            pattern.type !== \"Identifier\" &&\n            pattern.type !== \"RestElement\" &&\n            pattern.type !== \"ObjectPattern\" &&\n            pattern.type !== \"ArrayPattern\"\n          ) {\n            this.raise(\n              pattern.start,\n              TSErrors.UnsupportedSignatureParameterKind,\n              pattern.type,\n            );\n          }\n          return (pattern: any);\n        },\n      );\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma)) {\n        this.semicolon();\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      return this.eat(tt.name) && this.match(tt.colon);\n    }\n\n    tsTryParseIndexSignature(node: N.Node): ?N.TsIndexSignature {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return undefined;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (!readonly && (this.match(tt.parenL) || this.isRelational(\"<\"))) {\n        const method: N.TsMethodSignature = nodeAny;\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id: N.Identifier = this.startNode();\n        this.next();\n        if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      const readonly = !!this.tsParseModifier([\"readonly\"]);\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        if (readonly) node.readonly = true;\n        return idx;\n      }\n\n      this.parsePropertyName(node, /* isPrivateNameAllowed */ false);\n      return this.tsParsePropertyOrMethodSignature(node, readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node: N.TsTypeLiteral = this.startNode();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): $ReadOnlyArray<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(\"readonly\");\n      }\n      if (this.isContextual(\"readonly\")) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.parseIdentifierName(node.start);\n      node.constraint = this.tsExpectThenParseType(tt._in);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node: N.TsMappedType = this.startNode();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(\"readonly\");\n      } else if (this.eatContextual(\"readonly\")) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      node.typeParameter = this.tsParseMappedTypeParameter();\n      node.nameType = this.eatContextual(\"as\") ? this.tsParseType() : null;\n\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node: N.TsTupleType = this.startNode();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure that no mandatory elements\n      // follow optional elements\n      let seenOptionalElement = false;\n      let labeledElements = null;\n      node.elementTypes.forEach(elementNode => {\n        let { type } = elementNode;\n\n        if (\n          seenOptionalElement &&\n          type !== \"TSRestType\" &&\n          type !== \"TSOptionalType\" &&\n          !(type === \"TSNamedTupleMember\" && elementNode.optional)\n        ) {\n          this.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);\n        }\n\n        // Flow doesn't support ||=\n        seenOptionalElement =\n          seenOptionalElement ||\n          (type === \"TSNamedTupleMember\" && elementNode.optional) ||\n          type === \"TSOptionalType\";\n\n        // When checking labels, check the argument of the spread operator\n        if (type === \"TSRestType\") {\n          elementNode = elementNode.typeAnnotation;\n          type = elementNode.type;\n        }\n\n        const isLabeled = type === \"TSNamedTupleMember\";\n        // Flow doesn't support ??=\n        labeledElements = labeledElements ?? isLabeled;\n        if (labeledElements !== isLabeled) {\n          this.raise(\n            elementNode.start,\n            TSErrors.MixedLabeledAndUnlabeledElements,\n          );\n        }\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsType | N.TsNamedTupleMember {\n      // parses `...TsType[]`\n\n      const { start: startPos, startLoc } = this.state;\n\n      const rest = this.eat(tt.ellipsis);\n      let type = this.tsParseType();\n      const optional = this.eat(tt.question);\n      const labeled = this.eat(tt.colon);\n\n      if (labeled) {\n        const labeledNode: N.TsNamedTupleMember = this.startNodeAtNode(type);\n        labeledNode.optional = optional;\n\n        if (\n          type.type === \"TSTypeReference\" &&\n          !type.typeParameters &&\n          type.typeName.type === \"Identifier\"\n        ) {\n          labeledNode.label = (type.typeName: N.Identifier);\n        } else {\n          this.raise(type.start, TSErrors.InvalidTupleMemberLabel);\n          // This produces an invalid AST, but at least we don't drop\n          // nodes representing the invalid source.\n          // $FlowIgnore\n          labeledNode.label = type;\n        }\n\n        labeledNode.elementType = this.tsParseType();\n        type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n      } else if (optional) {\n        const optionalTypeNode: N.TsOptionalType = this.startNodeAtNode(type);\n        optionalTypeNode.typeAnnotation = type;\n        type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n\n      if (rest) {\n        const restNode: N.TsRestType = this.startNodeAt(startPos, startLoc);\n        restNode.typeAnnotation = type;\n        type = this.finishNode(restNode, \"TSRestType\");\n      }\n\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n    ): N.TsFunctionOrConstructorType {\n      const node: N.TsFunctionOrConstructorType = this.startNode();\n      if (type === \"TSConstructorType\") {\n        this.expect(tt._new);\n      }\n      this.tsFillSignature(tt.arrow, node);\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = (() => {\n        switch (this.state.type) {\n          case tt.num:\n          case tt.bigint:\n          case tt.string:\n          case tt._true:\n          case tt._false:\n            // For compatibility to estree we cannot call parseLiteral directly here\n            return this.parseExprAtom();\n          default:\n            throw this.unexpected();\n        }\n      })();\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = this.parseTemplate(false);\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    parseTemplateSubstitution(): N.TsType {\n      if (this.state.inType) return this.tsParseType();\n      return super.parseTemplateSubstitution();\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.name:\n        case tt._void:\n        case tt._null: {\n          const type = this.match(tt._void)\n            ? \"TSVoidKeyword\"\n            : this.match(tt._null)\n            ? \"TSNullKeyword\"\n            : keywordTypeFromName(this.state.value);\n          if (\n            type !== undefined &&\n            this.lookaheadCharCode() !== charCodes.dot\n          ) {\n            const node: N.TsKeywordType = this.startNode();\n            this.next();\n            return this.finishNode(node, type);\n          }\n          return this.tsParseTypeReference();\n        }\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node: N.TsLiteralType = this.startNode();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              throw this.unexpected();\n            }\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          return this.tsParseParenthesizedType();\n        case tt.backQuote:\n          return this.tsParseTemplateLiteralType();\n      }\n\n      throw this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node: N.TsArrayType = this.startNodeAtNode(type);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node: N.TsIndexedAccessType = this.startNodeAtNode(type);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(\n      operator: \"keyof\" | \"unique\" | \"readonly\",\n    ): N.TsTypeOperator {\n      const node: N.TsTypeOperator = this.startNode();\n      this.expectContextual(operator);\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(node);\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: N.Node) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(node.start, TSErrors.UnexpectedReadonly);\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode();\n      this.expectContextual(\"infer\");\n      const typeParameter = this.startNode();\n      typeParameter.name = this.parseIdentifierName(typeParameter.start);\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const operator = [\"keyof\", \"unique\", \"readonly\"].find(kw =>\n        this.isContextual(kw),\n      );\n      return operator\n        ? this.tsParseTypeOperator(operator)\n        : this.isContextual(\"infer\")\n        ? this.tsParseInferType()\n        : this.tsParseArrayTypeOrHigher();\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      this.eat(operator);\n      let type = parseConstituentType();\n      if (this.match(operator)) {\n        const types = [type];\n        while (this.eat(operator)) {\n          types.push(parseConstituentType());\n        }\n        const node: N.TsUnionType | N.TsIntersectionType = this.startNodeAtNode(\n          type,\n        );\n        node.types = types;\n        type = this.finishNode(node, kind);\n      }\n      return type;\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.isRelational(\"<\")) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (this.match(tt.name) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        let braceStackCounter = 1;\n        this.next();\n\n        while (braceStackCounter > 0) {\n          if (this.match(tt.braceL)) {\n            ++braceStackCounter;\n          } else if (this.match(tt.braceR)) {\n            --braceStackCounter;\n          }\n          this.next();\n        }\n        return true;\n      }\n\n      if (this.match(tt.bracketL)) {\n        let braceStackCounter = 1;\n        this.next();\n\n        while (braceStackCounter > 0) {\n          if (this.match(tt.bracketL)) {\n            ++braceStackCounter;\n          } else if (this.match(tt.bracketR)) {\n            --braceStackCounter;\n          }\n          this.next();\n        }\n        return true;\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t: N.TsTypeAnnotation = this.startNode();\n        this.expect(returnToken);\n\n        const asserts = !!this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            const node: N.TsTypePredicate = this.startNodeAtNode(t);\n            node.parameterName = (thisTypePredicate: N.TsThisType);\n            node.asserts = true;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            (thisTypePredicate: N.TsTypePredicate).asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          const node: N.TsTypePredicate = this.startNodeAtNode(t);\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        const node = this.startNodeAtNode(t);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon)\n        ? this.tsParseTypeOrTypePredicateAnnotation(tt.colon)\n        : undefined;\n    }\n\n    tsTryParseTypeAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon) ? this.tsParseTypeAnnotation() : undefined;\n    }\n\n    tsTryParseType(): ?N.TsType {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): ?N.Identifier {\n      const id = this.parseIdentifier();\n      if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (\n        !this.match(tt.name) ||\n        this.state.value !== \"asserts\" ||\n        this.hasPrecedingLineBreak()\n      ) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!this.match(tt.name) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(\n          this.state.lastTokStart,\n          Errors.InvalidEscapedReservedWord,\n          \"asserts\",\n        );\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: N.TsTypeAnnotation = this.startNode(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n      if (this.hasPrecedingLineBreak() || !this.eat(tt._extends)) {\n        return type;\n      }\n      const node: N.TsConditionalType = this.startNodeAtNode(type);\n      node.checkType = type;\n      node.extendsType = this.tsParseNonConditionalType();\n      this.expect(tt.question);\n      node.trueType = this.tsParseType();\n      this.expect(tt.colon);\n      node.falseType = this.tsParseType();\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      const node: N.TsTypeAssertion = this.startNode();\n      const _const = this.tsTryNextParseConstantContext();\n      node.typeAnnotation = _const || this.tsNextThenParseType();\n      this.expectRelational(\">\");\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(\n      descriptor: string,\n    ): $ReadOnlyArray<N.TsExpressionWithTypeArguments> {\n      const originalStart = this.state.start;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        this.tsParseExpressionWithTypeArguments.bind(this),\n      );\n\n      if (!delimitedList.length) {\n        this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);\n      }\n\n      return delimitedList;\n    }\n\n    tsParseExpressionWithTypeArguments(): N.TsExpressionWithTypeArguments {\n      const node: N.TsExpressionWithTypeArguments = this.startNode();\n      // Note: TS uses parseLeftHandSideExpressionOrHigher,\n      // then has grammar errors later if it's not an EntityName.\n      node.expression = this.tsParseEntityName(/* allowReservedWords */ false);\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n\n      return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n    }\n\n    tsParseInterfaceDeclaration(\n      node: N.TsInterfaceDeclaration,\n    ): N.TsInterfaceDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkLVal(\n        node.id,\n        BIND_TS_INTERFACE,\n        undefined,\n        \"typescript interface declaration\",\n      );\n      node.typeParameters = this.tsTryParseTypeParameters();\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body: N.TSInterfaceBody = this.startNode();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkLVal(node.id, BIND_TS_TYPE, undefined, \"typescript type alias\");\n\n      node.typeParameters = this.tsTryParseTypeParameters();\n      node.typeAnnotation = this.tsInType(() => {\n        this.expect(tt.eq);\n\n        if (\n          this.isContextual(\"intrinsic\") &&\n          this.lookahead().type !== tt.dot\n        ) {\n          const node: N.TsKeywordType = this.startNode();\n          this.next();\n          return this.finishNode(node, \"TSIntrinsicKeyword\");\n        }\n\n        return this.tsParseType();\n      });\n\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    tsInNoContext<T>(cb: () => T): T {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | typeof undefined {\n      return !this.match(token) ? undefined : this.tsNextThenParseType();\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsDoThenParseType(() => this.expect(token));\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsDoThenParseType(() => this.next());\n    }\n\n    tsDoThenParseType(cb: () => void): N.TsType {\n      return this.tsInType(() => {\n        cb();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node: N.TsEnumMember = this.startNode();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = this.parseMaybeAssignAllowIn();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: N.TsEnumDeclaration,\n      isConst: boolean,\n    ): N.TsEnumDeclaration {\n      if (isConst) node.const = true;\n      node.id = this.parseIdentifier();\n      this.checkLVal(\n        node.id,\n        isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM,\n        undefined,\n        \"typescript enum declaration\",\n      );\n\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node: N.TsModuleBlock = this.startNode();\n      this.scope.enter(SCOPE_OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      this.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: N.TsModuleDeclaration,\n      nested?: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = this.parseIdentifier();\n\n      if (!nested) {\n        this.checkLVal(\n          node.id,\n          BIND_TS_NAMESPACE,\n          null,\n          \"module or namespace declaration\",\n        );\n      }\n\n      if (this.eat(tt.dot)) {\n        const inner = this.startNode();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        node.body = inner;\n      } else {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(\"global\")) {\n        node.global = true;\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: N.TsImportEqualsDeclaration,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      node.isExport = isExport || false;\n      node.id = this.parseIdentifier();\n      this.checkLVal(\n        node.id,\n        BIND_LEXICAL,\n        undefined,\n        \"import equals declaration\",\n      );\n      this.expect(tt.eq);\n      node.moduleReference = this.tsParseModuleReference();\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(\"require\") &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(/* allowReservedWords */ false);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node: N.TsExternalModuleReference = this.startNode();\n      this.expectContextual(\"require\");\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        throw this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = this.parseExprAtom();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T: ?N.NodeBase>(f: () => T): ?T {\n      const result = this.tryParse(abort => f() || abort());\n\n      if (result.aborted || !result.node) return undefined;\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => ?T): ?T {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      } else {\n        this.state = state;\n        return undefined;\n      }\n    }\n\n    tsTryParseDeclare(nany: any): ?N.Declaration {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let starttype = this.state.type;\n      let kind;\n\n      if (this.isContextual(\"let\")) {\n        starttype = tt._var;\n        kind = \"let\";\n      }\n\n      return this.tsInDeclareContext(() => {\n        switch (starttype) {\n          case tt._function:\n            nany.declare = true;\n            return this.parseFunctionStatement(\n              nany,\n              /* async */ false,\n              /* declarationPosition */ true,\n            );\n          case tt._class:\n            // While this is also set by tsParseExpressionStatement, we need to set it\n            // before parsing the class declaration to now how to register it in the scope.\n            nany.declare = true;\n            return this.parseClass(\n              nany,\n              /* isStatement */ true,\n              /* optionalId */ false,\n            );\n          case tt._const:\n            if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n              // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n              this.expect(tt._const);\n              this.expectContextual(\"enum\");\n              return this.tsParseEnumDeclaration(nany, /* isConst */ true);\n            }\n          // falls through\n          case tt._var:\n            kind = kind || this.state.value;\n            return this.parseVarStatement(nany, kind);\n          case tt.name: {\n            const value = this.state.value;\n            if (value === \"global\") {\n              return this.tsParseAmbientExternalModuleDeclaration(nany);\n            } else {\n              return this.tsParseDeclaration(nany, value, /* next */ true);\n            }\n          }\n        }\n      });\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): ?N.Declaration {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n      );\n    }\n\n    tsParseExpressionStatement(node: any, expr: N.Identifier): ?N.Declaration {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n          break;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(SCOPE_TS_MODULE);\n            this.prodParam.enter(PARAM);\n            const mod: N.TsModuleDeclaration = node;\n            mod.global = true;\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(node, expr.name, /* next */ false);\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n    ): ?N.Declaration {\n      switch (value) {\n        case \"abstract\":\n          if (this.tsCheckLineTerminatorAndMatch(tt._class, next)) {\n            const cls: N.ClassDeclaration = node;\n            cls.abstract = true;\n            if (next) {\n              this.next();\n              if (!this.match(tt._class)) {\n                this.unexpected(null, tt._class);\n              }\n            }\n            return this.parseClass(\n              cls,\n              /* isStatement */ true,\n              /* optionalId */ false,\n            );\n          }\n          break;\n\n        case \"enum\":\n          if (next || this.match(tt.name)) {\n            if (next) this.next();\n            return this.tsParseEnumDeclaration(node, /* isConst */ false);\n          }\n          break;\n\n        case \"interface\":\n          if (this.tsCheckLineTerminatorAndMatch(tt.name, next)) {\n            if (next) this.next();\n            return this.tsParseInterfaceDeclaration(node);\n          }\n          break;\n\n        case \"module\":\n          if (next) this.next();\n          if (this.match(tt.string)) {\n            return this.tsParseAmbientExternalModuleDeclaration(node);\n          } else if (this.tsCheckLineTerminatorAndMatch(tt.name, next)) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"namespace\":\n          if (this.tsCheckLineTerminatorAndMatch(tt.name, next)) {\n            if (next) this.next();\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (this.tsCheckLineTerminatorAndMatch(tt.name, next)) {\n            if (next) this.next();\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminatorAndMatch(tokenType: TokenType, next: boolean) {\n      return (next || this.match(tokenType)) && !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      if (!this.isRelational(\"<\")) {\n        return undefined;\n      }\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = true;\n\n      const res: ?N.ArrowFunctionExpression = this.tsTryParseAndCatch(() => {\n        const node: N.ArrowFunctionExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.typeParameters = this.tsParseTypeParameters();\n        // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n        super.parseFunctionParams(node);\n        node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n        this.expect(tt.arrow);\n        return node;\n      });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      if (!res) {\n        return undefined;\n      }\n\n      return this.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode();\n      node.params = this.tsInType(() =>\n        // Temporarily remove a JSX parsing context, which makes us scan different tokens.\n        this.tsInNoContext(() => {\n          this.expectRelational(\"<\");\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      if (node.params.length === 0) {\n        this.raise(node.start, TSErrors.EmptyTypeArguments);\n      }\n      // This reads the next token after the `>` too, so do this in the enclosing context.\n      // But be sure not to parse a regex in the jsx expression `<C<number> />`, so set exprAllowed = false\n      this.state.exprAllowed = false;\n      this.expectRelational(\">\");\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      if (this.match(tt.name)) {\n        switch (this.state.value) {\n          case \"abstract\":\n          case \"declare\":\n          case \"enum\":\n          case \"interface\":\n          case \"module\":\n          case \"namespace\":\n          case \"type\":\n            return true;\n        }\n      }\n\n      return false;\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseAssignableListItem(\n      allowModifiers: ?boolean,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location/position to include modifiers in range\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      let accessibility: ?N.Accessibility;\n      let readonly = false;\n      if (allowModifiers !== undefined) {\n        accessibility = this.parseAccessModifier();\n        readonly = !!this.tsParseModifier([\"readonly\"]);\n        if (allowModifiers === false && (accessibility || readonly)) {\n          this.raise(startPos, TSErrors.UnexpectedParameterModifier);\n        }\n      }\n\n      const left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left);\n      const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n      if (accessibility || readonly) {\n        const pp: N.TSParameterProperty = this.startNodeAt(startPos, startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);\n        }\n        pp.parameter = ((elt: any): N.Identifier | N.AssignmentPattern);\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\"\n          ? \"TSDeclareMethod\"\n          : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        this.finishNode(node, bodilessType);\n        return;\n      }\n      if (bodilessType === \"TSDeclareFunction\" && this.state.isDeclareContext) {\n        this.raise(node.start, TSErrors.DeclareFunctionHasImplementation);\n        if (\n          // $FlowIgnore\n          node.declare\n        ) {\n          super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n          return;\n        }\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodyless function, we need to do it here.\n        this.checkLVal(node.id, BIND_TS_AMBIENT, null, \"function name\");\n      } else {\n        super.registerFunctionStatementId(...arguments);\n      }\n    }\n\n    tsCheckForInvalidTypeCasts(items: $ReadOnlyArray<?N.Expression>) {\n      items.forEach(node => {\n        if (node?.type === \"TSTypeCastExpression\") {\n          this.raise(\n            node.typeAnnotation.start,\n            TSErrors.UnexpectedTypeAnnotation,\n          );\n        }\n      });\n    }\n\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isInParens?: boolean, // eslint-disable-line no-unused-vars\n    ): $ReadOnlyArray<?N.Expression> {\n      // Handles invalid scenarios like: `f(a:b)`, `(a:b);`, and `(a:b,c:d)`.\n      //\n      // Note that `f<T>(a:b)` goes through a different path and is handled\n      // in `parseSubscript` directly.\n      this.tsCheckForInvalidTypeCasts(exprList);\n      return exprList;\n    }\n\n    parseArrayLike(...args): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(...args);\n\n      if (node.type === \"ArrayExpression\") {\n        this.tsCheckForInvalidTypeCasts(node.elements);\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        this.state.exprAllowed = false;\n        this.next();\n\n        const nonNullExpression: N.TsNonNullExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      if (this.isRelational(\"<\")) {\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(\n              startPos,\n              startLoc,\n            );\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const node: N.CallExpression = this.startNodeAt(startPos, startLoc);\n          node.callee = base;\n\n          const typeArguments = this.tsParseTypeArguments();\n\n          if (typeArguments) {\n            if (!noCalls && this.eat(tt.parenL)) {\n              // possibleAsync always false here, because we would have handled it above.\n              // $FlowIgnore (won't be any undefined arguments)\n              node.arguments = this.parseCallExpressionArguments(\n                tt.parenR,\n                /* possibleAsync */ false,\n              );\n\n              // Handles invalid case: `f<T>(a:b)`\n              this.tsCheckForInvalidTypeCasts(node.arguments);\n\n              node.typeParameters = typeArguments;\n              return this.finishCallExpression(node, state.optionalChainMember);\n            } else if (this.match(tt.backQuote)) {\n              const result = this.parseTaggedTemplateExpression(\n                base,\n                startPos,\n                startLoc,\n                state,\n              );\n              result.typeParameters = typeArguments;\n              return result;\n            }\n          }\n\n          this.unexpected();\n        });\n\n        if (result) return result;\n      }\n\n      return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      if (this.isRelational(\"<\")) {\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // 99% certain this is `new C<T>();`. But may be `new C < T;`, which is also legal.\n        const typeParameters = this.tsTryParseAndCatch(() => {\n          const args = this.tsParseTypeArguments();\n          if (!this.match(tt.parenL)) this.unexpected();\n          return args;\n        });\n        if (typeParameters) {\n          node.typeParameters = typeParameters;\n        }\n      }\n\n      super.parseNewArguments(node);\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartPos: number,\n      leftStartLoc: Position,\n      minPrec: number,\n    ) {\n      if (\n        nonNull(tt._in.binop) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        this.isContextual(\"as\")\n      ) {\n        const node: N.TsAsExpression = this.startNodeAt(\n          leftStartPos,\n          leftStartLoc,\n        );\n        node.expression = left;\n        const _const = this.tsTryNextParseConstantContext();\n        if (_const) {\n          node.typeAnnotation = _const;\n        } else {\n          node.typeAnnotation = this.tsNextThenParseType();\n        }\n        this.finishNode(node, \"TSAsExpression\");\n        // rescan `<`, `>` because they were scanned when this.state.inType was true\n        this.reScan_lt_gt();\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n\n      return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    checkReservedWord(\n      word: string, // eslint-disable-line no-unused-vars\n      startLoc: number, // eslint-disable-line no-unused-vars\n      checkKeywords: boolean, // eslint-disable-line no-unused-vars\n      // eslint-disable-next-line no-unused-vars\n      isBinding: boolean,\n    ): void {\n      // Don't bother checking for TypeScript code.\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    parseImport(node: N.Node): N.AnyImport {\n      if (this.match(tt.name) || this.match(tt.star) || this.match(tt.braceL)) {\n        const ahead = this.lookahead();\n\n        if (this.match(tt.name) && ahead.type === tt.eq) {\n          return this.tsParseImportEqualsDeclaration(node);\n        }\n\n        if (\n          this.isContextual(\"type\") &&\n          // import type, { a } from \"b\";\n          ahead.type !== tt.comma &&\n          // import type from \"a\";\n          !(ahead.type === tt.name && ahead.value === \"from\")\n        ) {\n          node.importKind = \"type\";\n          this.next();\n        }\n      }\n\n      if (!node.importKind) {\n        node.importKind = \"value\";\n      }\n\n      const importNode = super.parseImport(node);\n      /*:: invariant(importNode.type !== \"TSImportEqualsDeclaration\") */\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        importNode.specifiers.length > 1 &&\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(\n          importNode.start,\n          \"A type-only import can specify a default import or named bindings, but not both.\",\n        );\n      }\n\n      return importNode;\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        this.expect(tt._import);\n        return this.tsParseImportEqualsDeclaration(node, /* isExport */ true);\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign: N.TsExportAssignment = node;\n        assign.expression = this.parseExpression();\n        this.semicolon();\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(\"as\")) {\n        // `export as namespace A;`\n        const decl: N.TsNamespaceExportDeclaration = node;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(\"namespace\");\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        if (this.isContextual(\"type\") && this.lookahead().type === tt.braceL) {\n          this.next();\n          node.exportKind = \"type\";\n        } else {\n          node.exportKind = \"value\";\n        }\n\n        return super.parseExport(node);\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(\"abstract\") && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode();\n        this.next(); // Skip \"abstract\"\n        this.parseClass(cls, true, true);\n        cls.abstract = true;\n        return cls;\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.state.value === \"interface\") {\n        const result = this.tsParseDeclaration(\n          this.startNode(),\n          this.state.value,\n          true,\n        );\n\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n      if (this.state.type === tt._const) {\n        const ahead = this.lookahead();\n        if (ahead.type === tt.name && ahead.value === \"enum\") {\n          const node: N.TsEnumDeclaration = this.startNode();\n          this.expect(tt._const);\n          this.expectContextual(\"enum\");\n          return this.tsParseEnumDeclaration(node, /* isConst */ true);\n        }\n      }\n      return super.parseStatementContent(context, topLevel);\n    }\n\n    parseAccessModifier(): ?N.Accessibility {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      this.tsParseModifiers(member, [\"declare\"]);\n      const accessibility = this.parseAccessModifier();\n      if (accessibility) member.accessibility = accessibility;\n      this.tsParseModifiers(member, [\"declare\"]);\n\n      const callParseClassMember = () => {\n        super.parseClassMember(classBody, member, state);\n      };\n      if (member.declare) {\n        this.tsInDeclareContext(callParseClassMember);\n      } else {\n        callParseClassMember();\n      }\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: N.ClassMember | N.TsIndexSignature,\n      state: N.ParseClassMemberState,\n      isStatic: boolean,\n    ): void {\n      this.tsParseModifiers(member, [\"abstract\", \"readonly\", \"declare\"]);\n\n      const idx = this.tsTryParseIndexSignature(member);\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member: any).abstract) {\n          this.raise(member.start, TSErrors.IndexSignatureHasAbstract);\n        }\n        if (isStatic) {\n          this.raise(member.start, TSErrors.IndexSignatureHasStatic);\n        }\n        if ((member: any).accessibility) {\n          this.raise(\n            member.start,\n            TSErrors.IndexSignatureHasAccessibility,\n            (member: any).accessibility,\n          );\n        }\n        if ((member: any).declare) {\n          this.raise(member.start, TSErrors.IndexSignatureHasDeclare);\n        }\n\n        return;\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp: any).readonly && this.match(tt.parenL)) {\n        this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);\n      }\n\n      if ((methodOrProp: any).declare && this.match(tt.parenL)) {\n        this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? this.tsParseExpressionStatement(node, expr)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refNeedsArrowPos?: ?Pos,\n    ): N.Expression {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (!refNeedsArrowPos || !this.match(tt.question)) {\n        return super.parseConditional(\n          expr,\n          startPos,\n          startLoc,\n          refNeedsArrowPos,\n        );\n      }\n\n      const result = this.tryParse(() =>\n        super.parseConditional(expr, startPos, startLoc),\n      );\n\n      if (!result.node) {\n        // $FlowIgnore\n        refNeedsArrowPos.start = result.error.pos || this.state.start;\n        return expr;\n      }\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode: N.TsTypeCastExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      // Store original location/position\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      // \"export declare\" is equivalent to just \"export\".\n      const isDeclare = this.eatContextual(\"declare\");\n\n      let declaration: ?N.Declaration;\n\n      if (this.match(tt.name)) {\n        declaration = this.tsTryParseExportDeclaration();\n      }\n      if (!declaration) {\n        declaration = super.parseExportDeclaration(node);\n      }\n      if (\n        declaration &&\n        (declaration.type === \"TSInterfaceDeclaration\" ||\n          declaration.type === \"TSTypeAliasDeclaration\" ||\n          isDeclare)\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (declaration && isDeclare) {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startPos, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId: ?boolean,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(\"implements\")) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node: any).declare ? BIND_TS_AMBIENT : BIND_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      if (!node.optional && this.eat(tt.bang)) {\n        node.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (this.state.isDeclareContext && this.match(tt.eq)) {\n        this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      // $FlowIgnore\n      if (node.abstract) {\n        this.raise(node.start, TSErrors.PrivateElementHasAbstract);\n      }\n\n      // $FlowIgnore\n      if (node.accessibility) {\n        this.raise(\n          node.start,\n          TSErrors.PrivateElementHasAccessibility,\n          node.accessibility,\n        );\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters && isConstructor) {\n        this.raise(typeParameters.start, TSErrors.ConstructorHasTypeParameters);\n      }\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.isRelational(\"<\")) {\n        node.superTypeParameters = this.tsParseTypeArguments();\n      }\n      if (this.eatContextual(\"implements\")) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue(prop: N.ObjectMember, ...args): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      super.parseObjPropValue(prop, ...args);\n    }\n\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (decl.id.type === \"Identifier\" && this.eat(tt.bang)) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(...args): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: ?State;\n      let jsx;\n      let typeCast;\n\n      if (this.match(tt.jsxTagStart)) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n        /*:: invariant(!jsx.aborted) */\n\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        if (context[context.length - 1] === ct.j_oTag) {\n          context.length -= 2;\n        } else if (context[context.length - 1] === ct.j_expr) {\n          context.length -= 1;\n        }\n      }\n\n      if (!jsx?.error && !this.isRelational(\"<\")) {\n        return super.parseMaybeAssign(...args);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      let typeParameters: N.TsTypeParameterDeclaration;\n      state = state || this.state.clone();\n\n      const arrow = this.tryParse(abort => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters();\n        const expr = super.parseMaybeAssign(...args);\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          (expr.extra && expr.extra.parenthesized)\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n        return expr;\n      }, state);\n\n      if (!arrow.error && !arrow.aborted) return arrow.node;\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n        /*:: invariant(!typeCast.aborted) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      if (jsx?.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      if (typeCast?.thrown) throw typeCast.error;\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.isRelational(\"<\")) {\n        return this.tsParseTypeAssertion();\n      } else {\n        return super.parseMaybeUnary(refExpressionErrors);\n      }\n    }\n\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseAssignableListItemTypes(param: N.Pattern) {\n      if (this.eat(tt.question)) {\n        if (\n          param.type !== \"Identifier\" &&\n          !this.state.isDeclareContext &&\n          !this.state.inType\n        ) {\n          this.raise(param.start, TSErrors.PatternIsOptional);\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    toAssignable(node: N.Node): N.Node {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return super.toAssignable(this.typeCastToParameter(node));\n        case \"TSParameterProperty\":\n          return super.toAssignable(node);\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          node.expression = this.toAssignable(node.expression);\n          return node;\n        default:\n          return super.toAssignable(node);\n      }\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      bindingType: BindingTypes = BIND_NONE,\n      checkClashes: ?{ [key: string]: boolean },\n      contextDescription: string,\n    ): void {\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          // Allow \"typecasts\" to appear on the left of assignment expressions,\n          // because it may be in an arrow function.\n          // e.g. `const f = (foo: number = 0) => foo;`\n          return;\n        case \"TSParameterProperty\":\n          this.checkLVal(\n            expr.parameter,\n            bindingType,\n            checkClashes,\n            \"parameter property\",\n          );\n          return;\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          this.checkLVal(\n            expr.expression,\n            bindingType,\n            checkClashes,\n            contextDescription,\n          );\n          return;\n        default:\n          super.checkLVal(expr, bindingType, checkClashes, contextDescription);\n          return;\n      }\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n      if (this.isRelational(\"<\")) {\n        const typeArguments = this.tsParseTypeArguments();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(expr);\n          call.typeParameters = typeArguments;\n          return call;\n        }\n\n        this.unexpected(this.state.start, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr);\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.isRelational(\"<\") || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(...args): N.Pattern {\n      const node = super.parseMaybeDefault(...args);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(\n          node.typeAnnotation.start,\n          TSErrors.TypeAnnotationAfterAssign,\n        );\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        return this.finishOp(tt.relational, 1);\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      if (this.match(tt.relational)) {\n        const code = this.input.charCodeAt(this.state.start);\n        if (code === charCodes.lessThan || code === charCodes.greaterThan) {\n          this.state.pos -= 1;\n          this.readToken_lt_gt(code);\n        }\n      }\n    }\n\n    toAssignableList(exprList: N.Expression[]): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (!expr) continue;\n        switch (expr.type) {\n          case \"TSTypeCastExpression\":\n            exprList[i] = this.typeCastToParameter(expr);\n            break;\n          case \"TSAsExpression\":\n          case \"TSTypeAssertion\":\n            if (!this.state.maybeInArrowParameters) {\n              exprList[i] = this.typeCastToParameter(expr);\n            } else {\n              this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);\n            }\n            break;\n        }\n      }\n      return super.toAssignableList(...arguments);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(\n        node.expression,\n        node.typeAnnotation.end,\n        node.typeAnnotation.loc.end,\n      );\n\n      return node.expression;\n    }\n\n    shouldParseArrow() {\n      return this.match(tt.colon) || super.shouldParseArrow();\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      if (this.isRelational(\"<\")) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          this.tsParseTypeArguments(),\n        );\n        if (typeArguments) node.typeParameters = typeArguments;\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const firstParam = method.params[0];\n      const hasContextParam =\n        firstParam &&\n        firstParam.type === \"Identifier\" &&\n        firstParam.name === \"this\";\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n\n    parseCatchClauseParam(): N.Pattern {\n      const param = super.parseCatchClauseParam();\n      const type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        param.typeAnnotation = type;\n        this.resetEndLocation(param);\n      }\n\n      return param;\n    }\n\n    tsInDeclareContext<T>(cb: () => T): T {\n      const oldIsDeclareContext = this.state.isDeclareContext;\n      this.state.isDeclareContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.isDeclareContext = oldIsDeclareContext;\n      }\n    }\n  };\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\nimport { types as tt, TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport * as N from \"../types\";\n\ntt.placeholder = new TokenType(\"%%\", { startsExpr: true });\n\nexport type PlaceholderTypes =\n  | \"Identifier\"\n  | \"StringLiteral\"\n  | \"Expression\"\n  | \"Statement\"\n  | \"Declaration\"\n  | \"BlockStatement\"\n  | \"ClassBody\"\n  | \"Pattern\";\n\n// $PropertyType doesn't support enums. Use a fake \"switch\" (GetPlaceholderNode)\n//type MaybePlaceholder<T: PlaceholderTypes> = $PropertyType<N, T> | N.Placeholder<T>;\n\ntype _Switch<Value, Cases, Index> = $Call<\n  (\n    $ElementType<$ElementType<Cases, Index>, 0>,\n  ) => $ElementType<$ElementType<Cases, Index>, 1>,\n  Value,\n>;\ntype $Switch<Value, Cases> = _Switch<Value, Cases, *>;\n\ntype NodeOf<T: PlaceholderTypes> = $Switch<\n  T,\n  [\n    [\"Identifier\", N.Identifier],\n    [\"StringLiteral\", N.StringLiteral],\n    [\"Expression\", N.Expression],\n    [\"Statement\", N.Statement],\n    [\"Declaration\", N.Declaration],\n    [\"BlockStatement\", N.BlockStatement],\n    [\"ClassBody\", N.ClassBody],\n    [\"Pattern\", N.Pattern],\n  ],\n>;\n\n// Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T: PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parsePlaceholder<T: PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ ?MaybePlaceholder<T> {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode();\n        this.next();\n        this.assertNoSpace(\"Unexpected space in placeholder.\");\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace(\"Unexpected space in placeholder.\");\n        this.expect(tt.placeholder);\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T: PlaceholderTypes>(\n      node: N.Node,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n      node.expectedNode = expectedNode;\n\n      return isFinished ? node : this.finishNode(node, \"Placeholder\");\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        return this.finishOp(tt.placeholder, 2);\n      }\n\n      return super.getTokenFromCode(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments)\n      );\n    }\n\n    parseIdentifier(): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseIdentifier(...arguments)\n      );\n    }\n\n    checkReservedWord(word: string): void {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) super.checkReservedWord(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return (\n        this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments)\n      );\n    }\n\n    checkLVal(expr: N.Expression): void {\n      if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n    }\n\n    toAssignable(node: N.Node): N.Node {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n        return node;\n      }\n      return super.toAssignable(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    verifyBreakContinue(node: N.BreakStatement | N.ContinueStatement) {\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(...arguments);\n    }\n\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: N.Expression,\n    ): MaybePlaceholder<\"Statement\"> {\n      if (\n        expr.type !== \"Placeholder\" ||\n        (expr.extra && expr.extra.parenthesized)\n      ) {\n        return super.parseExpressionStatement(...arguments);\n      }\n\n      if (this.match(tt.colon)) {\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = this.parseStatement(\"label\");\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n\n      node.name = expr.name;\n      return this.finishPlaceholder(node, \"Statement\");\n    }\n\n    parseBlock(): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(...arguments)\n      );\n    }\n\n    parseFunctionId(): ?MaybePlaceholder<\"Identifier\"> {\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseFunctionId(...arguments)\n      );\n    }\n\n    parseClass<T: N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      this.takeDecorators(node);\n      const oldStrict = this.state.strict;\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          this.unexpected(null, \"A class name is required\");\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      this.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        this.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(node: N.Node): N.Node {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(...arguments);\n\n      if (!this.isContextual(\"from\") && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node.specifiers = [];\n        node.source = null;\n        node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = placeholder;\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tt.placeholder.label,\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n      if (node.specifiers && node.specifiers.length > 0) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(...arguments);\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: N.Node,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(...arguments);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(\"from\") && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier = this.startNodeAtNode(placeholder);\n      specifier.local = placeholder;\n      this.finishNode(specifier, \"ImportDefaultSpecifier\");\n      node.specifiers.push(specifier);\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(\"from\");\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") ||\n        super.parseImportSource(...arguments)\n      );\n    }\n  };\n","import type Parser from \"../parser\";\nimport { types as tt } from \"../tokenizer/types\";\nimport * as N from \"../types\";\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStart = this.state.start;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode();\n        this.eat(tt.modulo);\n        if (this.match(tt.name)) {\n          const name = this.parseIdentifierName(this.state.start);\n          const identifier = this.createIdentifier(node, name);\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStart);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): N.Expression {\n      return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n    }\n  };\n","// @flow\n\nimport type Parser from \"./parser\";\n\nexport type Plugin = string | [string, Object];\n\nexport type PluginList = $ReadOnlyArray<Plugin>;\n\nexport type MixinPlugin = (superClass: Class<Parser>) => Class<Parser>;\n\nexport function hasPlugin(plugins: PluginList, name: string): boolean {\n  return plugins.some(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n}\n\nexport function getPluginOption(\n  plugins: PluginList,\n  name: string,\n  option: string,\n) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"smart\", \"fsharp\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nexport function validatePlugins(plugins: PluginList) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"decoratorsBeforeExport\",\n    );\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\n        \"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" +\n          \" whose value must be a boolean. If you are migrating from\" +\n          \" Babylon/Babel 6 or want to use the old decorators proposal, you\" +\n          \" should use the 'decorators-legacy' plugin instead of 'decorators'.\",\n      );\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (\n    hasPlugin(plugins, \"pipelineOperator\") &&\n    !PIPELINE_PROPOSALS.includes(\n      getPluginOption(plugins, \"pipelineOperator\", \"proposal\"),\n    )\n  ) {\n    throw new Error(\n      \"'pipelineOperator' requires 'proposal' option whose value should be one of: \" +\n        PIPELINE_PROPOSALS.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    if (hasPlugin(plugins, \"importAssertions\")) {\n      throw new Error(\n        \"Cannot combine importAssertions and moduleAttributes plugins.\",\n      );\n    }\n    const moduleAttributesVerionPluginOption = getPluginOption(\n      plugins,\n      \"moduleAttributes\",\n      \"version\",\n    );\n    if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n      throw new Error(\n        \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n          \" representing the last proposal update. Currently, the\" +\n          \" only supported value is 'may-2020'.\",\n      );\n    }\n  }\n\n  if (\n    hasPlugin(plugins, \"recordAndTuple\") &&\n    !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(\n      getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"),\n    )\n  ) {\n    throw new Error(\n      \"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" +\n        RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree\";\nimport flow from \"./plugins/flow\";\nimport jsx from \"./plugins/jsx\";\nimport typescript from \"./plugins/typescript\";\nimport placeholders from \"./plugins/placeholders\";\nimport v8intrinsic from \"./plugins/v8intrinsic\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins: { [name: string]: MixinPlugin } = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames: $ReadOnlyArray<string> = Object.keys(\n  mixinPlugins,\n);\n","// @flow\n\nimport type { PluginList } from \"./plugin-utils\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport type Options = {\n  sourceType: SourceType,\n  sourceFilename?: string,\n  startLine: number,\n  allowAwaitOutsideFunction: boolean,\n  allowReturnOutsideFunction: boolean,\n  allowImportExportEverywhere: boolean,\n  allowSuperOutsideMethod: boolean,\n  allowUndeclaredExports: boolean,\n  plugins: PluginList,\n  strictMode: ?boolean,\n  ranges: boolean,\n  tokens: boolean,\n  createParenthesizedExpressions: boolean,\n  errorRecovery: boolean,\n};\n\nexport const defaultOptions: Options = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Line from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, await at the top level is not considered an\n  // error.\n  allowAwaitOutsideFunction: false,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // When enabled, export statements can reference undeclared variables.\n  allowUndeclaredExports: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // Adds all parsed tokens to a `tokens` property on the `File` node\n  tokens: false,\n  // Whether to create ParenthesizedExpression AST nodes (if false\n  // the parser sets extra.parenthesized on the expression nodes instead).\n  createParenthesizedExpressions: false,\n  // When enabled, errors are attached to the AST instead of being directly thrown.\n  // Some errors will still throw, because @babel/parser can't always recover.\n  errorRecovery: false,\n};\n\n// Interpret and default an options object\n\nexport function getOptions(opts: ?Options): Options {\n  const options: any = {};\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n  return options;\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport * as N from \"../types\";\nimport { Position } from \"../util/location\";\n\nimport { types as ct, type TokContext } from \"./context\";\nimport { types as tt, type TokenType } from \"./types\";\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number,\n\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0,\n};\n\nexport default class State {\n  strict: boolean;\n  curLine: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init(options: Options): void {\n    this.strict =\n      options.strictMode === false ? false : options.sourceType === \"module\";\n\n    this.curLine = options.startLine;\n    this.startLoc = this.endLoc = this.curPosition();\n  }\n\n  errors: SyntaxError[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  maybeInArrowParameters: boolean = false;\n  inPipeline: boolean = false;\n  inType: boolean = false;\n  noAnonFunctionType: boolean = false;\n  inPropertyName: boolean = false;\n  hasFlowComment: boolean = false;\n  isIterator: boolean = false;\n  isDeclareContext: boolean = false;\n\n  // For the smartPipelines plugin:\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F# plugin\n  soloAwait: boolean = false;\n  inFSharpPipelineDirectBody: boolean = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: ?(\"loop\" | \"switch\"),\n    name?: ?string,\n    statementStart?: number,\n  }> = [];\n\n  // Leading decorators. Last element of the stack represents the decorators in current context.\n  // Supports nesting of decorators, e.g. @foo(@bar class inner {}) class outer {}\n  // where @foo belongs to the outer class and @bar to the inner\n  decoratorStack: Array<Array<N.Decorator>> = [[]];\n\n  // Comment store.\n  comments: Array<N.Comment> = [];\n\n  // Comment attachment store\n  trailingComments: Array<N.Comment> = [];\n  leadingComments: Array<N.Comment> = [];\n  commentStack: Array<{\n    start: number,\n    leadingComments: ?Array<N.Comment>,\n    trailingComments: ?Array<N.Comment>,\n    type: string,\n  }> = [];\n  // $FlowIgnore this is initialized when the parser starts.\n  commentPreviousNode: N.Node = null;\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n  lineStart: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n  lastTokStart: number = 0;\n  lastTokEnd: number = 0;\n\n  // The context stack is used to superficially track syntactic\n  // context to predict whether a regular expression is allowed in a\n  // given position.\n  context: Array<TokContext> = [ct.braceStatement];\n  exprAllowed: boolean = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  containsEsc: boolean = false;\n\n  // This property is used to throw an error for\n  // an octal literal in a directive that occurs prior\n  // to a \"use strict\" directive.\n  octalPositions: number[] = [];\n\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  exportedIdentifiers: Array<string> = [];\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  curPosition(): Position {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  }\n\n  clone(skipArrays?: boolean): State {\n    const state = new State();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // $FlowIgnore\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      // $FlowIgnore\n      state[key] = val;\n    }\n\n    return state;\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\n\nimport type { Options } from \"../options\";\nimport * as N from \"../types\";\nimport type { Position } from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier\";\nimport { types as tt, keywords as keywordTypes, type TokenType } from \"./types\";\nimport { type TokContext, types as ct } from \"./context\";\nimport ParserErrors, { Errors } from \"../parser/error\";\nimport { SourceLocation } from \"../util/location\";\nimport {\n  lineBreak,\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n} from \"../util/whitespace\";\nimport State from \"./state\";\n\nconst VALID_REGEX_FLAGS = new Set([\"g\", \"m\", \"s\", \"i\", \"y\", \"u\"]);\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\n\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ],\n  hex: [\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ],\n};\n\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [\n  // 0 - 1\n  charCodes.digit0,\n  charCodes.digit1,\n];\nallowedNumericSeparatorSiblings.oct = [\n  // 0 - 7\n  ...allowedNumericSeparatorSiblings.bin,\n\n  charCodes.digit2,\n  charCodes.digit3,\n  charCodes.digit4,\n  charCodes.digit5,\n  charCodes.digit6,\n  charCodes.digit7,\n];\nallowedNumericSeparatorSiblings.dec = [\n  // 0 - 9\n  ...allowedNumericSeparatorSiblings.oct,\n\n  charCodes.digit8,\n  charCodes.digit9,\n];\n\nallowedNumericSeparatorSiblings.hex = [\n  // 0 - 9, A - F, a - f,\n  ...allowedNumericSeparatorSiblings.dec,\n\n  charCodes.uppercaseA,\n  charCodes.uppercaseB,\n  charCodes.uppercaseC,\n  charCodes.uppercaseD,\n  charCodes.uppercaseE,\n  charCodes.uppercaseF,\n\n  charCodes.lowercaseA,\n  charCodes.lowercaseB,\n  charCodes.lowercaseC,\n  charCodes.lowercaseD,\n  charCodes.lowercaseE,\n  charCodes.lowercaseF,\n];\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  declare type: TokenType;\n  declare value: any;\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default class Tokenizer extends ParserErrors {\n  // Forward-declarations\n  // parser/util.js\n  /*::\n  +hasPrecedingLineBreak: () => boolean;\n  +unexpected: (pos?: ?number, messageOrType?: string | TokenType) => empty;\n  +expectPlugin: (name: string, pos?: ?number) => true;\n  */\n\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    if (!this.isLookahead) {\n      this.checkKeywordEscapes();\n      if (this.options.tokens) {\n        this.pushToken(new Token(this.state));\n      }\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  // TODO\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // TODO\n\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  // TODO\n\n  lookahead(): State {\n    const old = this.state;\n    this.state = old.clone(true);\n\n    this.isLookahead = true;\n    this.next();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    const skip = skipWhiteSpace.exec(this.input);\n    // $FlowIgnore: The skipWhiteSpace ensures to match any string\n    return pos + skip[0].length;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (!this.match(tt.num) && !this.match(tt.string)) return;\n    this.state.pos = this.state.start;\n    while (this.state.pos < this.state.lineStart) {\n      this.state.lineStart =\n        this.input.lastIndexOf(\"\\n\", this.state.lineStart - 2) + 1;\n      --this.state.curLine;\n    }\n    this.nextToken();\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  nextToken(): void {\n    const curContext = this.curContext();\n    if (!curContext?.preserveSpace) this.skipSpace();\n\n    this.state.octalPositions = [];\n    this.state.start = this.state.pos;\n    this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    const override = curContext?.override;\n    if (override) {\n      override(this);\n    } else {\n      this.getTokenFromCode(this.input.codePointAt(this.state.pos));\n    }\n  }\n\n  pushComment(\n    block: boolean,\n    text: string,\n    start: number,\n    end: number,\n    startLoc: Position,\n    endLoc: Position,\n  ): void {\n    const comment = {\n      type: block ? \"CommentBlock\" : \"CommentLine\",\n      value: text,\n      start: start,\n      end: end,\n      loc: new SourceLocation(startLoc, endLoc),\n    };\n\n    if (this.options.tokens) this.pushToken(comment);\n    this.state.comments.push(comment);\n    this.addComment(comment);\n  }\n\n  skipBlockComment(): void {\n    const startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", this.state.pos + 2);\n    if (end === -1) throw this.raise(start, Errors.UnterminatedComment);\n\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start;\n    let match;\n    while (\n      (match = lineBreakG.exec(this.input)) &&\n      match.index < this.state.pos\n    ) {\n      ++this.state.curLine;\n      this.state.lineStart = match.index + match[0].length;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n\n    this.pushComment(\n      true,\n      this.input.slice(start + 2, end),\n      start,\n      this.state.pos,\n      startLoc,\n      this.state.curPosition(),\n    );\n  }\n\n  skipLineComment(startSkip: number): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n\n    this.pushComment(\n      false,\n      this.input.slice(start + startSkip, this.state.pos),\n      start,\n      this.state.pos,\n      startLoc,\n      this.state.curPosition(),\n    );\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk:\n              this.skipBlockComment();\n              break;\n\n            case charCodes.slash:\n              this.skipLineComment(2);\n              break;\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else {\n            break loop;\n          }\n      }\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `exprAllowed`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) this.updateContext(prevType);\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.input.charCodeAt(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(this.state.pos, Errors.UnexpectedDigitAfterHash);\n    }\n\n    if (\n      next === charCodes.leftCurlyBrace ||\n      (next === charCodes.leftSquareBracket && this.hasPlugin(\"recordAndTuple\"))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(\n          this.state.pos,\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n        );\n      }\n\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n      this.state.pos += 2;\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    // '/'\n    if (this.state.exprAllowed && !this.state.inType) {\n      ++this.state.pos;\n      this.readRegexp();\n      return;\n    }\n\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n    const exprAllowed = this.state.exprAllowed;\n\n    // Exponentiation operator **\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    if (next === charCodes.equalsTo && !exprAllowed) {\n      width++;\n      type = tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            this.state.pos,\n            Errors.RecordExpressionBarIncorrectEndSyntaxType,\n          );\n        }\n\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      // '|]'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            this.state.pos,\n            Errors.TupleExpressionBarIncorrectEndSyntaxType,\n          );\n        }\n\n        this.finishOp(tt.bracketBarR, 2);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    // '^'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (\n        next === charCodes.dash &&\n        !this.inModule &&\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.greaterThan &&\n        (this.state.lastTokEnd === 0 || this.hasPrecedingLineBreak())\n      ) {\n        // A `-->` line comment\n        this.skipLineComment(3);\n        this.skipSpace();\n        this.nextToken();\n        return;\n      }\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt_gt(code: number): void {\n    // '<>'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    let size = 1;\n\n    if (next === code) {\n      size =\n        code === charCodes.greaterThan &&\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.greaterThan\n          ? 3\n          : 2;\n      if (this.input.charCodeAt(this.state.pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShift, size);\n      return;\n    }\n\n    if (\n      next === charCodes.exclamationMark &&\n      code === charCodes.lessThan &&\n      !this.inModule &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dash &&\n      this.input.charCodeAt(this.state.pos + 3) === charCodes.dash\n    ) {\n      // `<!--`, an XML-style comment that should be interpreted as a line comment\n      this.skipLineComment(4);\n      this.skipSpace();\n      this.nextToken();\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      size = 2;\n    }\n\n    this.finishOp(tt.relational, size);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              this.state.pos,\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n            );\n          }\n\n          // [|\n          this.finishToken(tt.bracketBarL);\n          this.state.pos += 2;\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              this.state.pos,\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n            );\n          }\n\n          // {|\n          this.finishToken(tt.braceBarL);\n          this.state.pos += 2;\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        ++this.state.pos;\n        this.finishToken(tt.backQuote);\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n      case charCodes.greaterThan:\n        this.readToken_lt_gt(code);\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        ++this.state.pos;\n        this.finishToken(tt.at);\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord();\n          return;\n        }\n    }\n\n    throw this.raise(\n      this.state.pos,\n      Errors.InvalidOrUnexpectedToken,\n      String.fromCodePoint(code),\n    );\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const start = this.state.pos;\n    let escaped, inClass;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(start, Errors.UnterminatedRegExp);\n      }\n      const ch = this.input.charAt(this.state.pos);\n      if (lineBreak.test(ch)) {\n        throw this.raise(start, Errors.UnterminatedRegExp);\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === \"[\") {\n          inClass = true;\n        } else if (ch === \"]\" && inClass) {\n          inClass = false;\n        } else if (ch === \"/\" && !inClass) {\n          break;\n        }\n        escaped = ch === \"\\\\\";\n      }\n      ++this.state.pos;\n    }\n    const content = this.input.slice(start, this.state.pos);\n    ++this.state.pos;\n\n    let mods = \"\";\n\n    while (this.state.pos < this.length) {\n      const char = this.input[this.state.pos];\n      const charCode = this.input.codePointAt(this.state.pos);\n\n      if (VALID_REGEX_FLAGS.has(char)) {\n        if (mods.indexOf(char) > -1) {\n          this.raise(this.state.pos + 1, Errors.DuplicateRegExpFlags);\n        }\n      } else if (\n        isIdentifierChar(charCode) ||\n        charCode === charCodes.backslash\n      ) {\n        this.raise(this.state.pos + 1, Errors.MalformedRegExpFlags);\n      } else {\n        break;\n      }\n\n      ++this.state.pos;\n      mods += char;\n    }\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen?: boolean,\n    allowNumSeparator: boolean = true,\n  ): number | null {\n    const start = this.state.pos;\n    const forbiddenSiblings =\n      radix === 16\n        ? forbiddenNumericSeparatorSiblings.hex\n        : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings =\n      radix === 16\n        ? allowedNumericSeparatorSiblings.hex\n        : radix === 10\n        ? allowedNumericSeparatorSiblings.dec\n        : radix === 8\n        ? allowedNumericSeparatorSiblings.oct\n        : allowedNumericSeparatorSiblings.bin;\n\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === charCodes.underscore) {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        if (allowedSiblings.indexOf(next) === -1) {\n          this.raise(this.state.pos, Errors.UnexpectedNumericSeparator);\n        } else if (\n          forbiddenSiblings.indexOf(prev) > -1 ||\n          forbiddenSiblings.indexOf(next) > -1 ||\n          Number.isNaN(next)\n        ) {\n          this.raise(this.state.pos, Errors.UnexpectedNumericSeparator);\n        }\n\n        if (!allowNumSeparator) {\n          this.raise(this.state.pos, Errors.NumericSeparatorInEscapeSequence);\n        }\n\n        // Ignore this _ character\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= charCodes.lowercaseA) {\n        val = code - charCodes.lowercaseA + charCodes.lineFeed;\n      } else if (code >= charCodes.uppercaseA) {\n        val = code - charCodes.uppercaseA + charCodes.lineFeed;\n      } else if (charCodes.isDigit(code)) {\n        val = code - charCodes.digit0; // 0-9\n      } else {\n        val = Infinity;\n      }\n      if (val >= radix) {\n        // If we are in \"errorRecovery\" mode and we found a digit which is too big,\n        // don't break the loop.\n\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(this.state.start + i + 2, Errors.InvalidDigit, radix);\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n    if (\n      this.state.pos === start ||\n      (len != null && this.state.pos - start !== len) ||\n      invalid\n    ) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix: number): void {\n    const start = this.state.pos;\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(this.state.start + 2, Errors.InvalidDigit, radix);\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === charCodes.lowercaseM) {\n      throw this.raise(start, Errors.InvalidDecimal);\n    }\n\n    if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n      throw this.raise(this.state.pos, Errors.NumberIdentifier);\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(start, Errors.InvalidNumber);\n    }\n    const hasLeadingZero =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      if (this.state.strict) {\n        this.raise(start, Errors.StrictOctalLiteral);\n      } else {\n        // disallow numeric separators in non octal decimals and legacy octal likes\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          this.raise(underscorePos + start, Errors.ZeroDigitNumericSeparator);\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !isOctal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(start, Errors.InvalidOrMissingExponent);\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || hasLeadingZero) {\n        this.raise(start, Errors.InvalidBigIntLiteral);\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === charCodes.lowercaseM) {\n      this.expectPlugin(\"decimal\", this.state.pos);\n      if (hasExponent || hasLeadingZero) {\n        this.raise(start, Errors.InvalidDecimal);\n      }\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n      throw this.raise(this.state.pos, Errors.NumberIdentifier);\n    }\n\n    // remove \"_\" for numeric literal separator, and trailing `m` or `n`\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(tt.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === charCodes.leftCurlyBrace) {\n      const codePos = ++this.state.pos;\n      code = this.readHexChar(\n        this.input.indexOf(\"}\", this.state.pos) - this.state.pos,\n        true,\n        throwOnInvalid,\n      );\n      ++this.state.pos;\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(codePos, Errors.InvalidCodePoint);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n    return code;\n  }\n\n  readString(quote: number): void {\n    let out = \"\",\n      chunkStart = ++this.state.pos;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, Errors.UnterminatedString);\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        // $FlowFixMe\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (\n        ch === charCodes.lineSeparator ||\n        ch === charCodes.paragraphSeparator\n      ) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(this.state.start, Errors.UnterminatedString);\n      } else {\n        ++this.state.pos;\n      }\n    }\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(tt.string, out);\n  }\n\n  // Reads template string tokens.\n\n  readTmplToken(): void {\n    let out = \"\",\n      chunkStart = this.state.pos,\n      containsInvalid = false;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, Errors.UnterminatedTemplate);\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (\n        ch === charCodes.graveAccent ||\n        (ch === charCodes.dollarSign &&\n          this.input.charCodeAt(this.state.pos + 1) ===\n            charCodes.leftCurlyBrace)\n      ) {\n        if (this.state.pos === this.state.start && this.match(tt.template)) {\n          if (ch === charCodes.dollarSign) {\n            this.state.pos += 2;\n            this.finishToken(tt.dollarBraceL);\n            return;\n          } else {\n            ++this.state.pos;\n            this.finishToken(tt.backQuote);\n            return;\n          }\n        }\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(tt.template, containsInvalid ? null : out);\n        return;\n      }\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n        switch (ch) {\n          case charCodes.carriageReturn:\n            if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n              ++this.state.pos;\n            }\n          // fall through\n          case charCodes.lineFeed:\n            out += \"\\n\";\n            break;\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  // Used to read escaped characters\n\n  readEscapedChar(inTemplate: boolean): string | null {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n    switch (ch) {\n      case charCodes.lowercaseN:\n        return \"\\n\";\n      case charCodes.lowercaseR:\n        return \"\\r\";\n      case charCodes.lowercaseX: {\n        const code = this.readHexChar(2, false, throwOnInvalid);\n        return code === null ? null : String.fromCharCode(code);\n      }\n      case charCodes.lowercaseU: {\n        const code = this.readCodePoint(throwOnInvalid);\n        return code === null ? null : String.fromCodePoint(code);\n      }\n      case charCodes.lowercaseT:\n        return \"\\t\";\n      case charCodes.lowercaseB:\n        return \"\\b\";\n      case charCodes.lowercaseV:\n        return \"\\u000b\";\n      case charCodes.lowercaseF:\n        return \"\\f\";\n      case charCodes.carriageReturn:\n        if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n          ++this.state.pos;\n        }\n      // fall through\n      case charCodes.lineFeed:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n      // fall through\n      case charCodes.lineSeparator:\n      case charCodes.paragraphSeparator:\n        return \"\";\n      case charCodes.digit8:\n      case charCodes.digit9:\n        if (inTemplate) {\n          return null;\n        } else if (this.state.strict) {\n          this.raise(this.state.pos - 1, Errors.StrictNumericEscape);\n        }\n      // fall through\n      default:\n        if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n          const codePos = this.state.pos - 1;\n          const match = this.input\n            .substr(this.state.pos - 1, 3)\n            .match(/^[0-7]+/);\n\n          // This is never null, because of the if condition above.\n          /*:: invariant(match !== null) */\n          let octalStr = match[0];\n\n          let octal = parseInt(octalStr, 8);\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n          if (\n            octalStr !== \"0\" ||\n            next === charCodes.digit8 ||\n            next === charCodes.digit9\n          ) {\n            if (inTemplate) {\n              return null;\n            } else if (this.state.strict) {\n              this.raise(codePos, Errors.StrictNumericEscape);\n            } else {\n              // This property is used to throw an error for\n              // an octal literal in a directive that occurs prior\n              // to a \"use strict\" directive.\n              this.state.octalPositions.push(codePos);\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  // Used to read character escape sequences ('\\x', '\\u').\n\n  readHexChar(\n    len: number,\n    forceLen: boolean,\n    throwOnInvalid: boolean,\n  ): number | null {\n    const codePos = this.state.pos;\n    const n = this.readInt(16, len, forceLen, false);\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, Errors.InvalidEscapeSequence);\n      } else {\n        this.state.pos = codePos - 1;\n      }\n    }\n    return n;\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n\n  readWord1(): string {\n    let word = \"\";\n    this.state.containsEsc = false;\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n\n    while (this.state.pos < this.length) {\n      const ch = this.input.codePointAt(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (this.state.isIterator && ch === charCodes.atSign) {\n        ++this.state.pos;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.pos;\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(this.state.pos, Errors.MissingUnicodeEscape);\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(escStart, Errors.EscapedCharNotAnIdentifier);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  isIterator(word: string): boolean {\n    return word === \"@@iterator\" || word === \"@@asyncIterator\";\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(): void {\n    const word = this.readWord1();\n    const type = keywordTypes.get(word) || tt.name;\n\n    // Allow @@iterator and @@asyncIterator as a identifier only inside type\n    if (\n      this.state.isIterator &&\n      (!this.isIterator(word) || !this.state.inType)\n    ) {\n      this.raise(this.state.pos, Errors.InvalidIdentifier, word);\n    }\n\n    this.finishToken(type, word);\n  }\n\n  checkKeywordEscapes(): void {\n    const kw = this.state.type.keyword;\n    if (kw && this.state.containsEsc) {\n      this.raise(this.state.start, Errors.InvalidEscapedReservedWord, kw);\n    }\n  }\n\n  braceIsBlock(prevType: TokenType): boolean {\n    const parent = this.curContext();\n    if (parent === ct.functionExpression || parent === ct.functionStatement) {\n      return true;\n    }\n    if (\n      prevType === tt.colon &&\n      (parent === ct.braceStatement || parent === ct.braceExpression)\n    ) {\n      return !parent.isExpr;\n    }\n\n    // The check for `tt.name && exprAllowed` detects whether we are\n    // after a `yield` or `of` construct. See the `updateContext` for\n    // `tt.name`.\n    if (\n      prevType === tt._return ||\n      (prevType === tt.name && this.state.exprAllowed)\n    ) {\n      return this.hasPrecedingLineBreak();\n    }\n\n    if (\n      prevType === tt._else ||\n      prevType === tt.semi ||\n      prevType === tt.eof ||\n      prevType === tt.parenR ||\n      prevType === tt.arrow\n    ) {\n      return true;\n    }\n\n    if (prevType === tt.braceL) {\n      return parent === ct.braceStatement;\n    }\n\n    if (\n      prevType === tt._var ||\n      prevType === tt._const ||\n      prevType === tt.name\n    ) {\n      return false;\n    }\n\n    if (prevType === tt.relational) {\n      // `class C<T> { ... }`\n      return true;\n    }\n\n    return !this.state.exprAllowed;\n  }\n\n  updateContext(prevType: TokenType): void {\n    const type = this.state.type;\n    let update;\n\n    if (type.keyword && (prevType === tt.dot || prevType === tt.questionDot)) {\n      this.state.exprAllowed = false;\n    } else if ((update = type.updateContext)) {\n      update.call(this, prevType);\n    } else {\n      this.state.exprAllowed = type.beforeExpr;\n    }\n  }\n}\n","// @flow\n\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport Tokenizer from \"../tokenizer\";\nimport State from \"../tokenizer/state\";\nimport type { Node } from \"../types\";\nimport { lineBreak } from \"../util/whitespace\";\nimport { isIdentifierChar } from \"../util/identifier\";\nimport { Errors } from \"./error\";\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node,\n  error: Error,\n  thrown: Thrown,\n  aborted: Aborted,\n  failState: FailState,\n};\n\n// ## Parser utilities\n\nexport default class UtilParser extends Tokenizer {\n  // TODO\n\n  addExtra(node: Node, key: string, val: any): void {\n    if (!node) return;\n\n    const extra = (node.extra = node.extra || {});\n    extra[key] = val;\n  }\n\n  // TODO\n\n  isRelational(op: \"<\" | \">\"): boolean {\n    return this.match(tt.relational) && this.state.value === op;\n  }\n\n  // TODO\n\n  expectRelational(op: \"<\" | \">\"): void {\n    if (this.isRelational(op)) {\n      this.next();\n    } else {\n      this.unexpected(null, tt.relational);\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(name: string): boolean {\n    return (\n      this.match(tt.name) &&\n      this.state.value === name &&\n      !this.state.containsEsc\n    );\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    return (\n      this.input.slice(nameStart, nameEnd) === name &&\n      (nameEnd === this.input.length ||\n        !isIdentifierChar(this.input.charCodeAt(nameEnd)))\n    );\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(name: string): boolean {\n    return this.isContextual(name) && this.eat(tt.name);\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(name: string, message?: string): void {\n    if (!this.eatContextual(name)) this.unexpected(null, message);\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return lineBreak.test(\n      this.input.slice(this.state.lastTokEnd, this.state.start),\n    );\n  }\n\n  // TODO\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(): void {\n    if (!this.isLineTerminator()) this.unexpected(null, tt.semi);\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, pos?: ?number): void {\n    this.eat(type) || this.unexpected(pos, type);\n  }\n\n  // Throws if the current token and the prev one are separated by a space.\n  assertNoSpace(message: string = \"Unexpected space.\"): void {\n    if (this.state.start > this.state.lastTokEnd) {\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(this.state.lastTokEnd, message);\n      /* eslint-enable @babel/development-internal/dry-error-messages */\n    }\n  }\n\n  // Raise an unexpected token error. Can take the expected token type\n  // instead of a message string.\n\n  unexpected(\n    pos: ?number,\n    messageOrType: string | TokenType = \"Unexpected token\",\n  ): empty {\n    if (typeof messageOrType !== \"string\") {\n      messageOrType = `Unexpected token, expected \"${messageOrType.label}\"`;\n    }\n    /* eslint-disable @babel/development-internal/dry-error-messages */\n    throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n    /* eslint-enable @babel/development-internal/dry-error-messages */\n  }\n\n  expectPlugin(name: string, pos?: ?number): true {\n    if (!this.hasPlugin(name)) {\n      throw this.raiseWithData(\n        pos != null ? pos : this.state.start,\n        { missingPlugin: [name] },\n        `This experimental syntax requires enabling the parser plugin: '${name}'`,\n      );\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(names: Array<string>, pos?: ?number): void {\n    if (!names.some(n => this.hasPlugin(n))) {\n      throw this.raiseWithData(\n        pos != null ? pos : this.state.start,\n        { missingPlugin: names },\n        `This experimental syntax requires enabling one of the following parser plugin(s): '${names.join(\n          \", \",\n        )}'`,\n      );\n    }\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T: Node | $ReadOnlyArray<Node>>(\n    fn: (abort: (node?: T) => empty) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, SyntaxError, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: { node: T | null } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        return {\n          node,\n          error: (failState.errors[oldState.errors.length]: SyntaxError),\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ?ExpressionErrors,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const { shorthandAssign, doubleProto } = refExpressionErrors;\n    if (!andThrow) return shorthandAssign >= 0 || doubleProto >= 0;\n    if (shorthandAssign >= 0) {\n      this.unexpected(shorthandAssign);\n    }\n    if (doubleProto >= 0) {\n      this.raise(doubleProto, Errors.DuplicateProto);\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return (\n      this.match(tt.name) ||\n      !!this.state.type.keyword ||\n      this.match(tt.string) ||\n      this.match(tt.num) ||\n      this.match(tt.bigint) ||\n      this.match(tt.decimal)\n    );\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track\n * - **shorthandAssign**: track initializer `=` position when parsing ambiguous\n *   patterns. When we are sure the parsed pattern is a RHS, which means it is\n *   not a pattern, we will throw on this position on invalid assign syntax,\n *   otherwise it will be reset to -1\n * - **doubleProto**: track the duplicate `__proto__` key position when parsing\n *   ambiguous object patterns. When we are sure the parsed pattern is a RHS,\n *   which means it is an object literal, we will throw on this position for\n *   __proto__ redefinition, otherwise it will be reset to -1\n */\nexport class ExpressionErrors {\n  shorthandAssign = -1;\n  doubleProto = -1;\n}\n","// @flow\n\nimport type Parser from \"./index\";\nimport UtilParser from \"./util\";\nimport { SourceLocation, type Position } from \"../util/location\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: Parser, pos: number, loc: Position) {\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.options.ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string;\n  start: number;\n  end: number;\n  loc: SourceLocation;\n  range: [number, number];\n  leadingComments: Array<Comment>;\n  trailingComments: Array<Comment>;\n  innerComments: Array<Comment>;\n  extra: { [key: string]: any };\n\n  __clone(): this {\n    // $FlowIgnore\n    const newNode: any = new Node();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        // $FlowIgnore\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  }\n}\n\nexport class NodeUtils extends UtilParser {\n  startNode<T: NodeType>(): T {\n    // $FlowIgnore\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt<T: NodeType>(pos: number, loc: Position): T {\n    // $FlowIgnore\n    return new Node(this, pos, loc);\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T: NodeType>(type: NodeType): T {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T: NodeType>(node: T, type: string): T {\n    return this.finishNodeAt(\n      node,\n      type,\n      this.state.lastTokEnd,\n      this.state.lastTokEndLoc,\n    );\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T: NodeType>(\n    node: T,\n    type: string,\n    pos: number,\n    loc: Position,\n  ): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    node.type = type;\n    node.end = pos;\n    node.loc.end = loc;\n    if (this.options.ranges) node.range[1] = pos;\n    this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node: NodeBase, start: number, startLoc: Position): void {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    end?: number = this.state.lastTokEnd,\n    endLoc?: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = end;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = end;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n}\n","// @flow\n\nimport * as charCodes from \"charcodes\";\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport type {\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  /*:: Identifier, */\n  /*:: ObjectExpression, */\n  /*:: ObjectPattern, */\n} from \"../types\";\nimport type { Pos, Position } from \"../util/location\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier\";\nimport { NodeUtils } from \"./node\";\nimport { type BindingTypes, BIND_NONE } from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { Errors } from \"./error\";\n\nconst unwrapParenthesizedExpression = (node: Node) => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport default class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  /*::\n  +parseIdentifier: (liberal?: boolean) => Identifier;\n  +parseMaybeAssignAllowIn: (\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: ?Pos,\n  ) => Expression;\n  +parseObjectLike: <T: ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ) => T;\n  */\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseDecorator: () => Decorator;\n  */\n\n  // Convert existing expression atom to assignable pattern\n  // if possible.\n  // NOTE: There is a corresponding \"isAssignable\" method in flow.js.\n  // When this one is updated, please check if also that one needs to be updated.\n\n  toAssignable(node: Node): Node {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (\n        parenthesized.type !== \"Identifier\" &&\n        parenthesized.type !== \"MemberExpression\"\n      ) {\n        this.raise(node.start, Errors.InvalidParenthesizedAssignment);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast);\n\n          if (\n            isLast &&\n            prop.type === \"RestElement\" &&\n            node.extra?.trailingComma\n          ) {\n            this.raiseRestNotLast(node.extra.trailingComma);\n          }\n        }\n        break;\n\n      case \"ObjectProperty\":\n        this.toAssignable(node.value);\n        break;\n\n      case \"SpreadElement\": {\n        this.checkToRestConversion(node);\n\n        node.type = \"RestElement\";\n        const arg = node.argument;\n        this.toAssignable(arg);\n        break;\n      }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, node.extra?.trailingComma);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(node.left.end, Errors.MissingEqInAssignment);\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.toAssignable(((parenthesized: any): Expression));\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(prop: Node, isLast: boolean) {\n    if (prop.type === \"ObjectMethod\") {\n      const error =\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod;\n\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(prop.key.start, error);\n      /* eslint-enable @babel/development-internal/dry-error-messages */\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raiseRestNotLast(prop.start);\n    } else {\n      this.toAssignable(prop);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: Expression[],\n    trailingCommaPos?: ?number,\n  ): $ReadOnlyArray<Pattern> {\n    let end = exprList.length;\n    if (end) {\n      const last = exprList[end - 1];\n      if (last?.type === \"RestElement\") {\n        --end;\n      } else if (last?.type === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        const arg = last.argument;\n        this.toAssignable(arg);\n        if (\n          arg.type !== \"Identifier\" &&\n          arg.type !== \"MemberExpression\" &&\n          arg.type !== \"ArrayPattern\" &&\n          arg.type !== \"ObjectPattern\"\n        ) {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaPos) {\n          this.raiseTrailingCommaAfterRest(trailingCommaPos);\n        }\n\n        --end;\n      }\n    }\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n      if (elt) {\n        this.toAssignable(elt);\n        if (elt.type === \"RestElement\") {\n          this.raiseRestNotLast(elt.start);\n        }\n      }\n    }\n    return exprList;\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean, // eslint-disable-line no-unused-vars\n  ): $ReadOnlyArray<?Expression> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    refExpressionErrors: ?ExpressionErrors,\n    refNeedsArrowPos?: ?Pos,\n  ): SpreadElement {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(\n      refExpressionErrors,\n      undefined,\n      refNeedsArrowPos,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  // https://tc39.es/ecma262/#prod-BindingRestElement\n  parseRestBinding(): RestElement {\n    const node = this.startNode();\n    this.next(); // eat `...`\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(): Pattern {\n    // https://tc39.es/ecma262/#prod-BindingPattern\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode();\n        this.next();\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          true,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObjectLike(tt.braceR, true);\n    }\n\n    // https://tc39.es/ecma262/#prod-BindingIdentifier\n    return this.parseIdentifier();\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElementList\n  parseBindingList(\n    close: TokenType,\n    closeCharCode: $Values<typeof charCodes>,\n    allowEmpty?: boolean,\n    allowModifiers?: boolean,\n  ): $ReadOnlyArray<Pattern | TSParameterProperty> {\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        // $FlowFixMe This method returns `$ReadOnlyArray<?Pattern>` if `allowEmpty` is set.\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        this.checkCommaAfterRest(closeCharCode);\n        this.expect(close);\n        break;\n      } else {\n        const decorators = [];\n        if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, Errors.UnsupportedParameterDecorator);\n        }\n        // invariant: hasPlugin(\"decorators-legacy\")\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n    return elts;\n  }\n\n  parseAssignableListItem(\n    allowModifiers: ?boolean,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  // Used by flow/typescript plugin to add type annotations to binding elements\n  parseAssignableListItemTypes(param: Pattern): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseMaybeDefault(\n    startPos?: ?number,\n    startLoc?: ?Position,\n    left?: ?Pattern,\n  ): Pattern {\n    startLoc = startLoc ?? this.state.startLoc;\n    startPos = startPos ?? this.state.start;\n    // $FlowIgnore\n    left = left ?? this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  // Verify that a node is an lval — something that can be assigned\n  // to.\n\n  checkLVal(\n    expr: Expression,\n    bindingType: BindingTypes = BIND_NONE,\n    checkClashes: ?{ [key: string]: boolean },\n    contextDescription: string,\n    disallowLetBinding?: boolean,\n    strictModeChanged?: boolean = false,\n  ): void {\n    switch (expr.type) {\n      case \"Identifier\":\n        if (\n          this.state.strict &&\n          // \"Global\" reserved words have already been checked by parseIdentifier,\n          // unless they have been found in the id or parameters of a strict-mode\n          // function in a sloppy context.\n          (strictModeChanged\n            ? isStrictBindReservedWord(expr.name, this.inModule)\n            : isStrictBindOnlyReservedWord(expr.name))\n        ) {\n          this.raise(\n            expr.start,\n            bindingType === BIND_NONE\n              ? Errors.StrictEvalArguments\n              : Errors.StrictEvalArgumentsBinding,\n            expr.name,\n          );\n        }\n\n        if (checkClashes) {\n          // we need to prefix this with an underscore for the cases where we have a key of\n          // `__proto__`. there's a bug in old V8 where the following wouldn't work:\n          //\n          //   > var obj = Object.create(null);\n          //   undefined\n          //   > obj.__proto__\n          //   null\n          //   > obj.__proto__ = true;\n          //   true\n          //   > obj.__proto__\n          //   null\n          const key = `_${expr.name}`;\n\n          if (checkClashes[key]) {\n            this.raise(expr.start, Errors.ParamDupe);\n          } else {\n            checkClashes[key] = true;\n          }\n        }\n        if (disallowLetBinding && expr.name === \"let\") {\n          this.raise(expr.start, Errors.LetInLexicalBinding);\n        }\n        if (!(bindingType & BIND_NONE)) {\n          this.scope.declareName(expr.name, bindingType, expr.start);\n        }\n        break;\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(expr.start, Errors.InvalidPropertyBindingPattern);\n        }\n        break;\n\n      case \"ObjectPattern\":\n        for (let prop of expr.properties) {\n          if (prop.type === \"ObjectProperty\") prop = prop.value;\n          // If we find here an ObjectMethod, it's because this was originally\n          // an ObjectExpression which has then been converted.\n          // toAssignable already reported this error with a nicer message.\n          else if (prop.type === \"ObjectMethod\") continue;\n\n          this.checkLVal(\n            prop,\n            bindingType,\n            checkClashes,\n            \"object destructuring pattern\",\n            disallowLetBinding,\n          );\n        }\n        break;\n\n      case \"ArrayPattern\":\n        for (const elem of expr.elements) {\n          if (elem) {\n            this.checkLVal(\n              elem,\n              bindingType,\n              checkClashes,\n              \"array destructuring pattern\",\n              disallowLetBinding,\n            );\n          }\n        }\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(\n          expr.left,\n          bindingType,\n          checkClashes,\n          \"assignment pattern\",\n        );\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(\n          expr.argument,\n          bindingType,\n          checkClashes,\n          \"rest element\",\n        );\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(\n          expr.expression,\n          bindingType,\n          checkClashes,\n          \"parenthesized expression\",\n        );\n        break;\n\n      default: {\n        this.raise(\n          expr.start,\n          bindingType === BIND_NONE\n            ? Errors.InvalidLhs\n            : Errors.InvalidLhsBinding,\n          contextDescription,\n        );\n      }\n    }\n  }\n\n  checkToRestConversion(node: SpreadElement): void {\n    if (\n      node.argument.type !== \"Identifier\" &&\n      node.argument.type !== \"MemberExpression\"\n    ) {\n      this.raise(node.argument.start, Errors.InvalidRestAssignmentPattern);\n    }\n  }\n\n  checkCommaAfterRest(close: $Values<typeof charCodes>): void {\n    if (this.match(tt.comma)) {\n      if (this.lookaheadCharCode() === close) {\n        this.raiseTrailingCommaAfterRest(this.state.start);\n      } else {\n        this.raiseRestNotLast(this.state.start);\n      }\n    }\n  }\n\n  raiseRestNotLast(pos: number) {\n    throw this.raise(pos, Errors.ElementAfterRest);\n  }\n\n  raiseTrailingCommaAfterRest(pos: number) {\n    this.raise(pos, Errors.RestTrailingComma);\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\n/**\n * @module util/expression-scope\n\nExpressionScope is used to track declaration errors in these ambiguous patterns:\n\n- CoverParenthesizedExpressionAndArrowParameterList\n  e.g. we don't know if `({ x })` is an parenthesized expression or an\n  arrow function parameters until we see an `=>` after `)`.\n\n- CoverCallExpressionAndAsyncArrowHead\n   e.g. we don't know if `async({ x })` is a call expression or an async arrow\n   function parameters until we see an `=>` after `)`\n\nThe following declaration errors (@see parser/error-message) will be recorded in\nsome expression scopes and thrown later when we know what the ambigous pattern is\n\n- AwaitBindingIdentifier\n- AwaitExpressionFormalParameter\n- YieldInParameter\n\nThere are four different expression scope\n- Expression\n  A general scope that represents program / function body / static block. No errors\n  will be recorded nor thrown in this scope.\n\n- MaybeArrowParameterDeclaration\n  A scope that represents ambiguous arrow head e.g. `(x)`. Errors will be recorded\n  alongside parent scopes and thrown when `ExpressionScopeHandler#validateAsPattern`\n  is called.\n\n- MaybeAsyncArrowParameterDeclaration\n  A scope that represents ambiguous async arrow head e.g. `async(x)`. Errors will\n  be recorded alongside parent scopes and thrown when\n  `ExpressionScopeHandler#validateAsPattern` is called.\n\n- ParameterDeclaration\n  A scope that represents unambiguous function parameters `function(x)`. Errors\n  recorded in this scope will be thrown immediately. No errors will be recorded in\n  this scope.\n\n// @see {@link https://docs.google.com/document/d/1FAvEp9EUK-G8kHfDIEo_385Hs2SUBCYbJ5H-NnLvq8M|V8 Expression Scope design docs}\n */\n\nconst kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3;\n\ntype ExpressionScopeType = 0 | 1 | 2 | 3;\n\ntype raiseFunction = (number, string, ...any) => void;\n\nclass ExpressionScope {\n  type: ExpressionScopeType;\n\n  constructor(type: ExpressionScopeType = kExpression) {\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration() {\n    return (\n      this.type === kMaybeAsyncArrowParameterDeclaration ||\n      this.type === kMaybeArrowParameterDeclaration\n    );\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n}\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  errors: Map</* pos */ number, /* message */ string> = new Map();\n  constructor(type: 1 | 2) {\n    super(type);\n  }\n  recordDeclarationError(pos: number, message: string) {\n    this.errors.set(pos, message);\n  }\n  clearDeclarationError(pos: number) {\n    this.errors.delete(pos);\n  }\n  iterateErrors(iterator: (message: string, pos: number) => void) {\n    this.errors.forEach(iterator);\n  }\n}\n\nexport default class ExpressionScopeHandler {\n  stack: Array<ExpressionScope> = [new ExpressionScope()];\n  declare raise: raiseFunction;\n  constructor(raise: raiseFunction) {\n    this.raise = raise;\n  }\n  enter(scope: ExpressionScope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  /**\n   * Record likely parameter initializer errors\n   *\n   * When current scope is a ParameterDeclaration, the error will be thrown immediately,\n   * otherwise it will be recorded to any ancestry MaybeArrowParameterDeclaration and\n   * MaybeAsyncArrowParameterDeclaration scope until an Expression scope is seen.\n   * @param {number} pos Error position\n   * @param {string} message Error message\n   * @memberof ExpressionScopeHandler\n   */\n  recordParameterInitializerError(pos: number, message: string): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.recordDeclarationError(pos, message);\n      } else {\n        /*:: invariant(scope.type == kExpression) */\n        // Type-Expression is the boundary where initializer error can populate to\n        return;\n      }\n      scope = stack[--i];\n    }\n    /* eslint-disable @babel/development-internal/dry-error-messages */\n    this.raise(pos, message);\n  }\n  /**\n   * Record likely async arrow parameter errors\n   *\n   * Errors will be recorded to any ancestry MaybeAsyncArrowParameterDeclaration\n   * scope until an Expression scope is seen.\n   * @param {number} pos\n   * @param {string} message\n   * @memberof ExpressionScopeHandler\n   */\n  recordAsyncArrowParametersError(pos: number, message: string): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.recordDeclarationError(pos, message);\n      }\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern(): void {\n    const { stack } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    /*:: invariant(currentScope instanceof ArrowHeadParsingScope) */\n    currentScope.iterateErrors((message, pos) => {\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(pos, message);\n      // iterate from parent scope\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.clearDeclarationError(pos);\n        scope = stack[--i];\n      }\n    });\n  }\n}\n\nexport function newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nexport function newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nexport function newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nexport function newExpressionScope() {\n  return new ExpressionScope();\n}\n","// @flow\n\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport { types as ct } from \"../tokenizer/context\";\nimport * as N from \"../types\";\nimport LValParser from \"./lval\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n} from \"../util/identifier\";\nimport type { Pos, Position } from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_OUTSIDE,\n  BIND_VAR,\n  SCOPE_ARROW,\n  SCOPE_CLASS,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport {\n  PARAM_AWAIT,\n  PARAM_IN,\n  PARAM_RETURN,\n  PARAM,\n  functionFlags,\n} from \"../util/production-parameter\";\nimport {\n  newArrowHeadScope,\n  newAsyncArrowScope,\n  newExpressionScope,\n} from \"../util/expression-scope.js\";\nimport { Errors } from \"./error\";\n\nexport default class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseBlock: (\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ) => N.BlockStatement;\n  +parseClass: (\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ) => N.Class;\n  +parseDecorators: (allowExport?: boolean) => void;\n  +parseFunction: <T: N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ) => T;\n  +parseFunctionParams: (node: N.Function, allowModifiers?: boolean) => void;\n  +takeDecorators: (node: N.HasDecorators) => void;\n  */\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: boolean,\n    protoRef: { used: boolean },\n    refExpressionErrors: ?ExpressionErrors,\n  ): void {\n    if (\n      prop.type === \"SpreadElement\" ||\n      prop.type === \"ObjectMethod\" ||\n      prop.computed ||\n      prop.shorthand\n    ) {\n      return;\n    }\n\n    const key = prop.key;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(key.start, Errors.RecordNoProto);\n        return;\n      }\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProto === -1) {\n            refExpressionErrors.doubleProto = key.start;\n          }\n        } else {\n          this.raise(key.start, Errors.DuplicateProto);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr: N.Expression, potentialArrowAt: number): boolean {\n    return (\n      expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt\n    );\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(): N.Expression {\n    let paramFlags = PARAM;\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `disallowIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `disallowIn` is true, the production parameter [In] is not present.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    disallowIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    if (disallowIn) {\n      return this.disallowInAnd(() =>\n        this.parseExpressionBase(refExpressionErrors),\n      );\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  // https://tc39.es/ecma262/#prod-Expression\n  parseExpressionBase(refExpressionErrors?: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Set [~In] parameter for assignment expression\n  parseMaybeAssignDisallowIn(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: ?Pos,\n  ) {\n    return this.disallowInAnd(() =>\n      this.parseMaybeAssign(\n        refExpressionErrors,\n        afterLeftParse,\n        refNeedsArrowPos,\n      ),\n    );\n  }\n\n  // Set [+In] parameter for assignment expression\n  parseMaybeAssignAllowIn(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: ?Pos,\n  ) {\n    return this.allowInAnd(() =>\n      this.parseMaybeAssign(\n        refExpressionErrors,\n        afterLeftParse,\n        refNeedsArrowPos,\n      ),\n    );\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n\n  // https://tc39.es/ecma262/#prod-AssignmentExpression\n  parseMaybeAssign(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: ?Pos,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(\"yield\")) {\n      if (this.prodParam.hasYield) {\n        // If we have [Yield] production, `yield` will start a YieldExpression thus\n        // regex is allowed following. Otherwise `yield` is an identifier and regex\n        // is disallowed in tt.name.updateContext\n        this.state.exprAllowed = true;\n        let left = this.parseYield();\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n\n    if (this.match(tt.parenL) || this.match(tt.name)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(\n      refExpressionErrors,\n      refNeedsArrowPos,\n    );\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n    if (this.state.type.isAssign) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(tt.eq)) {\n        node.left = this.toAssignable(left);\n        refExpressionErrors.doubleProto = -1; // reset because double __proto__ is valid in assignment expression\n      } else {\n        node.left = left;\n      }\n\n      if (refExpressionErrors.shorthandAssign >= node.left.start) {\n        refExpressionErrors.shorthandAssign = -1; // reset because shorthand default was used correctly\n      }\n\n      this.checkLVal(left, undefined, undefined, \"assignment expression\");\n\n      this.next();\n      node.right = this.parseMaybeAssign();\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n  // https://tc39.es/ecma262/#prod-ConditionalExpression\n\n  parseMaybeConditional(\n    refExpressionErrors: ExpressionErrors,\n    refNeedsArrowPos?: ?Pos,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refNeedsArrowPos);\n  }\n\n  parseConditional(\n    expr: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    // FIXME: Disabling this for now since can't seem to get it to play nicely\n    // eslint-disable-next-line no-unused-vars\n    refNeedsArrowPos?: ?Pos,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  // Start the precedence parser.\n  // https://tc39.es/ecma262/#prod-ShortCircuitExpression\n\n  parseExprOps(refExpressionErrors: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnary(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    left: N.Expression,\n    leftStartPos: number,\n    leftStartLoc: Position,\n    minPrec: number,\n  ): N.Expression {\n    let prec = this.state.type.binop;\n    if (prec != null && (this.prodParam.hasIn || !this.match(tt._in))) {\n      if (prec > minPrec) {\n        const op = this.state.type;\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n          this.state.inPipeline = true;\n          this.checkPipelineAtInfixOperator(left, leftStartPos);\n        }\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n        if (\n          op === tt.exponent &&\n          left.type === \"UnaryExpression\" &&\n          (this.options.createParenthesizedExpressions ||\n            !(left.extra && left.extra.parenthesized))\n        ) {\n          this.raise(\n            left.argument.start,\n            Errors.UnexpectedTokenUnaryExponentiation,\n          );\n        }\n\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = ((tt.logicalAND: any): { binop: number }).binop;\n        }\n\n        this.next();\n\n        if (\n          op === tt.pipeline &&\n          this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"minimal\"\n        ) {\n          if (\n            this.match(tt.name) &&\n            this.state.value === \"await\" &&\n            this.prodParam.hasAwait\n          ) {\n            throw this.raise(\n              this.state.start,\n              Errors.UnexpectedAwaitAfterPipelineBody,\n            );\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(this.state.start, Errors.MixingCoalesceWithLogical);\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n    return left;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(op: TokenType, prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"smart\":\n            return this.withTopicPermittingContext(() => {\n              return this.parseSmartPipelineBody(\n                this.parseExprOpBaseRightExpr(op, prec),\n                startPos,\n                startLoc,\n              );\n            });\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n      // falls through\n\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(op: TokenType, prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnary(),\n      startPos,\n      startLoc,\n      op.rightAssociative ? prec - 1 : prec,\n    );\n  }\n\n  // Parse unary operators, both prefix and postfix.\n  // https://tc39.es/ecma262/#prod-UnaryExpression\n  parseMaybeUnary(refExpressionErrors: ?ExpressionErrors): N.Expression {\n    if (this.isContextual(\"await\") && this.isAwaitAllowed()) {\n      return this.parseAwait();\n    }\n    const update = this.match(tt.incDec);\n    const node = this.startNode();\n    if (this.state.type.prefix) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(tt._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(tt._delete);\n      this.next();\n\n      node.argument = this.parseMaybeUnary();\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(node.start, Errors.StrictDelete);\n        } else if (\n          (arg.type === \"MemberExpression\" ||\n            arg.type === \"OptionalMemberExpression\") &&\n          arg.property.type === \"PrivateName\"\n        ) {\n          this.raise(node.start, Errors.DeletePrivateField);\n        }\n      }\n\n      if (!update) {\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    return this.parseUpdate(node, update, refExpressionErrors);\n  }\n\n  // https://tc39.es/ecma262/#prod-UpdateExpression\n  parseUpdate(\n    node: N.Expression,\n    update: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): N.Expression {\n    if (update) {\n      this.checkLVal(node.argument, undefined, undefined, \"prefix operation\");\n      return this.finishNode(node, \"UpdateExpression\");\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (this.state.type.postfix && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, undefined, undefined, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n  // https://tc39.es/ecma262/#prod-LeftHandSideExpression\n  parseExprSubscripts(refExpressionErrors: ?ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls?: ?boolean,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    if (!noCalls && this.eat(tt.doubleColon)) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (this.match(tt.backQuote)) {\n      return this.parseTaggedTemplateExpression(\n        base,\n        startPos,\n        startLoc,\n        state,\n      );\n    }\n\n    let optional = false;\n    if (this.match(tt.questionDot)) {\n      state.optionalChainMember = optional = true;\n      if (noCalls && this.lookaheadCharCode() === charCodes.leftParenthesis) {\n        // stop at `?.` when parsing `new a?.()`\n        state.stop = true;\n        return base;\n      }\n      this.next();\n    }\n\n    if (!noCalls && this.match(tt.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(\n        base,\n        startPos,\n        startLoc,\n        state,\n        optional,\n      );\n    } else if (optional || this.match(tt.bracketL) || this.eat(tt.dot)) {\n      return this.parseMember(base, startPos, startLoc, state, optional);\n    } else {\n      state.stop = true;\n      return base;\n    }\n  }\n\n  // base[?Yield, ?Await] [ Expression[+In, ?Yield, ?Await] ]\n  // base[?Yield, ?Await] . IdentifierName\n  // base[?Yield, ?Await] . PrivateIdentifier\n  //   where `base` is one of CallExpression, MemberExpression and OptionalChain\n  parseMember(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.OptionalMemberExpression | N.MemberExpression {\n    const node = this.startNodeAt(startPos, startLoc);\n    const computed = this.eat(tt.bracketL);\n    node.object = base;\n    node.computed = computed;\n    const property = computed\n      ? this.parseExpression()\n      : this.parseMaybePrivateName(true);\n\n    if (property.type === \"PrivateName\") {\n      if (node.object.type === \"Super\") {\n        this.raise(startPos, Errors.SuperPrivateField);\n      }\n      this.classScope.usePrivateName(property.id.name, property.start);\n    }\n    node.property = property;\n\n    if (computed) {\n      this.expect(tt.bracketR);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  // https://github.com/tc39/proposal-bind-operator#syntax\n  parseBind(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(\n      this.finishNode(node, \"BindExpression\"),\n      startPos,\n      startLoc,\n      noCalls,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\n  // CoverCallExpressionAndAsyncArrowHead\n  // CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]\n  // OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\n  parseCoverCallAndAsyncArrowHead(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.Expression {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = true;\n\n    this.next(); // eat `(`\n\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n    if (state.maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n    }\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(\n        tt.parenR,\n        state.maybeAsyncArrow,\n        base.type === \"Import\",\n        base.type !== \"Super\",\n        node,\n      );\n    }\n    this.finishCallExpression(node, state.optionalChainMember);\n\n    if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      state.stop = true;\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      node = this.parseAsyncArrowFromCallExpression(\n        this.startNodeAt(startPos, startLoc),\n        node,\n      );\n    } else {\n      if (state.maybeAsyncArrow) {\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return node;\n  }\n\n  toReferencedArguments(\n    node: N.CallExpression | N.OptionalCallExpression,\n    isParenthesizedExpr?: boolean,\n  ) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  // MemberExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  // CallExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  parseTaggedTemplateExpression(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n  ): N.TaggedTemplateExpression {\n    const node: N.TaggedTemplateExpression = this.startNodeAt(\n      startPos,\n      startLoc,\n    );\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(startPos, Errors.OptionalChainingNoTemplate);\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEnd === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      base.start === this.state.potentialArrowAt\n    );\n  }\n\n  finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n    node: T,\n    optional: boolean,\n  ): N.Expression {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        // todo(Babel 8): remove the if condition,\n        // moduleAttributes is renamed to importAssertions\n        if (!this.hasPlugin(\"moduleAttributes\")) {\n          this.expectPlugin(\"importAssertions\");\n        }\n      }\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(\n          node.start,\n          Errors.ImportCallArity,\n          this.hasPlugin(\"importAssertions\") ||\n            this.hasPlugin(\"moduleAttributes\")\n            ? \"one or two arguments\"\n            : \"one argument\",\n        );\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(arg.start, Errors.ImportCallSpreadArgument);\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    close: TokenType,\n    possibleAsyncArrow: boolean,\n    dynamicImport?: boolean,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: ?N.Node,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let innerParenStart;\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (\n            dynamicImport &&\n            !this.hasPlugin(\"importAssertions\") &&\n            !this.hasPlugin(\"moduleAttributes\")\n          ) {\n            this.raise(\n              this.state.lastTokStart,\n              Errors.ImportCallArgumentTrailingComma,\n            );\n          }\n          if (nodeForExtra) {\n            this.addExtra(\n              nodeForExtra,\n              \"trailingComma\",\n              this.state.lastTokStart,\n            );\n          }\n          this.next();\n          break;\n        }\n      }\n\n      // we need to make sure that if this is an async arrow functions,\n      // that we don't allow inner parens inside the params\n      if (this.match(tt.parenL) && !innerParenStart) {\n        innerParenStart = this.state.start;\n      }\n\n      elts.push(\n        this.parseExprListItem(\n          false,\n          possibleAsyncArrow ? new ExpressionErrors() : undefined,\n          possibleAsyncArrow ? { start: 0 } : undefined,\n          allowPlaceholder,\n        ),\n      );\n    }\n\n    // we found an async arrow function so let's not allow any inner parens\n    if (possibleAsyncArrow && innerParenStart && this.shouldParseAsyncArrow()) {\n      this.unexpected();\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    node: N.ArrowFunctionExpression,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingComma,\n    );\n    return node;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n  // https://tc39.es/ecma262/#prod-MemberExpression\n  parseNoCallExpr(): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  // https://tc39.es/ecma262/#prod-PrimaryExpression\n  // https://tc39.es/ecma262/#prod-AsyncArrowFunction\n  // PrimaryExpression\n  // Super\n  // Import\n  // AsyncArrowFunction\n\n  parseExprAtom(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n    // If a division operator appears in an expression position, the\n    // tokenizer got confused, and we force it to read a regexp instead.\n    if (this.state.type === tt.slash) this.readRegexp();\n\n    const canBeArrow = this.state.potentialArrowAt === this.state.start;\n    let node;\n\n    switch (this.state.type) {\n      case tt._super:\n        return this.parseSuper();\n\n      case tt._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(tt.parenL)) {\n          this.raise(this.state.lastTokStart, Errors.UnsupportedImport);\n        }\n        return this.finishNode(node, \"Import\");\n      case tt._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt.name: {\n        const containsEsc = this.state.containsEsc;\n        const id = this.parseIdentifier();\n\n        if (!containsEsc && id.name === \"async\" && !this.canInsertSemicolon()) {\n          if (this.match(tt._function)) {\n            const last = this.state.context.length - 1;\n            if (this.state.context[last] !== ct.functionStatement) {\n              // Since \"async\" is an identifier and normally identifiers\n              // can't be followed by expression, the tokenizer assumes\n              // that \"function\" starts a statement.\n              // Fixing it in the tokenizer would mean tracking not only the\n              // previous token (\"async\"), but also the one before to know\n              // its beforeExpr value.\n              // It's easier and more efficient to adjust the context here.\n              throw new Error(\"Internal error\");\n            }\n            this.state.context[last] = ct.functionExpression;\n\n            this.next();\n            return this.parseFunction(\n              this.startNodeAtNode(id),\n              undefined,\n              true,\n            );\n          } else if (this.match(tt.name)) {\n            return this.parseAsyncArrowUnaryFunction(id);\n          }\n        }\n\n        if (canBeArrow && this.match(tt.arrow) && !this.canInsertSemicolon()) {\n          this.next();\n          return this.parseArrowExpression(\n            this.startNodeAtNode(id),\n            [id],\n            false,\n          );\n        }\n\n        return id;\n      }\n\n      case tt._do: {\n        return this.parseDo();\n      }\n\n      case tt.regexp: {\n        const value = this.state.value;\n        node = this.parseLiteral(value.value, \"RegExpLiteral\");\n        node.pattern = value.pattern;\n        node.flags = value.flags;\n        return node;\n      }\n\n      case tt.num:\n        return this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n      case tt.bigint:\n        return this.parseLiteral(this.state.value, \"BigIntLiteral\");\n\n      case tt.decimal:\n        return this.parseLiteral(this.state.value, \"DecimalLiteral\");\n\n      case tt.string:\n        return this.parseLiteral(this.state.value, \"StringLiteral\");\n\n      case tt._null:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"NullLiteral\");\n\n      case tt._true:\n      case tt._false:\n        return this.parseBooleanLiteral();\n\n      case tt.parenL:\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n\n      case tt.bracketBarL:\n      case tt.bracketHashL: {\n        return this.parseArrayLike(\n          this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR,\n          /* canBePattern */ false,\n          /* isTuple */ true,\n          refExpressionErrors,\n        );\n      }\n      case tt.bracketL: {\n        return this.parseArrayLike(\n          tt.bracketR,\n          /* canBePattern */ true,\n          /* isTuple */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceBarL:\n      case tt.braceHashL: {\n        return this.parseObjectLike(\n          this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ true,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceL: {\n        return this.parseObjectLike(\n          tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case tt.at:\n        this.parseDecorators();\n      // fall through\n      case tt._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case tt._new:\n        return this.parseNewOrNewTarget();\n\n      case tt.backQuote:\n        return this.parseTemplate(false);\n\n      // BindExpression[Yield]\n      //   :: MemberExpression[?Yield]\n      case tt.doubleColon: {\n        node = this.startNode();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(callee.start, Errors.UnsupportedBind);\n        }\n      }\n\n      case tt.hash: {\n        if (this.state.inPipeline) {\n          node = this.startNode();\n\n          if (\n            this.getPluginOption(\"pipelineOperator\", \"proposal\") !== \"smart\"\n          ) {\n            this.raise(node.start, Errors.PrimaryTopicRequiresSmartPipeline);\n          }\n\n          this.next();\n\n          if (!this.primaryTopicReferenceIsAllowedInCurrentTopicContext()) {\n            this.raise(node.start, Errors.PrimaryTopicNotAllowed);\n          }\n\n          this.registerTopicReference();\n          return this.finishNode(node, \"PipelinePrimaryTopicReference\");\n        }\n\n        // https://tc39.es/proposal-private-fields-in-in\n        // RelationalExpression [In, Yield, Await]\n        //   [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]\n        const nextCh = this.input.codePointAt(this.state.end);\n        if (isIdentifierStart(nextCh) || nextCh === charCodes.backslash) {\n          const start = this.state.start;\n          // $FlowIgnore It'll either parse a PrivateName or throw.\n          node = (this.parseMaybePrivateName(true): N.PrivateName);\n          if (this.match(tt._in)) {\n            this.expectPlugin(\"privateIn\");\n            this.classScope.usePrivateName(node.id.name, node.start);\n          } else if (this.hasPlugin(\"privateIn\")) {\n            this.raise(\n              this.state.start,\n              Errors.PrivateInExpectedIn,\n              node.id.name,\n            );\n          } else {\n            throw this.unexpected(start);\n          }\n          return node;\n        }\n      }\n      // fall through\n      case tt.relational: {\n        if (this.state.value === \"<\") {\n          const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n          if (\n            isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n            lookaheadCh === charCodes.greaterThan // Fragment <>\n          ) {\n            this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n          }\n        }\n      }\n      // fall through\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  // async [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\n  parseAsyncArrowUnaryFunction(id: N.Expression): N.ArrowFunctionExpression {\n    const node = this.startNodeAtNode(id);\n    // We don't need to push a new ParameterDeclarationScope here since we are sure\n    // 1) it is an async arrow, 2) no biding pattern is allowed in params\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.pos, Errors.LineTerminatorBeforeArrow);\n    }\n    this.expect(tt.arrow);\n    // let foo = async bar => {};\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  // https://github.com/tc39/proposal-do-expressions\n  parseDo(): N.DoExpression {\n    this.expectPlugin(\"doExpressions\");\n    const node = this.startNode();\n    this.next(); // eat `do`\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    node.body = this.parseBlock();\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  // Parse the `super` keyword\n  parseSuper(): N.Super {\n    const node = this.startNode();\n    this.next(); // eat `super`\n    if (\n      this.match(tt.parenL) &&\n      !this.scope.allowDirectSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(node.start, Errors.SuperNotAllowed);\n    } else if (\n      !this.scope.allowSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(node.start, Errors.UnexpectedSuper);\n    }\n\n    if (\n      !this.match(tt.parenL) &&\n      !this.match(tt.bracketL) &&\n      !this.match(tt.dot)\n    ) {\n      this.raise(node.start, Errors.UnsupportedSuper);\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parseBooleanLiteral(): N.BooleanLiteral {\n    const node = this.startNode();\n    node.value = this.match(tt._true);\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseMaybePrivateName(\n    isPrivateNameAllowed: boolean,\n  ): N.PrivateName | N.Identifier {\n    const isPrivate = this.match(tt.hash);\n\n    if (isPrivate) {\n      this.expectOnePlugin([\"classPrivateProperties\", \"classPrivateMethods\"]);\n      if (!isPrivateNameAllowed) {\n        this.raise(this.state.pos, Errors.UnexpectedPrivateField);\n      }\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space between # and identifier\");\n      node.id = this.parseIdentifier(true);\n      return this.finishNode(node, \"PrivateName\");\n    } else {\n      return this.parseIdentifier(true);\n    }\n  }\n\n  parseFunctionOrFunctionSent(): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode();\n\n    // We do not do parseIdentifier here because when parseFunctionOrFunctionSent\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    this.next(); // eat `function`\n\n    if (this.prodParam.hasYield && this.match(tt.dot)) {\n      const meta = this.createIdentifier(\n        this.startNodeAtNode(node),\n        \"function\",\n      );\n      this.next(); // eat `.`\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(\n    node: N.MetaProperty,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    if (meta.name === \"function\" && propertyName === \"sent\") {\n      // https://github.com/tc39/proposal-function.sent#syntax-1\n      if (this.isContextual(propertyName)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n    }\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(\n        node.property.start,\n        Errors.UnsupportedMetaProperty,\n        meta.name,\n        propertyName,\n      );\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportMeta\n  parseImportMetaProperty(node: N.MetaProperty): N.MetaProperty {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next(); // eat `.`\n\n    if (this.isContextual(\"meta\")) {\n      if (!this.inModule) {\n        this.raiseWithData(\n          id.start,\n          { code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\" },\n          Errors.ImportMetaOutsideModule,\n        );\n      }\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteral<T: N.Literal>(\n    value: any,\n    type: /*T[\"kind\"]*/ string,\n    startPos?: number,\n    startLoc?: Position,\n  ): T {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n\n    const node = this.startNodeAt(startPos, startLoc);\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(startPos, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList\n  parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.next(); // eat `(`\n    this.expressionScope.enter(newArrowHeadScope());\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    const refNeedsArrowPos = { start: 0 };\n    let first = true;\n    let spreadStart;\n    let optionalCommaStart;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma, refNeedsArrowPos.start || null);\n        if (this.match(tt.parenR)) {\n          optionalCommaStart = this.state.start;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStart = this.state.start;\n        exprList.push(\n          this.parseParenItem(\n            this.parseRestBinding(),\n            spreadNodeStartPos,\n            spreadNodeStartLoc,\n          ),\n        );\n\n        this.checkCommaAfterRest(charCodes.rightParenthesis);\n\n        break;\n      } else {\n        exprList.push(\n          this.parseMaybeAssignAllowIn(\n            refExpressionErrors,\n            this.parseParenItem,\n            refNeedsArrowPos,\n          ),\n        );\n      }\n    }\n\n    const innerEndPos = this.state.lastTokEnd;\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow() &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      for (const param of exprList) {\n        if (param.extra && param.extra.parenthesized) {\n          this.unexpected(param.extra.parenStart);\n        }\n      }\n\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStart);\n    }\n    if (optionalCommaStart) this.unexpected(optionalCommaStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    this.checkExpressionErrors(refExpressionErrors, true);\n    if (refNeedsArrowPos.start) this.unexpected(refNeedsArrowPos.start);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  shouldParseArrow(): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(\n    node: N.Expression,\n    startPos: number, // eslint-disable-line no-unused-vars\n    startLoc: Position, // eslint-disable-line no-unused-vars\n  ): N.Expression {\n    return node;\n  }\n\n  parseNewOrNewTarget(): N.NewExpression | N.MetaProperty {\n    const node = this.startNode();\n    this.next();\n    if (this.match(tt.dot)) {\n      // https://tc39.es/ecma262/#prod-NewTarget\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        let error = Errors.UnexpectedNewTarget;\n\n        if (this.hasPlugin(\"classProperties\")) {\n          error += \" or class properties\";\n        }\n\n        /* eslint-disable @babel/development-internal/dry-error-messages */\n        this.raise(metaProp.start, error);\n        /* eslint-enable @babel/development-internal/dry-error-messages */\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n  // https://tc39.es/ecma262/#prod-NewExpression\n  parseNew(node: N.Expression): N.NewExpression {\n    node.callee = this.parseNoCallExpr();\n\n    if (node.callee.type === \"Import\") {\n      this.raise(node.callee.start, Errors.ImportCallNotNewExpression);\n    } else if (\n      node.callee.type === \"OptionalMemberExpression\" ||\n      node.callee.type === \"OptionalCallExpression\"\n    ) {\n      this.raise(this.state.lastTokEnd, Errors.OptionalChainingNoNew);\n    } else if (this.eat(tt.questionDot)) {\n      this.raise(this.state.start, Errors.OptionalChainingNoNew);\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node: N.NewExpression): void {\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // $FlowFixMe (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const elem = this.startNode();\n    if (this.state.value === null) {\n      if (!isTagged) {\n        this.raise(this.state.start + 1, Errors.InvalidEscapeSequenceTemplate);\n      }\n    }\n    elem.value = {\n      raw: this.input\n        .slice(this.state.start, this.state.end)\n        .replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.state.value,\n    };\n    this.next();\n    elem.tail = this.match(tt.backQuote);\n    return this.finishNode(elem, \"TemplateElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-TemplateLiteral\n  parseTemplate(isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode();\n    this.next();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      this.expect(tt.dollarBraceL);\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.expect(tt.braceR);\n      node.quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // This is overwritten by the TypeScript plugin to parse template types\n  parseTemplateSubstitution(): N.Expression {\n    return this.parseExpression();\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObjectLike<T: N.ObjectPattern | N.ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): T {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash: any = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n          break;\n        }\n      }\n\n      const prop = this.parsePropertyDefinition(isPattern, refExpressionErrors);\n      if (!isPattern) {\n        // $FlowIgnore RestElement will never be returned if !isPattern\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (\n        isRecord &&\n        prop.type !== \"ObjectProperty\" &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(prop.start, Errors.InvalidRecordProperty);\n      }\n\n      // $FlowIgnore\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    // The tokenizer uses `braceIsBlock` to detect whether `{` starts a block statement.\n    // If `{` is a block statement, `exprAllowed` will be `true`.\n    // However the tokenizer can not handle edge cases like `0 ? a : { a : 1 } / 2`, here\n    // we update `exprAllowed` when an object-like is parsed.\n    this.state.exprAllowed = false;\n    this.next();\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    return this.finishNode(node, type);\n  }\n\n  // Check grammar production:\n  //   IdentifierName *_opt PropertyName\n  // It is used in `parsePropertyDefinition` to detect AsyncMethod and Accessors\n  maybeAsyncOrAccessorProp(prop: N.ObjectProperty): boolean {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star))\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyDefinition\n  parsePropertyDefinition(\n    isPattern: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.ObjectMember | N.SpreadElement | N.RestElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(this.state.start, Errors.UnsupportedPropertyDecorator);\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isGenerator = false;\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      if (isPattern) {\n        this.next();\n        // Don't use parseRestBinding() as we only allow Identifier here.\n        prop.argument = this.parseIdentifier();\n        this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n        return this.finishNode(prop, \"RestElement\");\n      }\n\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (isPattern || refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    if (!isPattern) {\n      isGenerator = this.eat(tt.star);\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, /* isPrivateNameAllowed */ false);\n\n    if (\n      !isPattern &&\n      !isGenerator &&\n      !containsEsc &&\n      this.maybeAsyncOrAccessorProp(prop)\n    ) {\n      const keyName = key.name;\n      // https://tc39.es/ecma262/#prod-AsyncMethod\n      // https://tc39.es/ecma262/#prod-AsyncGeneratorMethod\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        isGenerator = this.eat(tt.star);\n        this.parsePropertyName(prop, /* isPrivateNameAllowed */ false);\n      }\n      // get PropertyName[?Yield, ?Await] () { FunctionBody[~Yield, ~Await] }\n      // set PropertyName[?Yield, ?Await] ( PropertySetParameterList ) { FunctionBody[~Yield, ~Await] }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        prop.kind = keyName;\n        if (this.match(tt.star)) {\n          isGenerator = true;\n          this.raise(this.state.pos, Errors.AccessorIsGenerator, keyName);\n          this.next();\n        }\n        this.parsePropertyName(prop, /* isPrivateNameAllowed */ false);\n      }\n    }\n\n    this.parseObjPropValue(\n      prop,\n      startPos,\n      startLoc,\n      isGenerator,\n      isAsync,\n      isPattern,\n      isAccessor,\n      refExpressionErrors,\n    );\n\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // This exists so we can override within the ESTree plugin\n  getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n    return method.params;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    const start = method.start;\n\n    if (params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, Errors.BadGetterArity);\n      } else {\n        this.raise(start, Errors.BadSetterArity);\n      }\n    }\n\n    if (\n      method.kind === \"set\" &&\n      params[params.length - 1]?.type === \"RestElement\"\n    ) {\n      this.raise(start, Errors.BadSetterRestParameter);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-MethodDefinition\n  parseObjectMethod(\n    prop: N.ObjectMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n  ): ?N.ObjectMethod {\n    if (isAccessor) {\n      // isAccessor implies isAsync: false, isPattern: false, isGenerator: false\n      this.parseMethod(\n        prop,\n        // This _should_ be false, but with error recovery, we allow it to be\n        // set for informational purposes\n        isGenerator,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n  }\n\n  // if `isPattern` is true, parse https://tc39.es/ecma262/#prod-BindingProperty\n  // else https://tc39.es/ecma262/#prod-PropertyDefinition\n  parseObjectProperty(\n    prop: N.ObjectProperty,\n    startPos: ?number,\n    startLoc: ?Position,\n    isPattern: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): ?N.ObjectProperty {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.start, this.state.startLoc)\n        : this.parseMaybeAssignAllowIn(refExpressionErrors);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      // PropertyDefinition:\n      //   IdentifierReference\n      //   CoveredInitializedName\n      // Note: `{ eval } = {}` will be checked in `checkLVal` later.\n      this.checkReservedWord(prop.key.name, prop.key.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          prop.key.__clone(),\n        );\n      } else if (this.match(tt.eq) && refExpressionErrors) {\n        if (refExpressionErrors.shorthandAssign === -1) {\n          refExpressionErrors.shorthandAssign = this.state.start;\n        }\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          prop.key.__clone(),\n        );\n      } else {\n        prop.value = prop.key.__clone();\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(\n    prop: any,\n    startPos: ?number,\n    startLoc: ?Position,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): void {\n    const node =\n      this.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) ||\n      this.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      );\n\n    if (!node) this.unexpected();\n\n    // $FlowFixMe\n    return node;\n  }\n\n  parsePropertyName(\n    prop: N.ObjectOrClassMember | N.ClassMember | N.TsNamedTypeElementBase,\n    isPrivateNameAllowed: boolean,\n  ): N.Expression | N.Identifier {\n    if (this.eat(tt.bracketL)) {\n      (prop: $FlowSubtype<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(tt.bracketR);\n    } else {\n      const oldInPropertyName = this.state.inPropertyName;\n      this.state.inPropertyName = true;\n      // We check if it's valid for it to be a private name when we push it.\n      (prop: $FlowFixMe).key =\n        this.match(tt.num) ||\n        this.match(tt.string) ||\n        this.match(tt.bigint) ||\n        this.match(tt.decimal)\n          ? this.parseExprAtom()\n          : this.parseMaybePrivateName(isPrivateNameAllowed);\n\n      if (prop.key.type !== \"PrivateName\") {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n\n      this.state.inPropertyName = oldInPropertyName;\n    }\n\n    return prop.key;\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: ?boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T: N.MethodLike>(\n    node: T,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: string,\n    inClassScope: boolean = false,\n  ): T {\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor; // For TypeScript parameter properties\n    this.scope.enter(\n      SCOPE_FUNCTION |\n        SCOPE_SUPER |\n        (inClassScope ? SCOPE_CLASS : 0) |\n        (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams((node: any), allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return node;\n  }\n\n  // parse an array literal or tuple literal\n  // https://tc39.es/ecma262/#prod-ArrayLiteral\n  // https://tc39.es/proposal-record-tuple/#prod-TupleLiteral\n  parseArrayLike(\n    close: TokenType,\n    canBePattern: boolean,\n    isTuple: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): N.ArrayExpression | N.TupleExpression {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(\n      close,\n      /* allowEmpty */ !isTuple,\n      refExpressionErrors,\n      node,\n    );\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(\n      node,\n      isTuple ? \"TupleExpression\" : \"ArrayExpression\",\n    );\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    node: N.ArrowFunctionExpression,\n    params: ?(N.Expression[]),\n    isAsync: boolean,\n    trailingCommaPos: ?number,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n    // ConciseBody and AsyncConciseBody inherit [In]\n    if (!this.match(tt.bracketL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaPos);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: N.ArrowFunctionExpression,\n    params: N.Expression[],\n    trailingCommaPos: ?number,\n  ): void {\n    node.params = this.toAssignableList(params, trailingCommaPos);\n  }\n\n  parseFunctionBodyAndFinish(\n    node: N.BodilessFunctionOrMethodBase,\n    type: string,\n    isMethod?: boolean = false,\n  ): void {\n    // $FlowIgnore (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    node: N.Function,\n    allowExpression: ?boolean,\n    isMethod?: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      // https://tc39.es/ecma262/#prod-ExpressionBody\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            const errorPos =\n              // $FlowIgnore\n              (node.kind === \"method\" || node.kind === \"constructor\") &&\n              // $FlowIgnore\n              !!node.key\n                ? node.key.end\n                : node.start;\n            this.raise(errorPos, Errors.IllegalLanguageModeDirective);\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkLVal(\n              node.id,\n              BIND_OUTSIDE,\n              undefined,\n              \"function name\",\n              undefined,\n              strictModeChanged,\n            );\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.expressionScope.exit();\n      this.state.labels = oldLabels;\n    }\n  }\n\n  isSimpleParamList(\n    params: $ReadOnlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: N.Function,\n    allowDuplicates: boolean,\n    // eslint-disable-next-line no-unused-vars\n    isArrowFunction: ?boolean,\n    strictModeChanged?: boolean = true,\n  ): void {\n    // $FlowIssue\n    const nameHash: {} = Object.create(null);\n    for (let i = 0; i < node.params.length; i++) {\n      this.checkLVal(\n        node.params[i],\n        BIND_VAR,\n        allowDuplicates ? null : nameHash,\n        \"function parameter list\",\n        undefined,\n        strictModeChanged,\n      );\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    nodeForExtra?: ?N.Node,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addExtra(\n              nodeForExtra,\n              \"trailingComma\",\n              this.state.lastTokStart,\n            );\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    allowEmpty: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    refNeedsArrowPos: ?Pos,\n    allowPlaceholder: ?boolean,\n  ): ?N.Expression {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(this.state.pos, Errors.UnexpectedToken, \",\");\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors, refNeedsArrowPos),\n        spreadNodeStartPos,\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(this.state.start, Errors.UnexpectedArgumentPlaceholder);\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(\n        refExpressionErrors,\n        this.parseParenItem,\n        refNeedsArrowPos,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node: N.Identifier, name: string): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos: number, liberal?: boolean): string {\n    let name: string;\n\n    const { start, type } = this.state;\n\n    if (type === tt.name) {\n      name = this.state.value;\n    } else if (type.keyword) {\n      name = type.keyword;\n\n      // `class` and `function` keywords push function-type token context into this.context.\n      // But there is no chance to pop the context if the keyword is consumed\n      // as an identifier such as a property name.\n      const curContext = this.curContext();\n      if (\n        (type === tt._class || type === tt._function) &&\n        (curContext === ct.functionStatement ||\n          curContext === ct.functionExpression)\n      ) {\n        this.state.context.pop();\n      }\n    } else {\n      throw this.unexpected();\n    }\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      this.state.type = tt.name;\n    } else {\n      this.checkReservedWord(name, start, !!type.keyword, false);\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: number,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    if (this.prodParam.hasYield && word === \"yield\") {\n      this.raise(startLoc, Errors.YieldBindingIdentifier);\n      return;\n    }\n\n    if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(startLoc, Errors.AwaitBindingIdentifier);\n        return;\n      } else {\n        this.expressionScope.recordAsyncArrowParametersError(\n          startLoc,\n          Errors.AwaitBindingIdentifier,\n        );\n      }\n    }\n\n    if (\n      this.scope.inClass &&\n      !this.scope.inNonArrowFunction &&\n      word === \"arguments\"\n    ) {\n      this.raise(startLoc, Errors.ArgumentsInClass);\n      return;\n    }\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(startLoc, Errors.UnexpectedKeyword, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n      ? isStrictBindReservedWord\n      : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      if (!this.prodParam.hasAwait && word === \"await\") {\n        this.raise(\n          startLoc,\n          this.hasPlugin(\"topLevelAwait\")\n            ? Errors.AwaitNotInAsyncContext\n            : Errors.AwaitNotInAsyncFunction,\n        );\n      } else {\n        this.raise(startLoc, Errors.UnexpectedReservedWord, word);\n      }\n    }\n  }\n\n  isAwaitAllowed(): boolean {\n    if (this.scope.inFunction) return this.prodParam.hasAwait;\n    if (this.options.allowAwaitOutsideFunction) return true;\n    if (this.hasPlugin(\"topLevelAwait\")) {\n      return this.inModule && this.prodParam.hasAwait;\n    }\n    return false;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(): N.AwaitExpression {\n    const node = this.startNode();\n\n    this.next();\n\n    this.expressionScope.recordParameterInitializerError(\n      node.start,\n      Errors.AwaitExpressionFormalParameter,\n    );\n\n    if (this.eat(tt.star)) {\n      this.raise(node.start, Errors.ObsoleteAwaitStar);\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (\n        this.hasPrecedingLineBreak() ||\n        // All the following expressions are ambiguous:\n        //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``\n        this.match(tt.plusMin) ||\n        this.match(tt.parenL) ||\n        this.match(tt.bracketL) ||\n        this.match(tt.backQuote) ||\n        // Sometimes the tokenizer generates tt.slash for regexps, and this is\n        // handler by parseExprAtom\n        this.match(tt.regexp) ||\n        this.match(tt.slash) ||\n        // This code could be parsed both as a modulo operator or as an intrinsic:\n        //   await %x(0)\n        (this.hasPlugin(\"v8intrinsic\") && this.match(tt.modulo))\n      ) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary();\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(): N.YieldExpression {\n    const node = this.startNode();\n\n    this.expressionScope.recordParameterInitializerError(\n      node.start,\n      Errors.YieldInParameter,\n    );\n\n    this.next();\n    if (\n      this.match(tt.semi) ||\n      (!this.match(tt.star) && !this.state.type.startsExpr) ||\n      this.hasPrecedingLineBreak()\n    ) {\n      node.delegate = false;\n      node.argument = null;\n    } else {\n      node.delegate = this.eat(tt.star);\n      node.argument = this.parseMaybeAssign();\n    }\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartPos: number) {\n    if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(leftStartPos, Errors.PipelineHeadSequenceExpression);\n      }\n    }\n  }\n\n  parseSmartPipelineBody(\n    childExpression: N.Expression,\n    startPos: number,\n    startLoc: Position,\n  ): N.PipelineBody {\n    this.checkSmartPipelineBodyEarlyErrors(childExpression, startPos);\n\n    return this.parseSmartPipelineBodyInStyle(\n      childExpression,\n      startPos,\n      startLoc,\n    );\n  }\n\n  checkSmartPipelineBodyEarlyErrors(\n    childExpression: N.Expression,\n    startPos: number,\n  ): void {\n    if (this.match(tt.arrow)) {\n      // If the following token is invalidly `=>`, then throw a human-friendly error\n      // instead of something like 'Unexpected token, expected \";\"'.\n      throw this.raise(this.state.start, Errors.PipelineBodyNoArrow);\n    } else if (childExpression.type === \"SequenceExpression\") {\n      this.raise(startPos, Errors.PipelineBodySequenceExpression);\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(\n    childExpression: N.Expression,\n    startPos: number,\n    startLoc: Position,\n  ): N.PipelineBody {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n    const isSimpleReference = this.isSimpleReference(childExpression);\n    if (isSimpleReference) {\n      bodyNode.callee = childExpression;\n    } else {\n      if (!this.topicReferenceWasUsedInCurrentTopicContext()) {\n        this.raise(startPos, Errors.PipelineTopicUnused);\n      }\n      bodyNode.expression = childExpression;\n    }\n    return this.finishNode(\n      bodyNode,\n      isSimpleReference ? \"PipelineBareFunction\" : \"PipelineTopicExpression\",\n    );\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // Enable topic references from outer contexts within smart pipeline bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withTopicPermittingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // Disable topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withTopicForbiddingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Disable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 0,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  disallowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  // Register the use of a primary topic reference (`#`) within the current\n  // topic context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  primaryTopicReferenceIsAllowedInCurrentTopicContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentTopicContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnary(),\n      startPos,\n      startLoc,\n      prec,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n}\n","// @flow\n\nimport * as N from \"../types\";\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport ExpressionParser from \"./expression\";\nimport { Errors } from \"./error\";\nimport {\n  isIdentifierChar,\n  isIdentifierStart,\n  keywordRelationalOperator,\n} from \"../util/identifier\";\nimport { lineBreak } from \"../util/whitespace\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  SCOPE_CLASS,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  CLASS_ELEMENT_OTHER,\n  CLASS_ELEMENT_INSTANCE_GETTER,\n  CLASS_ELEMENT_INSTANCE_SETTER,\n  CLASS_ELEMENT_STATIC_GETTER,\n  CLASS_ELEMENT_STATIC_SETTER,\n  type BindingTypes,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { PARAM, functionFlags } from \"../util/production-parameter\";\nimport {\n  newExpressionScope,\n  newParameterDeclarationScope,\n} from \"../util/expression-scope\";\n\nconst loopLabel = { kind: \"loop\" },\n  switchLabel = { kind: \"switch\" };\n\nconst FUNC_NO_FLAGS = 0b000,\n  FUNC_STATEMENT = 0b001,\n  FUNC_HANGING_STATEMENT = 0b010,\n  FUNC_NULLABLE_ID = 0b100;\n\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nexport default class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(file: N.File, program: N.Program): N.File {\n    program.sourceType = this.options.sourceType;\n\n    program.interpreter = this.parseInterpreterDirective();\n\n    this.parseBlockBody(program, true, true, tt.eof);\n\n    if (\n      this.inModule &&\n      !this.options.allowUndeclaredExports &&\n      this.scope.undefinedExports.size > 0\n    ) {\n      for (const [name] of Array.from(this.scope.undefinedExports)) {\n        const pos = this.scope.undefinedExports.get(name);\n        // $FlowIssue\n        this.raise(pos, Errors.ModuleExportUndefined, name);\n      }\n    }\n\n    file.program = this.finishNode(program, \"Program\");\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) file.tokens = this.tokens;\n\n    return this.finishNode(file, \"File\");\n  }\n\n  // TODO\n\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const expr = stmt.expression;\n\n    const directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);\n    const directive = this.startNodeAt(stmt.start, stmt.loc.start);\n\n    const raw = this.input.slice(expr.start, expr.end);\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n\n    directive.value = this.finishNodeAt(\n      directiveLiteral,\n      \"DirectiveLiteral\",\n      expr.end,\n      expr.loc.end,\n    );\n\n    return this.finishNodeAt(directive, \"Directive\", stmt.end, stmt.loc.end);\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context: ?string): boolean {\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n    const next = this.nextTokenStart();\n    const nextCh = this.input.charCodeAt(next);\n    // For ambiguous cases, determine if a LexicalDeclaration (or only a\n    // Statement) is allowed here. If context is not empty then only a Statement\n    // is allowed. However, `let [` is an explicit negative lookahead for\n    // ExpressionStatement, so special-case it first.\n    if (nextCh === charCodes.leftSquareBracket) return true;\n    if (context) return false;\n\n    if (nextCh === charCodes.leftCurlyBrace) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      let pos = next + 1;\n      while (isIdentifierChar(this.input.charCodeAt(pos))) {\n        ++pos;\n      }\n      const ident = this.input.slice(next, pos);\n      if (!keywordRelationalOperator.test(ident)) return true;\n    }\n    return false;\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n  // https://tc39.es/ecma262/#prod-Statement\n  // ImportDeclaration and ExportDeclaration are also handled here so we can throw recoverable errors\n  // when they are not at the top level\n  parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n    if (this.match(tt.at)) {\n      this.parseDecorators(true);\n    }\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = tt._var;\n      kind = \"let\";\n    }\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n      case tt._break:\n      case tt._continue:\n        // $FlowFixMe\n        return this.parseBreakContinueStatement(node, starttype.keyword);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node);\n      case tt._do:\n        return this.parseDoStatement(node);\n      case tt._for:\n        return this.parseForStatement(node);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (context) {\n          if (this.state.strict) {\n            this.raise(this.state.start, Errors.StrictFunction);\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(this.state.start, Errors.SloppyFunction);\n          }\n        }\n        return this.parseFunctionStatement(node, false, !context);\n\n      case tt._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case tt._if:\n        return this.parseIfStatement(node);\n      case tt._return:\n        return this.parseReturnStatement(node);\n      case tt._switch:\n        return this.parseSwitchStatement(node);\n      case tt._throw:\n        return this.parseThrowStatement(node);\n      case tt._try:\n        return this.parseTryStatement(node);\n\n      case tt._const:\n      case tt._var:\n        kind = kind || this.state.value;\n        if (context && kind !== \"var\") {\n          this.raise(this.state.start, Errors.UnexpectedLexicalDeclaration);\n        }\n        return this.parseVarStatement(node, kind);\n\n      case tt._while:\n        return this.parseWhileStatement(node);\n      case tt._with:\n        return this.parseWithStatement(node);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node);\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis || // import()\n          nextTokenCharCode === charCodes.dot // import.meta\n        ) {\n          break;\n        }\n      }\n      // fall through\n      case tt._export: {\n        if (!this.options.allowImportExportEverywhere && !topLevel) {\n          this.raise(this.state.start, Errors.UnexpectedImportExport);\n        }\n\n        this.next(); // eat `import`/`export`\n\n        let result;\n        if (starttype === tt._import) {\n          result = this.parseImport(node);\n\n          if (\n            result.type === \"ImportDeclaration\" &&\n            (!result.importKind || result.importKind === \"value\")\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        } else {\n          result = this.parseExport(node);\n\n          if (\n            (result.type === \"ExportNamedDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            (result.type === \"ExportAllDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            result.type === \"ExportDefaultDeclaration\"\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        this.assertModuleNodeAllowed(node);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (context) {\n            this.raise(\n              this.state.start,\n              Errors.AsyncFunctionInSingleStatementContext,\n            );\n          }\n          this.next();\n          return this.parseFunctionStatement(node, true, !context);\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      starttype === tt.name &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raiseWithData(\n        node.start,\n        {\n          code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\",\n        },\n        Errors.ImportOutsideModule,\n      );\n    }\n  }\n\n  takeDecorators(node: N.HasDecorators): void {\n    const decorators = this.state.decoratorStack[\n      this.state.decoratorStack.length - 1\n    ];\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(allowExport?: boolean): void {\n    const currentContextDecorators = this.state.decoratorStack[\n      this.state.decoratorStack.length - 1\n    ];\n    while (this.match(tt.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (\n        this.hasPlugin(\"decorators\") &&\n        !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(this.state.start, Errors.DecoratorExportClass);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(this.state.start, Errors.UnexpectedLeadingDecorator);\n    }\n  }\n\n  parseDecorator(): N.Decorator {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      // Every time a decorator class expression is evaluated, a new empty array is pushed onto the stack\n      // So that the decorators of any nested class expressions will be dealt with separately\n      this.state.decoratorStack.push([]);\n\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.eat(tt.parenL)) {\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: N.BreakStatement | N.ContinueStatement,\n    keyword: string,\n  ): N.BreakStatement | N.ContinueStatement {\n    const isBreak = keyword === \"break\";\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, keyword);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: N.BreakStatement | N.ContinueStatement,\n    keyword: string,\n  ) {\n    const isBreak = keyword === \"break\";\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      this.raise(node.start, Errors.IllegalBreakContinue, keyword);\n    }\n  }\n\n  parseDebuggerStatement(node: N.DebuggerStatement): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  parseDoStatement(node: N.DoWhileStatement): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(\"do\"),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(node: N.Node): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = -1;\n    if (this.isAwaitAllowed() && this.eatContextual(\"await\")) {\n      awaitAt = this.state.lastTokStart;\n    }\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, null);\n    }\n\n    const isLet = this.isLet();\n    if (this.match(tt._var) || this.match(tt._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if (\n        (this.match(tt._in) || this.isContextual(\"of\")) &&\n        init.declarations.length === 1\n      ) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, init);\n    }\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    if (this.match(tt._in) || this.isContextual(\"of\")) {\n      this.toAssignable(init);\n      const description = this.isContextual(\"of\")\n        ? \"for-of statement\"\n        : \"for-in statement\";\n      this.checkLVal(init, undefined, undefined, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(\n    node: N.FunctionDeclaration,\n    isAsync?: boolean,\n    declarationPosition?: boolean,\n  ): N.FunctionDeclaration {\n    this.next();\n    return this.parseFunction(\n      node,\n      FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT),\n      isAsync,\n    );\n  }\n\n  parseIfStatement(node: N.IfStatement): N.IfStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(tt._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node: N.ReturnStatement): N.ReturnStatement {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(this.state.start, Errors.IllegalReturn);\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node: N.SwitchStatement): N.SwitchStatement {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push((cur = this.startNode()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(\n              this.state.lastTokStart,\n              Errors.MultipleDefaultsInSwitch,\n            );\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node: N.ThrowStatement): N.ThrowStatement {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.lastTokEnd, Errors.NewlineAfterThrow);\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam(): N.Pattern {\n    const param = this.parseBindingAtom();\n\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, BIND_LEXICAL, null, \"catch clause\");\n\n    return param;\n  }\n\n  parseTryStatement(node: N.TryStatement): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n      this.scope.exit();\n\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(node.start, Errors.NoCatchOrFinally);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(\n    node: N.VariableDeclaration,\n    kind: \"var\" | \"let\" | \"const\",\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node: N.WhileStatement): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"while\"),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node: N.WithStatement): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(this.state.start, Errors.StrictWith);\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(\"with\"),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: N.EmptyStatement): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(\n    node: N.LabeledStatement,\n    maybeName: string,\n    expr: N.Identifier,\n    context: ?string,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(expr.start, Errors.LabelRedeclaration, maybeName);\n      }\n    }\n\n    const kind = this.state.type.isLoop\n      ? \"loop\"\n      : this.match(tt._switch)\n      ? \"switch\"\n      : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start,\n    });\n    node.body = this.parseStatement(\n      context\n        ? context.indexOf(\"label\") === -1\n          ? context + \"label\"\n          : context\n        : \"label\",\n    );\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: N.ExpressionStatement,\n    expr: N.Expression,\n  ): N.Statement {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowDirectives` is true (used for\n  // function bodies).\n\n  parseBlock(\n    allowDirectives?: boolean = false,\n    createNewLexicalScope?: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode();\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    node: N.BlockStatementLike,\n    allowDirectives: ?boolean,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body = (node.body = []);\n    const directives = (node.directives = []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  // https://tc39.es/ecma262/#prod-Block\n  // https://tc39.es/ecma262/#prod-ModuleBody\n  parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const octalPositions = [];\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      // Track octal literals that occur before a \"use strict\" directive.\n      if (!parsedNonDirective && this.state.octalPositions.length) {\n        octalPositions.push(...this.state.octalPositions);\n      }\n\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective && this.isValidDirective(stmt)) {\n        const directive = this.stmtToDirective(stmt);\n        directives.push(directive);\n\n        if (!hasStrictModeDirective && directive.value.value === \"use strict\") {\n          hasStrictModeDirective = true;\n          this.setStrict(true);\n        }\n\n        continue;\n      }\n\n      parsedNonDirective = true;\n      body.push(stmt);\n    }\n\n    // Throw an error for any octal literals found before a\n    // \"use strict\" directive. Strict mode will be set at parse\n    // time for any literals that occur after the directive.\n    if (this.state.strict && octalPositions.length) {\n      for (const pos of octalPositions) {\n        this.raise(pos, Errors.StrictOctalLiteral);\n      }\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    node: N.ForStatement,\n    init: ?(N.VariableDeclaration | N.Expression),\n  ): N.ForStatement {\n    node.init = init;\n    this.expect(tt.semi);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.expect(tt.semi);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    node: N.ForInOf,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt: number,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt > -1) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt > -1;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(\n        init.start,\n        Errors.ForInOfLoopInitializer,\n        isForIn ? \"for-in\" : \"for-of\",\n      );\n    } else if (init.type === \"AssignmentPattern\") {\n      this.raise(init.start, Errors.InvalidLhs, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn\n      ? this.parseExpression()\n      : this.parseMaybeAssignAllowIn();\n    this.expect(tt.parenR);\n\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    node: N.VariableDeclaration,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\",\n  ): N.VariableDeclaration {\n    const declarations = (node.declarations = []);\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n      if (this.eat(tt.eq)) {\n        decl.init = isFor\n          ? this.parseMaybeAssignDisallowIn()\n          : this.parseMaybeAssignAllowIn();\n      } else {\n        if (\n          kind === \"const\" &&\n          !(this.match(tt._in) || this.isContextual(\"of\"))\n        ) {\n          // `const` with no initializer is allowed in TypeScript.\n          // It could be a declaration like `const x: number;`.\n          if (!isTypescript) {\n            this.raise(\n              this.state.lastTokEnd,\n              Errors.DeclarationMissingInitializer,\n              \"Const declarations\",\n            );\n          }\n        } else if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(\"of\")))\n        ) {\n          this.raise(\n            this.state.lastTokEnd,\n            Errors.DeclarationMissingInitializer,\n            \"Complex binding patterns\",\n          );\n        }\n        decl.init = null;\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(decl: N.VariableDeclarator, kind: \"var\" | \"let\" | \"const\"): void {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(\n      decl.id,\n      kind === \"var\" ? BIND_VAR : BIND_LEXICAL,\n      undefined,\n      \"variable declaration\",\n      kind !== \"var\",\n    );\n  }\n\n  // Parse a function declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseFunction<T: N.NormalFunction>(\n    node: T,\n    statement?: number = FUNC_NO_FLAGS,\n    isAsync?: boolean = false,\n  ): T {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star) && isHangingStatement) {\n      this.raise(this.state.start, Errors.GeneratorInSingleStatementContext);\n    }\n    node.generator = this.eat(tt.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, /* allowModifiers */ false);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseFunctionId(requireId?: boolean): ?N.Identifier {\n    return requireId || this.match(tt.name) ? this.parseIdentifier() : null;\n  }\n\n  parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n    this.expect(tt.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      /* allowEmpty */ false,\n      allowModifiers,\n    );\n\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BIND_VAR\n          : BIND_LEXICAL\n        : BIND_FUNCTION,\n      node.id.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T: N.Class>(\n    node: T,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next();\n    this.takeDecorators(node);\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    // this.state.strict is restored in parseClassBody\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed &&\n      !method.static &&\n      (method.key.name === \"constructor\" || // Identifier\n        method.key.value === \"constructor\") // String literal\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassBody\n  parseClassBody(\n    constructorAllowsSuper: boolean,\n    oldStrict: boolean,\n  ): N.ClassBody {\n    this.classScope.enter();\n\n    const state: N.ParseClassMemberState = {\n      constructorAllowsSuper,\n      hadConstructor: false,\n      hadStaticBlock: false,\n    };\n    let decorators: N.Decorator[] = [];\n    const classBody: N.ClassBody = this.startNode();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withTopicForbiddingContext(() => {\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(this.state.lastTokEnd, Errors.DecoratorSemicolon);\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (\n          member.kind === \"constructor\" &&\n          member.decorators &&\n          member.decorators.length > 0\n        ) {\n          this.raise(member.start, Errors.DecoratorConstructor);\n        }\n      }\n    });\n\n    this.state.strict = oldStrict;\n\n    this.next(); // eat `}`\n\n    if (decorators.length) {\n      throw this.raise(this.state.start, Errors.TrailingDecorator);\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n  ): boolean {\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = (member: any);\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = (member: any);\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    return false;\n  }\n\n  parseClassMember(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: N.ParseClassMemberState,\n  ): void {\n    const isStatic = this.isContextual(\"static\");\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        // a class element named 'static'\n        return;\n      }\n      if (this.eat(tt.braceL)) {\n        this.parseClassStaticBlock(\n          classBody,\n          ((member: any): N.StaticBlock),\n          state,\n        );\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: N.ParseClassMemberState,\n    isStatic: boolean,\n  ) {\n    const publicMethod: $FlowSubtype<N.ClassMethod> = member;\n    const privateMethod: $FlowSubtype<N.ClassPrivateMethod> = member;\n    const publicProp: $FlowSubtype<N.ClassMethod> = member;\n    const privateProp: $FlowSubtype<N.ClassPrivateMethod> = member;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      this.parseClassElementName(method);\n\n      if (method.key.type === \"PrivateName\") {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(publicMethod.key.start, Errors.ConstructorIsGenerator);\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parseClassElementName(member);\n    const isPrivate = key.type === \"PrivateName\";\n    // Check the key is not a computed expression or string literal.\n    const isSimple = key.type === \"Identifier\";\n    const maybeQuestionTokenStart = this.state.start;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(key.start, Errors.DuplicateConstructor);\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.constructorAllowsSuper;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (\n      isSimple &&\n      key.name === \"async\" &&\n      !containsEsc &&\n      !this.isLineTerminator()\n    ) {\n      // an async method\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStart);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (method.key.type === \"PrivateName\") {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, Errors.ConstructorIsAsync);\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      isSimple &&\n      (key.name === \"get\" || key.name === \"set\") &&\n      !containsEsc &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      method.kind = key.name;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      this.parseClassElementName(publicMethod);\n\n      if (method.key.type === \"PrivateName\") {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, Errors.ConstructorIsAccessor);\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // https://tc39.es/proposal-class-fields/#prod-ClassElementName\n  parseClassElementName(member: N.ClassMember): N.Expression | N.Identifier {\n    const key = this.parsePropertyName(member, /* isPrivateNameAllowed */ true);\n\n    if (\n      !member.computed &&\n      member.static &&\n      ((key: $FlowSubtype<N.Identifier>).name === \"prototype\" ||\n        (key: $FlowSubtype<N.StringLiteral>).value === \"prototype\")\n    ) {\n      this.raise(key.start, Errors.StaticPrototype);\n    }\n\n    if (key.type === \"PrivateName\" && key.id.name === \"constructor\") {\n      this.raise(key.start, Errors.ConstructorClassPrivateField);\n    }\n\n    return key;\n  }\n\n  parseClassStaticBlock(\n    classBody: N.ClassBody,\n    member: N.StaticBlock & { decorators?: Array<N.Decorator> },\n    state: N.ParseClassMemberState,\n  ) {\n    this.expectPlugin(\"classStaticBlock\", member.start);\n    // Start a new lexical scope\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    // Start a new expression scope, this is required for parsing edge cases like:\n    // async (x = class { static { await; } }) => {}\n    this.expressionScope.enter(newExpressionScope());\n    // Start a new scope with regard to loop labels\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    // ClassStaticBlockStatementList:\n    //   StatementList[~Yield, ~Await, ~Return] opt\n    this.prodParam.enter(PARAM);\n    const body = (member.body = []);\n    this.parseBlockOrModuleBlockBody(body, undefined, false, tt.braceR);\n    this.prodParam.exit();\n    this.expressionScope.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode<N.StaticBlock>(member, \"StaticBlock\"));\n    if (state.hadStaticBlock) {\n      this.raise(member.start, Errors.DuplicateStaticBlock);\n    }\n    if (member.decorators?.length) {\n      this.raise(member.start, Errors.DecoratorStaticBlock);\n    }\n    state.hadStaticBlock = true;\n  }\n\n  pushClassProperty(classBody: N.ClassBody, prop: N.ClassProperty) {\n    if (\n      !prop.computed &&\n      (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")\n    ) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(prop.key.start, Errors.ConstructorClassField);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    classBody: N.ClassBody,\n    prop: N.ClassPrivateProperty,\n  ) {\n    this.expectPlugin(\"classPrivateProperties\", prop.key.start);\n\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      node.key.id.name,\n      CLASS_ELEMENT_OTHER,\n      node.key.start,\n    );\n  }\n\n  pushClassMethod(\n    classBody: N.ClassBody,\n    method: N.ClassMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    classBody: N.ClassBody,\n    method: N.ClassPrivateMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    this.expectPlugin(\"classPrivateMethods\", method.key.start);\n\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_GETTER\n          : CLASS_ELEMENT_INSTANCE_GETTER\n        : node.kind === \"set\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_SETTER\n          : CLASS_ELEMENT_INSTANCE_SETTER\n        : CLASS_ELEMENT_OTHER;\n    this.classScope.declarePrivateName(node.key.id.name, kind, node.key.start);\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line no-unused-vars\n    methodOrProp: N.ClassMethod | N.ClassProperty,\n  ): void {}\n\n  // https://tc39.es/proposal-class-fields/#prod-FieldDefinition\n  parseClassPrivateProperty(\n    node: N.ClassPrivateProperty,\n  ): N.ClassPrivateProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  // https://tc39.es/proposal-class-fields/#prod-FieldDefinition\n  parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n    if (!node.typeAnnotation || this.match(tt.eq)) {\n      this.expectPlugin(\"classProperties\");\n    }\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  // https://tc39.es/proposal-class-fields/#prod-Initializer\n  parseInitializer(node: N.ClassProperty | N.ClassPrivateProperty): void {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId: ?boolean,\n    bindingType: BindingTypes = BIND_CLASS,\n  ): void {\n    if (this.match(tt.name)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.checkLVal(node.id, bindingType, undefined, \"class name\");\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        this.unexpected(null, Errors.MissingClassName);\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassHeritage\n  parseClassSuper(node: N.Class): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n\n  parseExport(node: N.Node): N.AnyExport {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace =\n      hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (\n      (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) ||\n      (hasNamespace && parseAfterNamespace && !hasSpecifiers)\n    ) {\n      throw this.unexpected(null, tt.braceL);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      // export default ...\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, tt.braceL);\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  eatExportStar(node: N.Node): boolean {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n    if (this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n    if (this.isContextual(\"as\")) {\n      if (!node.specifiers) node.specifiers = [];\n\n      const specifier = this.startNodeAt(\n        this.state.lastTokStart,\n        this.state.lastTokStartLoc,\n      );\n\n      this.next();\n\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node: N.Node): boolean {\n    if (this.match(tt.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      node.specifiers.push(...this.parseExportSpecifiers());\n\n      node.source = null;\n      node.declaration = null;\n\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(node: N.Node): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(\"async\")) return false;\n    const next = this.nextTokenStart();\n    return (\n      !lineBreak.test(this.input.slice(this.state.pos, next)) &&\n      this.isUnparsedContextual(next, \"function\")\n    );\n  }\n\n  parseExportDefaultExpression(): N.Expression | N.Declaration {\n    const expr = this.startNode();\n\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(tt._function) || isAsync) {\n      this.next();\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(\n        expr,\n        FUNC_STATEMENT | FUNC_NULLABLE_ID,\n        isAsync,\n      );\n    } else if (this.match(tt._class)) {\n      return this.parseClass(expr, true, true);\n    } else if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(this.state.start, Errors.DecoratorBeforeExport);\n      }\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    } else if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(this.state.start, Errors.UnsupportedDefaultExport);\n    } else {\n      const res = this.parseMaybeAssignAllowIn();\n      this.semicolon();\n      return res;\n    }\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    if (this.match(tt.name)) {\n      const value = this.state.value;\n      if ((value === \"async\" && !this.state.containsEsc) || value === \"let\") {\n        return false;\n      }\n      if (\n        (value === \"type\" || value === \"interface\") &&\n        !this.state.containsEsc\n      ) {\n        const l = this.lookahead();\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        if (\n          (l.type === tt.name && l.value !== \"from\") ||\n          l.type === tt.braceL\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (this.match(tt.name) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(node: N.ExportNamedDeclaration, expect?: boolean): void {\n    if (this.eatContextual(\"from\")) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n      if (assertions) {\n        node.assertions = assertions;\n      }\n    } else {\n      if (expect) {\n        this.unexpected();\n      } else {\n        node.source = null;\n      }\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    if (this.match(tt.at)) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.unexpected(this.state.start, Errors.DecoratorBeforeExport);\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return (\n      this.state.type.keyword === \"var\" ||\n      this.state.type.keyword === \"const\" ||\n      this.state.type.keyword === \"function\" ||\n      this.state.type.keyword === \"class\" ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: N.ExportNamedDeclaration,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = ((node: any): N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(declaration.start, Errors.ExportDefaultFromAsIdentifier);\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        // Named exports\n        for (const specifier of node.specifiers) {\n          const { exported } = specifier;\n          const exportedName =\n            exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportedName);\n          // $FlowIgnore\n          if (!isFrom && specifier.local) {\n            const { local } = specifier;\n            if (local.type === \"StringLiteral\") {\n              this.raise(\n                specifier.start,\n                Errors.ExportBindingIsString,\n                local.extra.raw,\n                exportedName,\n              );\n            } else {\n              // check for keywords used as local names\n              this.checkReservedWord(local.name, local.start, true, false);\n              // check if export is defined\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        // Exported declarations\n        if (\n          node.declaration.type === \"FunctionDeclaration\" ||\n          node.declaration.type === \"ClassDeclaration\"\n        ) {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators = this.state.decoratorStack[\n      this.state.decoratorStack.length - 1\n    ];\n    // If node.declaration is a class, it will take all decorators in the current context.\n    // Thus we should throw if we see non-empty decorators here.\n    if (currentContextDecorators.length) {\n      throw this.raise(node.start, Errors.UnsupportedDecoratorExport);\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node:\n      | N.Identifier\n      | N.StringLiteral\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier,\n    name: string,\n  ): void {\n    if (this.state.exportedIdentifiers.indexOf(name) > -1) {\n      this.raise(\n        node.start,\n        name === \"default\"\n          ? Errors.DuplicateDefaultExport\n          : Errors.DuplicateExport,\n        name,\n      );\n    }\n    this.state.exportedIdentifiers.push(name);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      node.exported = this.eatContextual(\"as\")\n        ? this.parseModuleExportName()\n        : node.local.__clone();\n      nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n    }\n\n    return nodes;\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleExportName\n  parseModuleExportName(): N.StringLiteral | N.Identifier {\n    if (this.match(tt.string)) {\n      this.expectPlugin(\"moduleStringNames\");\n      const result = this.parseLiteral<N.StringLiteral>(\n        this.state.value,\n        \"StringLiteral\",\n      );\n      const surrogate = result.value.match(loneSurrogate);\n      if (surrogate) {\n        this.raise(\n          result.start,\n          Errors.ModuleExportNameHasLoneSurrogate,\n          surrogate[0].charCodeAt(0).toString(16),\n        );\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n\n  // Parses import declaration.\n  // https://tc39.es/ecma262/#prod-ImportDeclaration\n\n  parseImport(node: N.Node): N.AnyImport {\n    // import '...'\n    node.specifiers = [];\n    if (!this.match(tt.string)) {\n      // check if we have a default import like\n      // import React from \"react\";\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      /* we are checking if we do not have a default import, then it is obvious that we need named imports\n       * import { get } from \"axios\";\n       * but if we do have a default import\n       * we need to check if we have a comma after that and\n       * that is where this `|| this.eat` condition comes into play\n       */\n      const parseNext = !hasDefault || this.eat(tt.comma);\n      // if we do have to parse the next set of specifiers, we first check for star imports\n      // import React, * from \"react\";\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      // now we check if we need to parse the next imports\n      // but only if they are not importing * (everything)\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(\"from\");\n    }\n    node.source = this.parseImportSource();\n    // https://github.com/tc39/proposal-import-assertions\n    // parse module import assertions if the next token is `assert` or ignore\n    // and finish the ImportDeclaration node.\n    const assertions = this.maybeParseImportAssertions();\n    if (assertions) {\n      node.assertions = assertions;\n    }\n    // todo(Babel 8): remove module attributes support\n    else {\n      const attributes = this.maybeParseModuleAttributes();\n      if (attributes) {\n        node.attributes = attributes;\n      }\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n    return this.match(tt.name);\n  }\n\n  parseImportSpecifierLocal(\n    node: N.ImportDeclaration,\n    specifier: N.Node,\n    type: string,\n    contextDescription: string,\n  ): void {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(\n      specifier.local,\n      BIND_LEXICAL,\n      undefined,\n      contextDescription,\n    );\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  /**\n   * parse assert entries\n   *\n   * @see {@link https://tc39.es/proposal-import-assertions/#prod-AssertEntries |AssertEntries}\n   * @returns {N.ImportAttribute[]}\n   * @memberof StatementParser\n   */\n  parseAssertEntries(): N.ImportAttribute[] {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(tt.braceR)) {\n        break;\n      }\n\n      const node = this.startNode<N.ImportAttribute>();\n\n      // parse AssertionKey : IdentifierName, StringLiteral\n      const keyName = this.state.value;\n      if (this.match(tt.string)) {\n        node.key = this.parseLiteral<N.StringLiteral>(keyName, \"StringLiteral\");\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(tt.colon);\n\n      // for now we are only allowing `type` as the only allowed module attribute\n      if (keyName !== \"type\") {\n        this.raise(\n          node.key.start,\n          Errors.ModuleAttributeDifferentFromType,\n          keyName,\n        );\n      }\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attrNames.has(keyName)) {\n        this.raise(\n          node.key.start,\n          Errors.ModuleAttributesWithDuplicateKeys,\n          keyName,\n        );\n      }\n      attrNames.add(keyName);\n\n      if (!this.match(tt.string)) {\n        throw this.unexpected(\n          this.state.start,\n          Errors.ModuleAttributeInvalidValue,\n        );\n      }\n      node.value = this.parseLiteral<N.StringLiteral>(\n        this.state.value,\n        \"StringLiteral\",\n      );\n      this.finishNode<N.ImportAttribute>(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  /**\n   * parse module attributes\n   * @deprecated It will be removed in Babel 8\n   * @returns\n   * @memberof StatementParser\n   */\n  maybeParseModuleAttributes() {\n    if (this.match(tt._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n    const attrs = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(\n          node.key.start,\n          Errors.ModuleAttributeDifferentFromType,\n          node.key.name,\n        );\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(\n          node.key.start,\n          Errors.ModuleAttributesWithDuplicateKeys,\n          node.key.name,\n        );\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      if (!this.match(tt.string)) {\n        throw this.unexpected(\n          this.state.start,\n          Errors.ModuleAttributeInvalidValue,\n        );\n      }\n      node.value = this.parseLiteral(this.state.value, \"StringLiteral\");\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    // [no LineTerminator here] AssertClause\n    if (this.isContextual(\"assert\") && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next(); // eat `assert`\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n    // https://tc39.es/proposal-import-assertions/#prod-AssertClause\n    this.eat(tt.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(tt.braceR);\n\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.shouldParseDefaultImport(node)) {\n      // import defaultObj, { x, y as z } from '...'\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode(),\n        \"ImportDefaultSpecifier\",\n        \"default import specifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(\"as\");\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n        \"import namespace specifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: N.ImportDeclaration) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(this.state.start, Errors.DestructureNamedImport);\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      this.parseImportSpecifier(node);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportSpecifier\n  parseImportSpecifier(node: N.ImportDeclaration): void {\n    const specifier = this.startNode();\n    specifier.imported = this.parseModuleExportName();\n    if (this.eatContextual(\"as\")) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const { imported } = specifier;\n      if (imported.type === \"StringLiteral\") {\n        throw this.raise(\n          specifier.start,\n          Errors.ImportBindingIsString,\n          imported.value,\n        );\n      }\n      this.checkReservedWord(imported.name, specifier.start, true, true);\n      specifier.local = imported.__clone();\n    }\n    this.checkLVal(\n      specifier.local,\n      BIND_LEXICAL,\n      undefined,\n      \"import specifier\",\n    );\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n}\n","// @flow\n\nimport {\n  CLASS_ELEMENT_KIND_ACCESSOR,\n  CLASS_ELEMENT_FLAG_STATIC,\n  type ClassElementTypes,\n} from \"./scopeflags\";\nimport { Errors } from \"../parser/error\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementTypes> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, number> = new Map();\n}\n\ntype raiseFunction = (number, string, ...any) => void;\n\nexport default class ClassScopeHandler {\n  stack: Array<ClassScope> = [];\n  declare raise: raiseFunction;\n  undefinedPrivateNames: Map<string, number> = new Map();\n\n  constructor(raise: raiseFunction) {\n    this.raise = raise;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, pos] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, pos);\n        }\n      } else {\n        this.raise(pos, Errors.InvalidPrivateFieldResolution, name);\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementTypes,\n    pos: number,\n  ) {\n    const classScope = this.current();\n    let redefined = classScope.privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && classScope.loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) classScope.loneAccessors.delete(name);\n      } else if (!redefined) {\n        classScope.loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.raise(pos, Errors.PrivateNameRedeclaration, name);\n    }\n\n    classScope.privateNames.add(name);\n    classScope.undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, pos: number) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, pos);\n    } else {\n      // top-level\n      this.raise(pos, Errors.InvalidPrivateFieldResolution, name);\n    }\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type { File /*::, JSXOpeningElement */ } from \"../types\";\nimport type { PluginList } from \"../plugin-utils\";\nimport { getOptions } from \"../options\";\nimport StatementParser from \"./statement\";\nimport { SCOPE_PROGRAM } from \"../util/scopeflags\";\nimport ScopeHandler from \"../util/scope\";\nimport ClassScopeHandler from \"../util/class-scope\";\nimport ExpressionScopeHandler from \"../util/expression-scope\";\nimport ProductionParameterHandler, {\n  PARAM_AWAIT,\n  PARAM,\n} from \"../util/production-parameter\";\n\nexport type PluginsMap = Map<string, { [string]: any }>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  /*::\n  +jsxParseOpeningElementAfterName: (\n    node: JSXOpeningElement,\n  ) => JSXOpeningElement;\n  */\n\n  constructor(options: ?Options, input: string) {\n    options = getOptions(options);\n    super(options, input);\n\n    const ScopeHandler = this.getScopeHandler();\n\n    this.options = options;\n    this.inModule = this.options.sourceType === \"module\";\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n    this.prodParam = new ProductionParameterHandler();\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\n    this.expressionScope = new ExpressionScopeHandler(this.raise.bind(this));\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): Class<ScopeHandler<*>> {\n    return ScopeHandler;\n  }\n\n  parse(): File {\n    let paramFlags = PARAM;\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n}\n\nfunction pluginsMap(plugins: PluginList): PluginsMap {\n  const pluginMap: PluginsMap = new Map();\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n  return pluginMap;\n}\n","// @flow\n\nimport { type Options } from \"./options\";\nimport {\n  hasPlugin,\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n  type PluginList,\n} from \"./plugin-utils\";\nimport Parser from \"./parser\";\n\nimport { types as tokTypes } from \"./tokenizer/types\";\nimport \"./tokenizer/context\";\n\nimport type { Expression, File } from \"./types\";\n\nexport function parse(input: string, options?: Options): File {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nexport { tokTypes };\n\nfunction getParser(options: ?Options, input: string): Parser {\n  let cls = Parser;\n  if (options?.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache: { [key: string]: Class<Parser> } = {};\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(pluginsFromOptions: PluginList): Class<Parser> {\n  const pluginList = mixinPluginNames.filter(name =>\n    hasPlugin(pluginsFromOptions, name),\n  );\n\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\n"],"names":["beforeExpr","startsExpr","isLoop","isAssign","prefix","postfix","TokenType","constructor","label","conf","keyword","rightAssociative","binop","updateContext","keywords","Map","createKeyword","name","options","token","set","createBinop","types","num","bigint","decimal","regexp","string","eof","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","template","ellipsis","backQuote","dollarBraceL","at","hash","interpreterDirective","eq","assign","incDec","bang","tilde","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","relational","bitShift","plusMin","modulo","star","slash","exponent","_break","_case","_catch","_continue","_debugger","_default","_do","_else","_finally","_for","_function","_if","_return","_switch","_throw","_try","_var","_const","_while","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_in","_instanceof","_typeof","_void","_delete","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_CLASS","BIND_LEXICAL","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","lineBreak","lineBreakG","RegExp","source","isNewLine","code","skipWhiteSpace","isWhitespace","Position","line","col","column","SourceLocation","start","end","filename","identifierName","getLineInfo","input","offset","lineStart","match","lastIndex","exec","index","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","hasPlugin","plugins","has","getPluginOption","plugin","get","last","stack","length","CommentsParser","addComment","comment","loc","state","trailingComments","push","leadingComments","adjustCommentsAfterTrailingComma","node","elements","takeAllComments","lastElement","i","j","commentPreviousNode","splice","newTrailingComments","leadingComment","undefined","processComment","type","body","commentStack","firstChild","lastChild","lastInStack","pop","properties","arguments","slice","innerComments","firstTrailingCommentIndex","findIndex","ErrorMessages","Object","freeze","AccessorIsGenerator","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitExpressionFormalParameter","AwaitNotInAsyncContext","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorBeforeExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","DuplicateProto","DuplicateRegExpFlags","DuplicateStaticBlock","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportBindingIsString","ImportCallArgumentTrailingComma","ImportCallArity","ImportCallNotNewExpression","ImportCallSpreadArgument","ImportMetaOutsideModule","ImportOutsideModule","InvalidBigIntLiteral","InvalidCodePoint","InvalidDecimal","InvalidDigit","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","InvalidIdentifier","InvalidLhs","InvalidLhsBinding","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","ModuleExportNameHasLoneSurrogate","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","ParamDupe","PatternHasAccessor","PatternHasMethod","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","StaticPrototype","StrictDelete","StrictEvalArguments","StrictEvalArgumentsBinding","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","UnexpectedTokenUnaryExponentiation","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","ParserError","getLocationForPosition","pos","startLoc","lastTokStart","lastTokStartLoc","endLoc","lastTokEnd","lastTokEndLoc","raise","errorTemplate","params","raiseWithData","data","message","replace","_","_raise","errorContext","err","SyntaxError","errorRecovery","isLookahead","errors","isSimpleProperty","kind","method","superClass","estreeParseRegExpLiteral","pattern","flags","regex","e","estreeParseLiteral","estreeParseBigIntLiteral","value","bigInt","BigInt","String","estreeParseDecimalLiteral","parseLiteral","directiveToStmt","directive","directiveLiteral","stmt","startNodeAt","expression","raw","extra","finishNodeAt","initFunction","isAsync","checkDeclaration","getObjectOrClassMethodParams","checkLVal","expr","bindingType","checkClashes","contextDescription","disallowLetBinding","forEach","prop","checkProto","isRecord","protoRef","refExpressionErrors","isValidDirective","parenthesized","stmtToDirective","parseBlockBody","allowDirectives","topLevel","directiveStatements","directives","map","d","concat","pushClassMethod","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","parseExprAtom","tt","startPos","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","finishNode","parseObjectMethod","isPattern","isAccessor","shorthand","parseObjectProperty","toAssignable","toAssignableObjectExpressionProp","isLast","key","Errors","finishCallExpression","optional","callee","toReferencedArguments","parseExport","exported","specifiers","parseSubscript","base","noCalls","optionalChainMember","substring","stop","chain","startNodeAtNode","TokContext","isExpr","preserveSpace","override","braceStatement","braceExpression","recordExpression","templateQuasi","parenStatement","parenExpression","p","readTmplToken","functionExpression","functionStatement","context","exprAllowed","out","curContext","prevType","allowed","isIterator","braceIsBlock","statementParens","hasPrecedingLineBreak","b_stat","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","Set","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","keywordRelationalOperator","isIteratorStart","current","next","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","OptionalBindingPattern","SpreadVariance","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","declaration","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","flowPragma","shouldParseTypes","shouldParseEnums","finishToken","val","matches","Error","flowParseTypeInitialiser","tok","oldInType","inType","expect","flowParseType","flowParsePredicate","moduloLoc","moduloPos","checksLoc","expectContextual","eat","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","id","parseIdentifier","typeNode","typeContainer","isRelational","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","rest","returnType","typeAnnotation","resetEndLocation","semicolon","flowParseDeclare","insideModule","flowParseDeclareVariable","eatContextual","flowParseDeclareModuleExports","flowParseDeclareModule","isContextual","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","unexpected","flowParseTypeAnnotatableIdentifier","scope","declareName","enter","bodyNode","parseImport","exit","hasModuleExport","default","isLet","suggestion","exportKind","flowParseTypeAnnotation","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","nodeStart","variance","flowParseVariance","ident","bound","jsxTagStart","defaultRequired","typeParameter","expectRelational","oldNoAnonFunctionType","noAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","lookahead","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStart","inexactStart","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","argument","proto","flowCheckGetterSetterParams","property","paramCount","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","lh","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","createIdentifier","flowParsePostfixType","canInsertSemicolon","elementType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatement","flowParseEnumDeclaration","parseExpressionStatement","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","refNeedsArrowPos","result","tryParse","error","failState","clone","originalNoArrowAt","noArrowAt","consequent","failed","tryParseConditionalConsequent","valid","invalid","getArrowLikeExpressions","alternate","parseMaybeAssign","noArrowParamsConversionAt","parseMaybeAssignAllowIn","disallowInvalid","arrows","finishArrowValidation","every","isAssignable","toAssignableList","trailingComma","checkParams","parse","indexOf","parseParenItem","typeCastNode","assertModuleNodeAllowed","decl","parseExportDeclaration","declarationNode","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","member","parseClassMemberFromModifier","getTokenFromCode","charCodeAt","finishOp","readWord","isBinding","element","operator","exprList","trailingCommaPos","toReferencedList","isParenthesizedExpr","parseArrayLike","close","canBePattern","isTuple","maybeInArrowParameters","parseClassProperty","parseClassPrivateProperty","isClassMethod","isClassProperty","isNonstaticConstructor","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","parsePropertyName","isPrivateNameAllowed","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","left","shouldParseDefaultImport","parseImportSpecifierLocal","specifier","local","maybeParseDefaultImportSpecifier","parseImportSpecifier","firstIdentLoc","firstIdent","parseModuleExportName","specifierTypeKind","isLookaheadContextual","as_ident","imported","__clone","nodeIsTypeImport","specifierIsTypeImport","checkReservedWord","parseFunctionParams","allowModifiers","parseVarId","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","jsx","tc","j_oTag","j_expr","abort","arrowExpression","resetStartLocationFromNode","maybeUnwrapTypeCastExpression","aborted","async","thrown","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","subscriptState","isLookaheadToken_lt","typeArguments","parseNewArguments","targs","parseArrowExpression","readToken_mult_modulo","hasFlowComment","nextToken","readToken_pipe_amp","parseTopLevel","file","program","fileNode","skipBlockComment","skipFlowComment","hasFlowCommentCompletion","shiftToFirstNonWhiteSpace","includes","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","enumName","memberName","flowEnumErrorInvalidMemberName","toUpperCase","flowEnumErrorDuplicateMemberName","flowEnumErrorInconsistentMemberValues","flowEnumErrorInvalidExplicitType","suppliedType","flowEnumErrorInvalidMemberInitializer","explicitType","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumMemberInit","endOfInit","literal","parseBooleanLiteral","flowEnumMemberRaw","init","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","memberNode","add","flowEnumStringMembers","initializedMembers","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","nextTokenStart","afterNext","entities","quot","amp","apos","lt","gt","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","HEX_NUMBER","DECIMAL_NUMBER","JsxErrors","AttributeIsEmpty","MissingClosingTagFragment","MissingClosingTagElement","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","j_cTag","jsxName","jsxText","jsxTagEnd","isFragment","object","getQualifiedJSXName","namespace","jsxReadToken","chunkStart","ch","jsxReadEntity","jsxReadNewLine","normalizeCRLF","curLine","jsxReadString","quote","str","count","entity","substr","fromCodePoint","parseInt","XHTMLEntities","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","newNode","jsxParseAttributeValue","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","attributes","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","inPropertyName","Scope","var","lexical","functions","ScopeHandler","scopeStack","undefinedExports","undefinedPrivateNames","inFunction","currentVarScope","allowSuper","currentThisScope","inClass","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","currentScope","createScope","checkRedeclarationInScope","maybeExportDefined","delete","isRedeclaredInScope","checkLocalExport","TypeScriptScope","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","isConst","wasConst","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","PARAM_IN","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasYield","hasReturn","hasIn","functionFlags","nonNull","x","assert","TSErrors","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstructorHasTypeParameters","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasStatic","IndexSignatureHasDeclare","InvalidTupleMemberLabel","MixedLabeledAndUnlabeledElements","OptionalTypeBeforeRequired","PatternIsOptional","PrivateElementHasAbstract","PrivateElementHasAccessibility","TypeAnnotationAfterAssign","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","getScopeHandler","tsIsIdentifier","tsNextTokenCanFollowModifier","tsParseModifier","allowedModifiers","modifier","tsTryParse","bind","tsParseModifiers","modified","hasOwnProperty","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","tsParseDelimitedListWorker","expectSuccess","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseTypeParameter","parseIdentifierName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsTryNextParseConstantContext","tsFillSignature","returnToken","signature","returnTokenRequired","parameters","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","parseBindingList","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","tsParseTypeMember","idx","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","nameType","tsParseType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","labeledElements","elementNode","isLabeled","labeled","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","tsParseLiteralTypeNode","tsParseTemplateLiteralType","parseTemplate","parseTemplateSubstitution","tsParseThisTypeOrThisTypePredicate","thisKeyword","tsParseNonArrayType","lookaheadCharCode","parseMaybeUnary","tsParseArrayTypeOrHigher","objectType","indexType","tsParseTypeOperator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","find","kw","tsParseUnionOrIntersectionType","parseConstituentType","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","braceStackCounter","tsInType","t","asserts","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","containsEsc","eatColon","tsParseNonConditionalType","checkType","extendsType","trueType","falseType","tsParseTypeAssertion","tsNextThenParseType","tsParseHeritageClause","descriptor","originalStart","delimitedList","tsParseExpressionWithTypeArguments","tsParseInterfaceDeclaration","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","tsDoThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","prodParam","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","res","tsTryParseAndCatch","tsTryParseDeclare","nany","isLineTerminator","starttype","tsInDeclareContext","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminatorAndMatch","cls","abstract","tokenType","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","tsIsDeclarationStart","parseAssignableListItem","decorators","accessibility","parseAccessModifier","elt","pp","parameter","bodilessType","isDeclareContext","registerFunctionStatementId","tsCheckForInvalidTypeCasts","items","isInParens","args","nonNullExpression","atPossibleAsyncArrow","asyncArrowFn","parseTaggedTemplateExpression","parseExprOp","leftStartPos","leftStartLoc","minPrec","reScan_lt_gt","checkKeywords","checkDuplicateExports","ahead","importNode","isAbstractClass","parseStatementContent","callParseClassMember","parseClassMemberWithIsStatic","parsePostMemberNameModifiers","methodOrProp","isDeclare","resetStartLocation","parseClassPropertyAnnotation","definite","typeCast","ct","parseBindingAtom","parseMaybeDecoratorArguments","readToken_lt_gt","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parseCatchClauseParam","oldIsDeclareContext","placeholder","parsePlaceholder","expectedNode","assertNoSpace","finishPlaceholder","isFinished","verifyBreakContinue","parseBlock","parseFunctionId","takeDecorators","oldStrict","parseClassBody","expectPlugin","isUnparsedContextual","startsWith","nextTokenStartSince","maybeParseExportDefaultSpecifier","checkExport","filter","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","parseV8Intrinsic","v8IntrinsicStart","identifier","some","Array","isArray","option","PIPELINE_PROPOSALS","RECORD_AND_TUPLE_SYNTAX_TYPES","validatePlugins","decoratorsBeforeExport","join","moduleAttributesVerionPluginOption","mixinPlugins","estree","flow","typescript","v8intrinsic","placeholders","mixinPluginNames","keys","defaultOptions","sourceType","sourceFilename","startLine","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","strictMode","ranges","tokens","createParenthesizedExpressions","getOptions","opts","State","potentialArrowAt","inPipeline","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","decoratorStack","comments","octalPositions","exportedIdentifiers","tokensLength","curPosition","skipArrays","isDigit","VALID_REGEX_FLAGS","forbiddenNumericSeparatorSiblings","decBinOct","hex","allowedNumericSeparatorSiblings","bin","oct","dec","Token","Tokenizer","ParserErrors","pushToken","checkKeywordEscapes","old","curr","skip","setStrict","lastIndexOf","skipSpace","codePointAt","pushComment","block","text","skipLineComment","startSkip","loop","readToken_numberSign","readToken_interpreter","nextPos","readToken_dot","readNumber","readToken_slash","readRegexp","width","readToken_caret","readToken_plus_min","size","readToken_eq_excl","readToken_question","next2","readRadixNumber","readString","escaped","charAt","content","mods","char","charCode","readInt","radix","len","forceLen","allowNumSeparator","forbiddenSiblings","allowedSiblings","total","Infinity","prev","Number","isNaN","isBigInt","startsWithDot","isFloat","isDecimal","hasExponent","isOctal","hasLeadingZero","integer","underscorePos","parseFloat","readCodePoint","throwOnInvalid","codePos","readHexChar","readEscapedChar","containsInvalid","inTemplate","octalStr","octal","n","readWord1","escStart","identifierCheck","esc","keywordTypes","parent","update","UtilParser","addExtra","op","nameStart","nameEnd","messageOrType","missingPlugin","expectOnePlugin","names","fn","oldState","abortSignal","checkExpressionErrors","andThrow","shorthandAssign","doubleProto","isLiteralPropertyName","ExpressionErrors","Node","parser","range","NodeUtils","locationNode","unwrapParenthesizedExpression","LValParser","raiseRestNotLast","checkToRestConversion","arg","raiseTrailingCommaAfterRest","toReferencedListDeep","parseSpread","parseRestBinding","parseObjectLike","closeCharCode","allowEmpty","elts","first","checkCommaAfterRest","parseDecorator","strictModeChanged","elem","kExpression","kMaybeArrowParameterDeclaration","kMaybeAsyncArrowParameterDeclaration","kParameterDeclaration","ExpressionScope","canBeArrowParameterDeclaration","isCertainlyParameterDeclaration","ArrowHeadParsingScope","recordDeclarationError","clearDeclarationError","iterateErrors","iterator","ExpressionScopeHandler","recordParameterInitializerError","recordAsyncArrowParametersError","validateAsPattern","newParameterDeclarationScope","newArrowHeadScope","newAsyncArrowScope","newExpressionScope","ExpressionParser","computed","used","shouldExitDescending","getExpression","paramFlags","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","expressions","parseMaybeAssignDisallowIn","parseYield","ownExpressionErrors","parseMaybeConditional","parseExprOps","prec","checkPipelineAtInfixOperator","logical","coalesce","parseExprOpRightExpr","nextOp","withTopicPermittingContext","parseSmartPipelineBody","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","isAwaitAllowed","parseAwait","isDelete","parseUpdate","parseExprSubscripts","maybeAsyncArrow","parseBind","parseCoverCallAndAsyncArrowHead","parseMember","parseMaybePrivateName","classScope","usePrivateName","parseNoCallExpr","expressionScope","tag","quasi","possibleAsyncArrow","dynamicImport","allowPlaceholder","nodeForExtra","innerParenStart","oldInFSharpPipelineDirectBody","parseExprListItem","parseSuper","parseImportMetaProperty","parseFunction","parseAsyncArrowUnaryFunction","parseDo","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","primaryTopicReferenceIsAllowedInCurrentTopicContext","registerTopicReference","nextCh","lookaheadCh","oldLabels","isPrivate","meta","parseMetaProperty","propertyName","innerStartPos","innerStartLoc","spreadStart","optionalCommaStart","spreadNodeStartPos","spreadNodeStartLoc","innerEndPos","innerEndLoc","arrowNode","parenStart","metaProp","parseNew","parseExprList","parseTemplateElement","isTagged","cooked","tail","curElt","quasis","propHash","create","parsePropertyDefinition","maybeAsyncOrAccessorProp","keyName","checkGetterSetterParams","oldInPropertyName","generator","isExpression","hasStrictModeDirective","nonSimple","isSimpleParamList","errorPos","nameHash","reservedTest","delegate","childExpression","checkSmartPipelineBodyEarlyErrors","parseSmartPipelineBodyInStyle","isSimpleReference","topicReferenceWasUsedInCurrentTopicContext","callback","outerContextTopicState","withTopicForbiddingContext","outerContextSoloAwaitState","prodParamToSet","prodParamToClear","ret","loopLabel","switchLabel","FUNC_NO_FLAGS","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","FUNC_NULLABLE_ID","loneSurrogate","StatementParser","interpreter","parseInterpreterDirective","from","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","allowExport","currentContextDecorators","decorator","isBreak","lab","parseHeaderExpression","awaitAt","parseFor","parseVar","declarations","parseForIn","description","declarationPosition","discriminant","cases","cur","sawDefault","isCase","simple","handler","clause","finalizer","statementStart","createNewLexicalScope","afterBlockParse","parsedNonDirective","isForIn","await","isFor","isTypescript","statement","isHangingStatement","requireId","constructorAllowsSuper","hadConstructor","hadStaticBlock","parseClassStaticBlock","publicMethod","privateMethod","publicProp","privateProp","publicMember","parseClassElementName","isSimple","maybeQuestionTokenStart","pushClassPrivateProperty","pushClassProperty","declarePrivateName","parseInitializer","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","l","hasFrom","nextAfterFrom","assertions","maybeParseImportAssertions","checkNames","isDefault","isFrom","exportedName","nodes","surrogate","toString","parseNext","maybeParseModuleAttributes","parseAssertEntries","attrs","attrNames","ClassScope","privateNames","loneAccessors","ClassScopeHandler","oldClassScope","redefined","accessor","oldStatic","newStatic","oldKind","newKind","Parser","pluginsMap","pluginMap","getParser","ast","moduleError","getParserClass","parserClassCache","pluginsFromOptions","pluginList"],"mappings":"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"}